<?php
/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
require_once __DIR__ .'/../Exception/TException.php';
use Thrift\Base\TBase;
use Thrift\Type\TType;
use Thrift\Type\TMessageType;
use Thrift\Exception\TException;
use Thrift\Exception\TProtocolException;
use Thrift\Protocol\TProtocol;
use Thrift\Protocol\TBinaryProtocolAccelerated;
use Thrift\Exception\TApplicationException;


final class ApplicationType {
  const IOS = 16;
  const IOS_RC = 17;
  const IOS_BETA = 18;
  const IOS_ALPHA = 19;
  const ANDROID = 32;
  const ANDROID_RC = 33;
  const ANDROID_BETA = 34;
  const ANDROID_ALPHA = 35;
  const WAP = 48;
  const WAP_RC = 49;
  const WAP_BETA = 50;
  const WAP_ALPHA = 51;
  const BOT = 64;
  const BOT_RC = 65;
  const BOT_BETA = 66;
  const BOT_ALPHA = 67;
  const WEB = 80;
  const WEB_RC = 81;
  const WEB_BETA = 82;
  const WEB_ALPHA = 83;
  const DESKTOPWIN = 96;
  const DESKTOPWIN_RC = 97;
  const DESKTOPWIN_BETA = 98;
  const DESKTOPWIN_ALPHA = 99;
  const DESKTOPMAC = 112;
  const DESKTOPMAC_RC = 113;
  const DESKTOPMAC_BETA = 114;
  const DESKTOPMAC_ALPHA = 115;
  const CHANNELGW = 128;
  const CHANNELGW_RC = 129;
  const CHANNELGW_BETA = 130;
  const CHANNELGW_ALPHA = 131;
  const CHANNELCP = 144;
  const CHANNELCP_RC = 145;
  const CHANNELCP_BETA = 146;
  const CHANNELCP_ALPHA = 147;
  const WINPHONE = 160;
  const WINPHONE_RC = 161;
  const WINPHONE_BETA = 162;
  const WINPHONE_ALPHA = 163;
  const BLACKBERRY = 176;
  const BLACKBERRY_RC = 177;
  const BLACKBERRY_BETA = 178;
  const BLACKBERRY_ALPHA = 179;
  const WINMETRO = 192;
  const WINMETRO_RC = 193;
  const WINMETRO_BETA = 194;
  const WINMETRO_ALPHA = 195;
  const S40 = 208;
  const S40_RC = 209;
  const S40_BETA = 210;
  const S40_ALPHA = 211;
  const CHRONO = 224;
  const CHRONO_RC = 225;
  const CHRONO_BETA = 226;
  const CHRONO_ALPHA = 227;
  const TIZEN = 256;
  const TIZEN_RC = 257;
  const TIZEN_BETA = 258;
  const TIZEN_ALPHA = 259;
  const VIRTUAL = 272;
  const FIREFOXOS = 288;
  const FIREFOXOS_RC = 289;
  const FIREFOXOS_BETA = 290;
  const FIREFOXOS_ALPHA = 291;
  const IOSIPAD = 304;
  const IOSIPAD_RC = 305;
  const IOSIPAD_BETA = 306;
  const IOSIPAD_ALPHA = 307;
  const BIZIOS = 320;
  const BIZIOS_RC = 321;
  const BIZIOS_BETA = 322;
  const BIZIOS_ALPHA = 323;
  const BIZANDROID = 336;
  const BIZANDROID_RC = 337;
  const BIZANDROID_BETA = 338;
  const BIZANDROID_ALPHA = 339;
  const BIZBOT = 352;
  const BIZBOT_RC = 353;
  const BIZBOT_BETA = 354;
  const BIZBOT_ALPHA = 355;
  const CHROMEOS = 368;
  const CHROMEOS_RC = 369;
  const CHROMEOS_BETA = 370;
  const CHROMEOS_ALPHA = 371;
  const ANDROIDLITE = 384;
  const ANDROIDLITE_RC = 385;
  const ANDROIDLITE_BETA = 386;
  const ANDROIDLITE_ALPHA = 387;
  const WIN10 = 400;
  const WIN10_RC = 401;
  const WIN10_BETA = 402;
  const WIN10_ALPHA = 403;
  const BIZWEB = 416;
  const BIZWEB_RC = 417;
  const BIZWEB_BETA = 418;
  const BIZWEB_ALPHA = 419;
  const DUMMYPRIMARY = 432;
  const DUMMYPRIMARY_RC = 433;
  const DUMMYPRIMARY_BETA = 434;
  const DUMMYPRIMARY_ALPHA = 435;
  const SQUARE = 448;
  const SQUARE_RC = 449;
  const SQUARE_BETA = 450;
  const SQUARE_ALPHA = 451;
  const INTERNAL = 464;
  const INTERNAL_RC = 465;
  const INTERNAL_BETA = 466;
  const INTERNAL_ALPHA = 467;
  const CLOVAFRIENDS = 480;
  const CLOVAFRIENDS_RC = 481;
  const CLOVAFRIENDS_BETA = 482;
  const CLOVAFRIENDS_ALPHA = 483;
  static public $__names = array(
    16 => 'IOS',
    17 => 'IOS_RC',
    18 => 'IOS_BETA',
    19 => 'IOS_ALPHA',
    32 => 'ANDROID',
    33 => 'ANDROID_RC',
    34 => 'ANDROID_BETA',
    35 => 'ANDROID_ALPHA',
    48 => 'WAP',
    49 => 'WAP_RC',
    50 => 'WAP_BETA',
    51 => 'WAP_ALPHA',
    64 => 'BOT',
    65 => 'BOT_RC',
    66 => 'BOT_BETA',
    67 => 'BOT_ALPHA',
    80 => 'WEB',
    81 => 'WEB_RC',
    82 => 'WEB_BETA',
    83 => 'WEB_ALPHA',
    96 => 'DESKTOPWIN',
    97 => 'DESKTOPWIN_RC',
    98 => 'DESKTOPWIN_BETA',
    99 => 'DESKTOPWIN_ALPHA',
    112 => 'DESKTOPMAC',
    113 => 'DESKTOPMAC_RC',
    114 => 'DESKTOPMAC_BETA',
    115 => 'DESKTOPMAC_ALPHA',
    128 => 'CHANNELGW',
    129 => 'CHANNELGW_RC',
    130 => 'CHANNELGW_BETA',
    131 => 'CHANNELGW_ALPHA',
    144 => 'CHANNELCP',
    145 => 'CHANNELCP_RC',
    146 => 'CHANNELCP_BETA',
    147 => 'CHANNELCP_ALPHA',
    160 => 'WINPHONE',
    161 => 'WINPHONE_RC',
    162 => 'WINPHONE_BETA',
    163 => 'WINPHONE_ALPHA',
    176 => 'BLACKBERRY',
    177 => 'BLACKBERRY_RC',
    178 => 'BLACKBERRY_BETA',
    179 => 'BLACKBERRY_ALPHA',
    192 => 'WINMETRO',
    193 => 'WINMETRO_RC',
    194 => 'WINMETRO_BETA',
    195 => 'WINMETRO_ALPHA',
    208 => 'S40',
    209 => 'S40_RC',
    210 => 'S40_BETA',
    211 => 'S40_ALPHA',
    224 => 'CHRONO',
    225 => 'CHRONO_RC',
    226 => 'CHRONO_BETA',
    227 => 'CHRONO_ALPHA',
    256 => 'TIZEN',
    257 => 'TIZEN_RC',
    258 => 'TIZEN_BETA',
    259 => 'TIZEN_ALPHA',
    272 => 'VIRTUAL',
    288 => 'FIREFOXOS',
    289 => 'FIREFOXOS_RC',
    290 => 'FIREFOXOS_BETA',
    291 => 'FIREFOXOS_ALPHA',
    304 => 'IOSIPAD',
    305 => 'IOSIPAD_RC',
    306 => 'IOSIPAD_BETA',
    307 => 'IOSIPAD_ALPHA',
    320 => 'BIZIOS',
    321 => 'BIZIOS_RC',
    322 => 'BIZIOS_BETA',
    323 => 'BIZIOS_ALPHA',
    336 => 'BIZANDROID',
    337 => 'BIZANDROID_RC',
    338 => 'BIZANDROID_BETA',
    339 => 'BIZANDROID_ALPHA',
    352 => 'BIZBOT',
    353 => 'BIZBOT_RC',
    354 => 'BIZBOT_BETA',
    355 => 'BIZBOT_ALPHA',
    368 => 'CHROMEOS',
    369 => 'CHROMEOS_RC',
    370 => 'CHROMEOS_BETA',
    371 => 'CHROMEOS_ALPHA',
    384 => 'ANDROIDLITE',
    385 => 'ANDROIDLITE_RC',
    386 => 'ANDROIDLITE_BETA',
    387 => 'ANDROIDLITE_ALPHA',
    400 => 'WIN10',
    401 => 'WIN10_RC',
    402 => 'WIN10_BETA',
    403 => 'WIN10_ALPHA',
    416 => 'BIZWEB',
    417 => 'BIZWEB_RC',
    418 => 'BIZWEB_BETA',
    419 => 'BIZWEB_ALPHA',
    432 => 'DUMMYPRIMARY',
    433 => 'DUMMYPRIMARY_RC',
    434 => 'DUMMYPRIMARY_BETA',
    435 => 'DUMMYPRIMARY_ALPHA',
    448 => 'SQUARE',
    449 => 'SQUARE_RC',
    450 => 'SQUARE_BETA',
    451 => 'SQUARE_ALPHA',
    464 => 'INTERNAL',
    465 => 'INTERNAL_RC',
    466 => 'INTERNAL_BETA',
    467 => 'INTERNAL_ALPHA',
    480 => 'CLOVAFRIENDS',
    481 => 'CLOVAFRIENDS_RC',
    482 => 'CLOVAFRIENDS_BETA',
    483 => 'CLOVAFRIENDS_ALPHA',
  );
}

final class BotType {
  const RESERVED = 0;
  const OFFICIAL = 1;
  const LINE_AT_0 = 2;
  const LINE_AT = 3;
  static public $__names = array(
    0 => 'RESERVED',
    1 => 'OFFICIAL',
    2 => 'LINE_AT_0',
    3 => 'LINE_AT',
  );
}

final class BuddyOnAirLabel {
  const ON_AIR = 0;
  const LIVE = 1;
  static public $__names = array(
    0 => 'ON_AIR',
    1 => 'LIVE',
  );
}

final class BuddyBannerLinkType {
  const BUDDY_BANNER_LINK_HIDDEN = 0;
  const BUDDY_BANNER_LINK_MID = 1;
  const BUDDY_BANNER_LINK_URL = 2;
  static public $__names = array(
    0 => 'BUDDY_BANNER_LINK_HIDDEN',
    1 => 'BUDDY_BANNER_LINK_MID',
    2 => 'BUDDY_BANNER_LINK_URL',
  );
}

final class BuddyOnAirType {
  const NORMAL = 0;
  const LIVE = 1;
  const VOIP = 2;
  static public $__names = array(
    0 => 'NORMAL',
    1 => 'LIVE',
    2 => 'VOIP',
  );
}

final class Diff {
  const ADDED = 0;
  const UPDATED = 1;
  const REMOVED = 2;
  static public $__names = array(
    0 => 'ADDED',
    1 => 'UPDATED',
    2 => 'REMOVED',
  );
}

final class SyncTriggerReason {
  const OTHER = 0;
  const REVISION_GAP_TOO_LARGE = 1;
  const OPERATION_EXPIRED = 2;
  static public $__names = array(
    0 => 'OTHER',
    1 => 'REVISION_GAP_TOO_LARGE',
    2 => 'OPERATION_EXPIRED',
  );
}

final class ReportCategory {
  const PUSH_NORMAL_PLAIN = 0;
  const PUSH_NORMAL_E2EE = 1;
  const PUSH_VOIP_PLAIN = 2;
  const PUSH_VOIP_E2EE = 3;
  static public $__names = array(
    0 => 'PUSH_NORMAL_PLAIN',
    1 => 'PUSH_NORMAL_E2EE',
    2 => 'PUSH_VOIP_PLAIN',
    3 => 'PUSH_VOIP_E2EE',
  );
}

final class BuddyResultState {
  const ACCEPTED = 1;
  const SUCCEEDED = 2;
  const FAILED = 3;
  const CANCELLED = 4;
  const NOTIFY_FAILED = 5;
  const STORING = 11;
  const UPLOADING = 21;
  const NOTIFYING = 31;
  const REMOVING_SUBSCRIPTION = 41;
  const UNREGISTERING_ACCOUNT = 42;
  const NOTIFYING_LEAVE_CHAT = 43;
  static public $__names = array(
    1 => 'ACCEPTED',
    2 => 'SUCCEEDED',
    3 => 'FAILED',
    4 => 'CANCELLED',
    5 => 'NOTIFY_FAILED',
    11 => 'STORING',
    21 => 'UPLOADING',
    31 => 'NOTIFYING',
    41 => 'REMOVING_SUBSCRIPTION',
    42 => 'UNREGISTERING_ACCOUNT',
    43 => 'NOTIFYING_LEAVE_CHAT',
  );
}

final class BuddySearchRequestSource {
  const NA = 0;
  const FRIEND_VIEW = 1;
  const OFFICIAL_ACCOUNT_VIEW = 2;
  static public $__names = array(
    0 => 'NA',
    1 => 'FRIEND_VIEW',
    2 => 'OFFICIAL_ACCOUNT_VIEW',
  );
}

final class CarrierCode {
  const NOT_SPECIFIED = 0;
  const JP_DOCOMO = 1;
  const JP_AU = 2;
  const JP_SOFTBANK = 3;
  const JP_DOCOMO_LINE = 4;
  const KR_SKT = 17;
  const KR_KT = 18;
  const KR_LGT = 19;
  static public $__names = array(
    0 => 'NOT_SPECIFIED',
    1 => 'JP_DOCOMO',
    2 => 'JP_AU',
    3 => 'JP_SOFTBANK',
    4 => 'JP_DOCOMO_LINE',
    17 => 'KR_SKT',
    18 => 'KR_KT',
    19 => 'KR_LGT',
  );
}

final class ChannelConfiguration {
  const MESSAGE = 0;
  const MESSAGE_NOTIFICATION = 1;
  const NOTIFICATION_CENTER = 2;
  static public $__names = array(
    0 => 'MESSAGE',
    1 => 'MESSAGE_NOTIFICATION',
    2 => 'NOTIFICATION_CENTER',
  );
}

final class ChannelPermission {
  const PROFILE = 0;
  const FRIENDS = 1;
  const GROUP = 2;
  static public $__names = array(
    0 => 'PROFILE',
    1 => 'FRIENDS',
    2 => 'GROUP',
  );
}

final class ChannelFeatureLicense {
  const BLE_LCS_API_USABLE = 26;
  const PROHIBIT_MINIMIZE_CHANNEL_BROWSER = 27;
  const ALLOW_IOS_WEBKIT = 28;
  static public $__names = array(
    26 => 'BLE_LCS_API_USABLE',
    27 => 'PROHIBIT_MINIMIZE_CHANNEL_BROWSER',
    28 => 'ALLOW_IOS_WEBKIT',
  );
}

final class ChannelErrorCode {
  const ILLEGAL_ARGUMENT = 0;
  const INTERNAL_ERROR = 1;
  const CONNECTION_ERROR = 2;
  const AUTHENTICATIONI_FAILED = 3;
  const NEED_PERMISSION_APPROVAL = 4;
  const COIN_NOT_USABLE = 5;
  const WEBVIEW_NOT_ALLOWED = 6;
  static public $__names = array(
    0 => 'ILLEGAL_ARGUMENT',
    1 => 'INTERNAL_ERROR',
    2 => 'CONNECTION_ERROR',
    3 => 'AUTHENTICATIONI_FAILED',
    4 => 'NEED_PERMISSION_APPROVAL',
    5 => 'COIN_NOT_USABLE',
    6 => 'WEBVIEW_NOT_ALLOWED',
  );
}

final class ChannelSyncType {
  const SYNC = 0;
  const REMOVE = 1;
  const REMOVE_ALL = 2;
  static public $__names = array(
    0 => 'SYNC',
    1 => 'REMOVE',
    2 => 'REMOVE_ALL',
  );
}

final class LoginType {
  const ID_CREDENTIAL = 0;
  const QRCODE = 1;
  const ID_CREDENTIAL_WITH_E2EE = 2;
  static public $__names = array(
    0 => 'ID_CREDENTIAL',
    1 => 'QRCODE',
    2 => 'ID_CREDENTIAL_WITH_E2EE',
  );
}

final class ContactAttribute {
  const CONTACT_ATTRIBUTE_CAPABLE_VOICE_CALL = 1;
  const CONTACT_ATTRIBUTE_CAPABLE_VIDEO_CALL = 2;
  const CONTACT_ATTRIBUTE_CAPABLE_MY_HOME = 16;
  const CONTACT_ATTRIBUTE_CAPABLE_BUDDY = 32;
  static public $__names = array(
    1 => 'CONTACT_ATTRIBUTE_CAPABLE_VOICE_CALL',
    2 => 'CONTACT_ATTRIBUTE_CAPABLE_VIDEO_CALL',
    16 => 'CONTACT_ATTRIBUTE_CAPABLE_MY_HOME',
    32 => 'CONTACT_ATTRIBUTE_CAPABLE_BUDDY',
  );
}

final class ContactCategory {
  const NORMAL = 0;
  const RECOMMEND = 1;
  static public $__names = array(
    0 => 'NORMAL',
    1 => 'RECOMMEND',
  );
}

final class ContactRelation {
  const ONEWAY = 0;
  const BOTH = 1;
  const NOT_REGISTERED = 2;
  static public $__names = array(
    0 => 'ONEWAY',
    1 => 'BOTH',
    2 => 'NOT_REGISTERED',
  );
}

final class AsymmetricKeyAlgorithm {
  const ASYMMETRIC_KEY_ALGORITHM_RSA = 1;
  const ASYMMETRIC_KEY_ALGORITHM_ECDH = 2;
  static public $__names = array(
    1 => 'ASYMMETRIC_KEY_ALGORITHM_RSA',
    2 => 'ASYMMETRIC_KEY_ALGORITHM_ECDH',
  );
}

final class ContactSetting {
  const CONTACT_SETTING_NOTIFICATION_DISABLE = 1;
  const CONTACT_SETTING_DISPLAY_NAME_OVERRIDE = 2;
  const CONTACT_SETTING_CONTACT_HIDE = 4;
  const CONTACT_SETTING_FAVORITE = 8;
  const CONTACT_SETTING_DELETE = 16;
  static public $__names = array(
    1 => 'CONTACT_SETTING_NOTIFICATION_DISABLE',
    2 => 'CONTACT_SETTING_DISPLAY_NAME_OVERRIDE',
    4 => 'CONTACT_SETTING_CONTACT_HIDE',
    8 => 'CONTACT_SETTING_FAVORITE',
    16 => 'CONTACT_SETTING_DELETE',
  );
}

final class ContactStatus {
  const UNSPECIFIED = 0;
  const FRIEND = 1;
  const FRIEND_BLOCKED = 2;
  const RECOMMEND = 3;
  const RECOMMEND_BLOCKED = 4;
  const DELETED = 5;
  const DELETED_BLOCKED = 6;
  static public $__names = array(
    0 => 'UNSPECIFIED',
    1 => 'FRIEND',
    2 => 'FRIEND_BLOCKED',
    3 => 'RECOMMEND',
    4 => 'RECOMMEND_BLOCKED',
    5 => 'DELETED',
    6 => 'DELETED_BLOCKED',
  );
}

final class ContactType {
  const MID = 0;
  const PHONE = 1;
  const EMAIL = 2;
  const USERID = 3;
  const PROXIMITY = 4;
  const GROUP = 5;
  const USER = 6;
  const QRCODE = 7;
  const PROMOTION_BOT = 8;
  const CONTACT_MESSAGE = 9;
  const FRIEND_REQUEST = 10;
  const REPAIR = 128;
  const FACEBOOK = 2305;
  const SINA = 2306;
  const RENREN = 2307;
  const FEIXIN = 2308;
  const BBM = 2309;
  const BEACON = 11;
  static public $__names = array(
    0 => 'MID',
    1 => 'PHONE',
    2 => 'EMAIL',
    3 => 'USERID',
    4 => 'PROXIMITY',
    5 => 'GROUP',
    6 => 'USER',
    7 => 'QRCODE',
    8 => 'PROMOTION_BOT',
    9 => 'CONTACT_MESSAGE',
    10 => 'FRIEND_REQUEST',
    128 => 'REPAIR',
    2305 => 'FACEBOOK',
    2306 => 'SINA',
    2307 => 'RENREN',
    2308 => 'FEIXIN',
    2309 => 'BBM',
    11 => 'BEACON',
  );
}

final class ContentType {
  const NONE = 0;
  const IMAGE = 1;
  const VIDEO = 2;
  const AUDIO = 3;
  const HTML = 4;
  const PDF = 5;
  const CALL = 6;
  const STICKER = 7;
  const PRESENCE = 8;
  const GIFT = 9;
  const GROUPBOARD = 10;
  const APPLINK = 11;
  const LINK = 12;
  const CONTACT = 13;
  const FILE = 14;
  const LOCATION = 15;
  const POSTNOTIFICATION = 16;
  const RICH = 17;
  const CHATEVENT = 18;
  const MUSIC = 19;
  const PAYMENT = 20;
  const EXTIMAGE = 21;
  static public $__names = array(
    0 => 'NONE',
    1 => 'IMAGE',
    2 => 'VIDEO',
    3 => 'AUDIO',
    4 => 'HTML',
    5 => 'PDF',
    6 => 'CALL',
    7 => 'STICKER',
    8 => 'PRESENCE',
    9 => 'GIFT',
    10 => 'GROUPBOARD',
    11 => 'APPLINK',
    12 => 'LINK',
    13 => 'CONTACT',
    14 => 'FILE',
    15 => 'LOCATION',
    16 => 'POSTNOTIFICATION',
    17 => 'RICH',
    18 => 'CHATEVENT',
    19 => 'MUSIC',
    20 => 'PAYMENT',
    21 => 'EXTIMAGE',
  );
}

final class FriendRequestStatus {
  const NONE = 0;
  const AVAILABLE = 1;
  const ALREADY_REQUESTED = 2;
  const UNAVAILABLE = 3;
  static public $__names = array(
    0 => 'NONE',
    1 => 'AVAILABLE',
    2 => 'ALREADY_REQUESTED',
    3 => 'UNAVAILABLE',
  );
}

final class MessageRelationType {
  const FORWARD = 0;
  const AUTO_REPLY = 1;
  const SUBORDINATE = 2;
  static public $__names = array(
    0 => 'FORWARD',
    1 => 'AUTO_REPLY',
    2 => 'SUBORDINATE',
  );
}

final class CustomMode {
  const PROMOTION_FRIENDS_INVITE = 1;
  const CAPABILITY_SERVER_SIDE_SMS = 2;
  const LINE_CLIENT_ANALYTICS_CONFIGURATION = 3;
  static public $__names = array(
    1 => 'PROMOTION_FRIENDS_INVITE',
    2 => 'CAPABILITY_SERVER_SIDE_SMS',
    3 => 'LINE_CLIENT_ANALYTICS_CONFIGURATION',
  );
}

final class EmailConfirmationStatus {
  const NOT_SPECIFIED = 0;
  const NOT_YET = 1;
  const DONE = 3;
  const NEED_ENFORCED_INPUT = 4;
  static public $__names = array(
    0 => 'NOT_SPECIFIED',
    1 => 'NOT_YET',
    3 => 'DONE',
    4 => 'NEED_ENFORCED_INPUT',
  );
}

final class AccountMigrationPincodeType {
  const NOT_APPLICABLE = 0;
  const NOT_SET = 1;
  const SET = 2;
  const NEED_ENFORCED_INPUT = 3;
  static public $__names = array(
    0 => 'NOT_APPLICABLE',
    1 => 'NOT_SET',
    2 => 'SET',
    3 => 'NEED_ENFORCED_INPUT',
  );
}

final class AccountMigrationCheckType {
  const SKIP = 0;
  const PINCODE = 1;
  const SECURITY_CENTER = 2;
  static public $__names = array(
    0 => 'SKIP',
    1 => 'PINCODE',
    2 => 'SECURITY_CENTER',
  );
}

final class SecurityCenterSettingsType {
  const NOT_APPLICABLE = 0;
  const NOT_SET = 1;
  const SET = 2;
  const NEED_ENFORCED_INPUT = 3;
  static public $__names = array(
    0 => 'NOT_APPLICABLE',
    1 => 'NOT_SET',
    2 => 'SET',
    3 => 'NEED_ENFORCED_INPUT',
  );
}

final class EmailConfirmationType {
  const SERVER_SIDE_EMAIL = 0;
  const CLIENT_SIDE_EMAIL = 1;
  static public $__names = array(
    0 => 'SERVER_SIDE_EMAIL',
    1 => 'CLIENT_SIDE_EMAIL',
  );
}

final class ErrorCode {
  const ILLEGAL_ARGUMENT = 0;
  const AUTHENTICATION_FAILED = 1;
  const DB_FAILED = 2;
  const INVALID_STATE = 3;
  const EXCESSIVE_ACCESS = 4;
  const NOT_FOUND = 5;
  const INVALID_MID = 9;
  const NOT_A_MEMBER = 10;
  const INVALID_LENGTH = 6;
  const NOT_AVAILABLE_USER = 7;
  const NOT_AUTHORIZED_DEVICE = 8;
  const NOT_AUTHORIZED_SESSION = 14;
  const INCOMPATIBLE_APP_VERSION = 11;
  const NOT_READY = 12;
  const NOT_AVAILABLE_SESSION = 13;
  const SYSTEM_ERROR = 15;
  const NO_AVAILABLE_VERIFICATION_METHOD = 16;
  const NOT_AUTHENTICATED = 17;
  const INVALID_IDENTITY_CREDENTIAL = 18;
  const NOT_AVAILABLE_IDENTITY_IDENTIFIER = 19;
  const INTERNAL_ERROR = 20;
  const NO_SUCH_IDENTITY_IDENFIER = 21;
  const DEACTIVATED_ACCOUNT_BOUND_TO_THIS_IDENTITY = 22;
  const ILLEGAL_IDENTITY_CREDENTIAL = 23;
  const UNKNOWN_CHANNEL = 24;
  const NO_SUCH_MESSAGE_BOX = 25;
  const NOT_AVAILABLE_MESSAGE_BOX = 26;
  const CHANNEL_DOES_NOT_MATCH = 27;
  const NOT_YOUR_MESSAGE = 28;
  const MESSAGE_DEFINED_ERROR = 29;
  const USER_CANNOT_ACCEPT_PRESENTS = 30;
  const USER_NOT_STICKER_OWNER = 32;
  const MAINTENANCE_ERROR = 33;
  const ACCOUNT_NOT_MATCHED = 34;
  const ABUSE_BLOCK = 35;
  const NOT_FRIEND = 36;
  const NOT_ALLOWED_CALL = 37;
  const BLOCK_FRIEND = 38;
  const INCOMPATIBLE_VOIP_VERSION = 39;
  const INVALID_SNS_ACCESS_TOKEN = 40;
  const EXTERNAL_SERVICE_NOT_AVAILABLE = 41;
  const NOT_ALLOWED_ADD_CONTACT = 42;
  const NOT_CERTIFICATED = 43;
  const NOT_ALLOWED_SECONDARY_DEVICE = 44;
  const INVALID_PIN_CODE = 45;
  const NOT_FOUND_IDENTITY_CREDENTIAL = 46;
  const EXCEED_FILE_MAX_SIZE = 47;
  const EXCEED_DAILY_QUOTA = 48;
  const NOT_SUPPORT_SEND_FILE = 49;
  const MUST_UPGRADE = 50;
  const NOT_AVAILABLE_PIN_CODE_SESSION = 51;
  const EXPIRED_REVISION = 52;
  const NOT_YET_PHONE_NUMBER = 54;
  const BAD_CALL_NUMBER = 55;
  const UNAVAILABLE_CALL_NUMBER = 56;
  const NOT_SUPPORT_CALL_SERVICE = 57;
  const CONGESTION_CONTROL = 58;
  const NO_BALANCE = 59;
  const NOT_PERMITTED_CALLER_ID = 60;
  const NO_CALLER_ID_LIMIT_EXCEEDED = 61;
  const CALLER_ID_VERIFICATION_REQUIRED = 62;
  const NO_CALLER_ID_LIMIT_EXCEEDED_AND_VERIFICATION_REQUIRED = 63;
  const MESSAGE_NOT_FOUND = 64;
  const INVALID_ACCOUNT_MIGRATION_PINCODE_FORMAT = 65;
  const ACCOUNT_MIGRATION_PINCODE_NOT_MATCHED = 66;
  const ACCOUNT_MIGRATION_PINCODE_BLOCKED = 67;
  const INVALID_PASSWORD_FORMAT = 69;
  const FEATURE_RESTRICTED = 70;
  const MESSAGE_NOT_DESTRUCTIBLE = 71;
  const PAID_CALL_REDEEM_FAILED = 72;
  const PREVENTED_JOIN_BY_TICKET = 73;
  const SEND_MESSAGE_NOT_PERMITTED_FROM_LINE_AT = 75;
  const SEND_MESSAGE_NOT_PERMITTED_WHILE_AUTO_REPLY = 76;
  const SECURITY_CENTER_NOT_VERIFIED = 77;
  const SECURITY_CENTER_BLOCKED_BY_SETTING = 78;
  const SECURITY_CENTER_BLOCKED = 79;
  const TALK_PROXY_EXCEPTION = 80;
  const E2EE_INVALID_PROTOCOL = 81;
  const E2EE_RETRY_ENCRYPT = 82;
  const E2EE_UPDATE_SENDER_KEY = 83;
  const E2EE_UPDATE_RECEIVER_KEY = 84;
  const E2EE_INVALID_ARGUMENT = 85;
  const E2EE_INVALID_VERSION = 86;
  const E2EE_SENDER_DISABLED = 87;
  const E2EE_RECEIVER_DISABLED = 88;
  const E2EE_SENDER_NOT_ALLOWED = 89;
  const E2EE_RECEIVER_NOT_ALLOWED = 90;
  const E2EE_RESEND_FAIL = 91;
  const E2EE_RESEND_OK = 92;
  const HITOKOTO_BACKUP_NO_AVAILABLE_DATA = 93;
  const E2EE_UPDATE_PRIMARY_DEVICE = 94;
  const SUCCESS = 95;
  const CANCEL = 96;
  const E2EE_PRIMARY_NOT_SUPPORT = 97;
  const E2EE_RETRY_PLAIN = 98;
  const E2EE_RECREATE_GROUP_KEY = 99;
  const E2EE_GROUP_TOO_MANY_MEMBERS = 100;
  const SERVER_BUSY = 101;
  const NOT_ALLOWED_ADD_FOLLOW = 102;
  const INCOMING_FRIEND_REQUEST_LIMIT = 103;
  const OUTGOING_FRIEND_REQUEST_LIMIT = 104;
  const OUTGOING_FRIEND_REQUEST_QUOTA = 105;
  const DUPLICATED = 106;
  const BANNED = 107;
  static public $__names = array(
    0 => 'ILLEGAL_ARGUMENT',
    1 => 'AUTHENTICATION_FAILED',
    2 => 'DB_FAILED',
    3 => 'INVALID_STATE',
    4 => 'EXCESSIVE_ACCESS',
    5 => 'NOT_FOUND',
    9 => 'INVALID_MID',
    10 => 'NOT_A_MEMBER',
    6 => 'INVALID_LENGTH',
    7 => 'NOT_AVAILABLE_USER',
    8 => 'NOT_AUTHORIZED_DEVICE',
    14 => 'NOT_AUTHORIZED_SESSION',
    11 => 'INCOMPATIBLE_APP_VERSION',
    12 => 'NOT_READY',
    13 => 'NOT_AVAILABLE_SESSION',
    15 => 'SYSTEM_ERROR',
    16 => 'NO_AVAILABLE_VERIFICATION_METHOD',
    17 => 'NOT_AUTHENTICATED',
    18 => 'INVALID_IDENTITY_CREDENTIAL',
    19 => 'NOT_AVAILABLE_IDENTITY_IDENTIFIER',
    20 => 'INTERNAL_ERROR',
    21 => 'NO_SUCH_IDENTITY_IDENFIER',
    22 => 'DEACTIVATED_ACCOUNT_BOUND_TO_THIS_IDENTITY',
    23 => 'ILLEGAL_IDENTITY_CREDENTIAL',
    24 => 'UNKNOWN_CHANNEL',
    25 => 'NO_SUCH_MESSAGE_BOX',
    26 => 'NOT_AVAILABLE_MESSAGE_BOX',
    27 => 'CHANNEL_DOES_NOT_MATCH',
    28 => 'NOT_YOUR_MESSAGE',
    29 => 'MESSAGE_DEFINED_ERROR',
    30 => 'USER_CANNOT_ACCEPT_PRESENTS',
    32 => 'USER_NOT_STICKER_OWNER',
    33 => 'MAINTENANCE_ERROR',
    34 => 'ACCOUNT_NOT_MATCHED',
    35 => 'ABUSE_BLOCK',
    36 => 'NOT_FRIEND',
    37 => 'NOT_ALLOWED_CALL',
    38 => 'BLOCK_FRIEND',
    39 => 'INCOMPATIBLE_VOIP_VERSION',
    40 => 'INVALID_SNS_ACCESS_TOKEN',
    41 => 'EXTERNAL_SERVICE_NOT_AVAILABLE',
    42 => 'NOT_ALLOWED_ADD_CONTACT',
    43 => 'NOT_CERTIFICATED',
    44 => 'NOT_ALLOWED_SECONDARY_DEVICE',
    45 => 'INVALID_PIN_CODE',
    46 => 'NOT_FOUND_IDENTITY_CREDENTIAL',
    47 => 'EXCEED_FILE_MAX_SIZE',
    48 => 'EXCEED_DAILY_QUOTA',
    49 => 'NOT_SUPPORT_SEND_FILE',
    50 => 'MUST_UPGRADE',
    51 => 'NOT_AVAILABLE_PIN_CODE_SESSION',
    52 => 'EXPIRED_REVISION',
    54 => 'NOT_YET_PHONE_NUMBER',
    55 => 'BAD_CALL_NUMBER',
    56 => 'UNAVAILABLE_CALL_NUMBER',
    57 => 'NOT_SUPPORT_CALL_SERVICE',
    58 => 'CONGESTION_CONTROL',
    59 => 'NO_BALANCE',
    60 => 'NOT_PERMITTED_CALLER_ID',
    61 => 'NO_CALLER_ID_LIMIT_EXCEEDED',
    62 => 'CALLER_ID_VERIFICATION_REQUIRED',
    63 => 'NO_CALLER_ID_LIMIT_EXCEEDED_AND_VERIFICATION_REQUIRED',
    64 => 'MESSAGE_NOT_FOUND',
    65 => 'INVALID_ACCOUNT_MIGRATION_PINCODE_FORMAT',
    66 => 'ACCOUNT_MIGRATION_PINCODE_NOT_MATCHED',
    67 => 'ACCOUNT_MIGRATION_PINCODE_BLOCKED',
    69 => 'INVALID_PASSWORD_FORMAT',
    70 => 'FEATURE_RESTRICTED',
    71 => 'MESSAGE_NOT_DESTRUCTIBLE',
    72 => 'PAID_CALL_REDEEM_FAILED',
    73 => 'PREVENTED_JOIN_BY_TICKET',
    75 => 'SEND_MESSAGE_NOT_PERMITTED_FROM_LINE_AT',
    76 => 'SEND_MESSAGE_NOT_PERMITTED_WHILE_AUTO_REPLY',
    77 => 'SECURITY_CENTER_NOT_VERIFIED',
    78 => 'SECURITY_CENTER_BLOCKED_BY_SETTING',
    79 => 'SECURITY_CENTER_BLOCKED',
    80 => 'TALK_PROXY_EXCEPTION',
    81 => 'E2EE_INVALID_PROTOCOL',
    82 => 'E2EE_RETRY_ENCRYPT',
    83 => 'E2EE_UPDATE_SENDER_KEY',
    84 => 'E2EE_UPDATE_RECEIVER_KEY',
    85 => 'E2EE_INVALID_ARGUMENT',
    86 => 'E2EE_INVALID_VERSION',
    87 => 'E2EE_SENDER_DISABLED',
    88 => 'E2EE_RECEIVER_DISABLED',
    89 => 'E2EE_SENDER_NOT_ALLOWED',
    90 => 'E2EE_RECEIVER_NOT_ALLOWED',
    91 => 'E2EE_RESEND_FAIL',
    92 => 'E2EE_RESEND_OK',
    93 => 'HITOKOTO_BACKUP_NO_AVAILABLE_DATA',
    94 => 'E2EE_UPDATE_PRIMARY_DEVICE',
    95 => 'SUCCESS',
    96 => 'CANCEL',
    97 => 'E2EE_PRIMARY_NOT_SUPPORT',
    98 => 'E2EE_RETRY_PLAIN',
    99 => 'E2EE_RECREATE_GROUP_KEY',
    100 => 'E2EE_GROUP_TOO_MANY_MEMBERS',
    101 => 'SERVER_BUSY',
    102 => 'NOT_ALLOWED_ADD_FOLLOW',
    103 => 'INCOMING_FRIEND_REQUEST_LIMIT',
    104 => 'OUTGOING_FRIEND_REQUEST_LIMIT',
    105 => 'OUTGOING_FRIEND_REQUEST_QUOTA',
    106 => 'DUPLICATED',
    107 => 'BANNED',
  );
}

final class FeatureType {
  const OBS_VIDEO = 1;
  const OBS_GENERAL = 2;
  static public $__names = array(
    1 => 'OBS_VIDEO',
    2 => 'OBS_GENERAL',
  );
}

final class GroupAttribute {
  const NAME = 1;
  const PICTURE_STATUS = 2;
  const ALL = 255;
  const PREVENTED_JOIN_BY_TICKET = 4;
  const NOTIFICATION_SETTING = 8;
  static public $__names = array(
    1 => 'NAME',
    2 => 'PICTURE_STATUS',
    255 => 'ALL',
    4 => 'PREVENTED_JOIN_BY_TICKET',
    8 => 'NOTIFICATION_SETTING',
  );
}

final class IdentityProvider {
  const UNKNOWN = 0;
  const LINE = 1;
  const NAVER_KR = 2;
  const LINE_PHONE = 3;
  static public $__names = array(
    0 => 'UNKNOWN',
    1 => 'LINE',
    2 => 'NAVER_KR',
    3 => 'LINE_PHONE',
  );
}

final class LoginResultType {
  const SUCCESS = 1;
  const REQUIRE_QRCODE = 2;
  const REQUIRE_DEVICE_CONFIRM = 3;
  const REQUIRE_SMS_CONFIRM = 4;
  static public $__names = array(
    1 => 'SUCCESS',
    2 => 'REQUIRE_QRCODE',
    3 => 'REQUIRE_DEVICE_CONFIRM',
    4 => 'REQUIRE_SMS_CONFIRM',
  );
}

final class MessageOperationType {
  const SEND_MESSAGE = 1;
  const RECEIVE_MESSAGE = 2;
  const READ_MESSAGE = 3;
  const NOTIFIED_READ_MESSAGE = 4;
  const NOTIFIED_JOIN_CHAT = 5;
  const FAILED_SEND_MESSAGE = 6;
  const SEND_CONTENT = 7;
  const SEND_CONTENT_RECEIPT = 8;
  const SEND_CHAT_REMOVED = 9;
  const REMOVE_ALL_MESSAGES = 10;
  static public $__names = array(
    1 => 'SEND_MESSAGE',
    2 => 'RECEIVE_MESSAGE',
    3 => 'READ_MESSAGE',
    4 => 'NOTIFIED_READ_MESSAGE',
    5 => 'NOTIFIED_JOIN_CHAT',
    6 => 'FAILED_SEND_MESSAGE',
    7 => 'SEND_CONTENT',
    8 => 'SEND_CONTENT_RECEIPT',
    9 => 'SEND_CHAT_REMOVED',
    10 => 'REMOVE_ALL_MESSAGES',
  );
}

final class MIDType {
  const USER = 0;
  const ROOM = 1;
  const GROUP = 2;
  const SQUARE = 3;
  const SQUARE_CHAT = 4;
  const SQUARE_MEMBER = 5;
  const BOT = 6;
  static public $__names = array(
    0 => 'USER',
    1 => 'ROOM',
    2 => 'GROUP',
    3 => 'SQUARE',
    4 => 'SQUARE_CHAT',
    5 => 'SQUARE_MEMBER',
    6 => 'BOT',
  );
}

final class ServiceCode {
  const UNKNOWN = 0;
  const TALK = 1;
  const SQUARE = 2;
  static public $__names = array(
    0 => 'UNKNOWN',
    1 => 'TALK',
    2 => 'SQUARE',
  );
}

final class ModificationType {
  const ADD = 0;
  const REMOVE = 1;
  const MODIFY = 2;
  static public $__names = array(
    0 => 'ADD',
    1 => 'REMOVE',
    2 => 'MODIFY',
  );
}

final class NotificationItemFetchMode {
  const ALL = 0;
  const APPEND = 1;
  static public $__names = array(
    0 => 'ALL',
    1 => 'APPEND',
  );
}

final class NotificationQueueType {
  const GLOBAL = 1;
  const MESSAGE = 2;
  const PRIMARY = 3;
  static public $__names = array(
    1 => 'GLOBAL',
    2 => 'MESSAGE',
    3 => 'PRIMARY',
  );
}

final class NotificationStatus {
  const NOTIFICATION_ITEM_EXIST = 1;
  const TIMELINE_ITEM_EXIST = 2;
  const NOTE_GROUP_NEW_ITEM_EXIST = 4;
  const TIMELINE_BUDDYGROUP_CHANGED = 8;
  const NOTE_ONE_TO_ONE_NEW_ITEM_EXIST = 16;
  const ALBUM_ITEM_EXIST = 32;
  const TIMELINE_ITEM_DELETED = 64;
  const OTOGROUP_ITEM_EXIST = 128;
  const GROUPHOME_NEW_ITEM_EXIST = 256;
  const GROUPHOME_HIDDEN_ITEM_CHANGED = 512;
  const NOTIFICATION_ITEM_CHANGED = 1024;
  const BEAD_ITEM_HIDE = 2048;
  const BEAD_ITEM_SHOW = 4096;
  static public $__names = array(
    1 => 'NOTIFICATION_ITEM_EXIST',
    2 => 'TIMELINE_ITEM_EXIST',
    4 => 'NOTE_GROUP_NEW_ITEM_EXIST',
    8 => 'TIMELINE_BUDDYGROUP_CHANGED',
    16 => 'NOTE_ONE_TO_ONE_NEW_ITEM_EXIST',
    32 => 'ALBUM_ITEM_EXIST',
    64 => 'TIMELINE_ITEM_DELETED',
    128 => 'OTOGROUP_ITEM_EXIST',
    256 => 'GROUPHOME_NEW_ITEM_EXIST',
    512 => 'GROUPHOME_HIDDEN_ITEM_CHANGED',
    1024 => 'NOTIFICATION_ITEM_CHANGED',
    2048 => 'BEAD_ITEM_HIDE',
    4096 => 'BEAD_ITEM_SHOW',
  );
}

final class NotificationType {
  const APPLE_APNS = 1;
  const GOOGLE_C2DM = 2;
  const NHN_NNI = 3;
  const SKT_AOM = 4;
  const MS_MPNS = 5;
  const RIM_BIS = 6;
  const GOOGLE_GCM = 7;
  const NOKIA_NNAPI = 8;
  const TIZEN = 9;
  const LINE_BOT = 17;
  const LINE_WAP = 18;
  const APPLE_APNS_VOIP = 19;
  const MS_WNS = 20;
  const GOOGLE_FCM = 21;
  static public $__names = array(
    1 => 'APPLE_APNS',
    2 => 'GOOGLE_C2DM',
    3 => 'NHN_NNI',
    4 => 'SKT_AOM',
    5 => 'MS_MPNS',
    6 => 'RIM_BIS',
    7 => 'GOOGLE_GCM',
    8 => 'NOKIA_NNAPI',
    9 => 'TIZEN',
    17 => 'LINE_BOT',
    18 => 'LINE_WAP',
    19 => 'APPLE_APNS_VOIP',
    20 => 'MS_WNS',
    21 => 'GOOGLE_FCM',
  );
}

final class OpStatus {
  const NORMAL = 0;
  const ALERT_DISABLED = 1;
  const ALWAYS = 2;
  static public $__names = array(
    0 => 'NORMAL',
    1 => 'ALERT_DISABLED',
    2 => 'ALWAYS',
  );
}

final class OpType {
  const END_OF_OPERATION = 0;
  const UPDATE_PROFILE = 1;
  const UPDATE_SETTINGS = 36;
  const NOTIFIED_UPDATE_PROFILE = 2;
  const REGISTER_USERID = 3;
  const ADD_CONTACT = 4;
  const NOTIFIED_ADD_CONTACT = 5;
  const BLOCK_CONTACT = 6;
  const UNBLOCK_CONTACT = 7;
  const NOTIFIED_RECOMMEND_CONTACT = 8;
  const CREATE_GROUP = 9;
  const UPDATE_GROUP = 10;
  const NOTIFIED_UPDATE_GROUP = 11;
  const INVITE_INTO_GROUP = 12;
  const NOTIFIED_INVITE_INTO_GROUP = 13;
  const CANCEL_INVITATION_GROUP = 31;
  const NOTIFIED_CANCEL_INVITATION_GROUP = 32;
  const LEAVE_GROUP = 14;
  const NOTIFIED_LEAVE_GROUP = 15;
  const ACCEPT_GROUP_INVITATION = 16;
  const NOTIFIED_ACCEPT_GROUP_INVITATION = 17;
  const REJECT_GROUP_INVITATION = 34;
  const NOTIFIED_REJECT_GROUP_INVITATION = 35;
  const KICKOUT_FROM_GROUP = 18;
  const NOTIFIED_KICKOUT_FROM_GROUP = 19;
  const CREATE_ROOM = 20;
  const INVITE_INTO_ROOM = 21;
  const NOTIFIED_INVITE_INTO_ROOM = 22;
  const LEAVE_ROOM = 23;
  const NOTIFIED_LEAVE_ROOM = 24;
  const SEND_MESSAGE = 25;
  const RECEIVE_MESSAGE = 26;
  const SEND_MESSAGE_RECEIPT = 27;
  const RECEIVE_MESSAGE_RECEIPT = 28;
  const SEND_CONTENT_RECEIPT = 29;
  const SEND_CHAT_CHECKED = 40;
  const SEND_CHAT_REMOVED = 41;
  const RECEIVE_ANNOUNCEMENT = 30;
  const INVITE_VIA_EMAIL = 38;
  const NOTIFIED_REGISTER_USER = 37;
  const NOTIFIED_UNREGISTER_USER = 33;
  const NOTIFIED_REQUEST_RECOVERY = 39;
  const NOTIFIED_FORCE_SYNC = 42;
  const SEND_CONTENT = 43;
  const SEND_MESSAGE_MYHOME = 44;
  const NOTIFIED_UPDATE_CONTENT_PREVIEW = 45;
  const REMOVE_ALL_MESSAGES = 46;
  const NOTIFIED_UPDATE_PURCHASES = 47;
  const DUMMY = 48;
  const UPDATE_CONTACT = 49;
  const NOTIFIED_RECEIVED_CALL = 50;
  const CANCEL_CALL = 51;
  const NOTIFIED_REDIRECT = 52;
  const NOTIFIED_CHANNEL_SYNC = 53;
  const FAILED_SEND_MESSAGE = 54;
  const NOTIFIED_READ_MESSAGE = 55;
  const FAILED_EMAIL_CONFIRMATION = 56;
  const NOTIFIED_PUSH_NOTICENTER_ITEM = 59;
  const NOTIFIED_CHAT_CONTENT = 58;
  const NOTIFIED_JOIN_CHAT = 60;
  const NOTIFIED_LEAVE_CHAT = 61;
  const NOTIFIED_TYPING = 62;
  const FRIEND_REQUEST_ACCEPTED = 63;
  const DESTROY_MESSAGE = 64;
  const NOTIFIED_DESTROY_MESSAGE = 65;
  const UPDATE_PUBLICKEYCHAIN = 66;
  const NOTIFIED_UPDATE_PUBLICKEYCHAIN = 67;
  const NOTIFIED_BLOCK_CONTACT = 68;
  const NOTIFIED_UNBLOCK_CONTACT = 69;
  const UPDATE_GROUPPREFERENCE = 70;
  const NOTIFIED_PAYMENT_EVENT = 71;
  const REGISTER_E2EE_PUBLICKEY = 72;
  const NOTIFIED_E2EE_KEY_EXCHANGE_REQ = 73;
  const NOTIFIED_E2EE_KEY_EXCHANGE_RESP = 74;
  const NOTIFIED_E2EE_MESSAGE_RESEND_REQ = 75;
  const NOTIFIED_E2EE_MESSAGE_RESEND_RESP = 76;
  const NOTIFIED_E2EE_KEY_UPDATE = 77;
  const NOTIFIED_BUDDY_UPDATE_PROFILE = 78;
  const NOTIFIED_UPDATE_LINEAT_TABS = 79;
  const UPDATE_ROOM = 80;
  const NOTIFIED_BEACON_DETECTED = 81;
  const UPDATE_EXTENDED_PROFILE = 82;
  const ADD_FOLLOW = 83;
  const NOTIFIED_ADD_FOLLOW = 84;
  const DELETE_FOLLOW = 85;
  const NOTIFIED_DELETE_FOLLOW = 86;
  const UPDATE_TIMELINE_SETTINGS = 87;
  const NOTIFIED_FRIEND_REQUEST = 88;
  const UPDATE_RINGBACK_TONE = 89;
  const NOTIFIED_POSTBACK = 90;
  const RECEIVE_READ_WATERMARK = 91;
  const NOTIFIED_MESSAGE_DELIVERED = 92;
  const NOTIFIED_UPDATE_CHAT_BAR = 93;
  const NOTIFIED_CHATAPP_INSTALLED = 94;
  const NOTIFIED_CHATAPP_UPDATED = 95;
  const NOTIFIED_CHATAPP_NEW_MARK = 96;
  const NOTIFIED_CHATAPP_DELETED = 97;
  const NOTIFIED_CHATAPP_SYNC = 98;
  const NOTIFIED_UPDATE_MESSAGE = 99;
  static public $__names = array(
    0 => 'END_OF_OPERATION',
    1 => 'UPDATE_PROFILE',
    36 => 'UPDATE_SETTINGS',
    2 => 'NOTIFIED_UPDATE_PROFILE',
    3 => 'REGISTER_USERID',
    4 => 'ADD_CONTACT',
    5 => 'NOTIFIED_ADD_CONTACT',
    6 => 'BLOCK_CONTACT',
    7 => 'UNBLOCK_CONTACT',
    8 => 'NOTIFIED_RECOMMEND_CONTACT',
    9 => 'CREATE_GROUP',
    10 => 'UPDATE_GROUP',
    11 => 'NOTIFIED_UPDATE_GROUP',
    12 => 'INVITE_INTO_GROUP',
    13 => 'NOTIFIED_INVITE_INTO_GROUP',
    31 => 'CANCEL_INVITATION_GROUP',
    32 => 'NOTIFIED_CANCEL_INVITATION_GROUP',
    14 => 'LEAVE_GROUP',
    15 => 'NOTIFIED_LEAVE_GROUP',
    16 => 'ACCEPT_GROUP_INVITATION',
    17 => 'NOTIFIED_ACCEPT_GROUP_INVITATION',
    34 => 'REJECT_GROUP_INVITATION',
    35 => 'NOTIFIED_REJECT_GROUP_INVITATION',
    18 => 'KICKOUT_FROM_GROUP',
    19 => 'NOTIFIED_KICKOUT_FROM_GROUP',
    20 => 'CREATE_ROOM',
    21 => 'INVITE_INTO_ROOM',
    22 => 'NOTIFIED_INVITE_INTO_ROOM',
    23 => 'LEAVE_ROOM',
    24 => 'NOTIFIED_LEAVE_ROOM',
    25 => 'SEND_MESSAGE',
    26 => 'RECEIVE_MESSAGE',
    27 => 'SEND_MESSAGE_RECEIPT',
    28 => 'RECEIVE_MESSAGE_RECEIPT',
    29 => 'SEND_CONTENT_RECEIPT',
    40 => 'SEND_CHAT_CHECKED',
    41 => 'SEND_CHAT_REMOVED',
    30 => 'RECEIVE_ANNOUNCEMENT',
    38 => 'INVITE_VIA_EMAIL',
    37 => 'NOTIFIED_REGISTER_USER',
    33 => 'NOTIFIED_UNREGISTER_USER',
    39 => 'NOTIFIED_REQUEST_RECOVERY',
    42 => 'NOTIFIED_FORCE_SYNC',
    43 => 'SEND_CONTENT',
    44 => 'SEND_MESSAGE_MYHOME',
    45 => 'NOTIFIED_UPDATE_CONTENT_PREVIEW',
    46 => 'REMOVE_ALL_MESSAGES',
    47 => 'NOTIFIED_UPDATE_PURCHASES',
    48 => 'DUMMY',
    49 => 'UPDATE_CONTACT',
    50 => 'NOTIFIED_RECEIVED_CALL',
    51 => 'CANCEL_CALL',
    52 => 'NOTIFIED_REDIRECT',
    53 => 'NOTIFIED_CHANNEL_SYNC',
    54 => 'FAILED_SEND_MESSAGE',
    55 => 'NOTIFIED_READ_MESSAGE',
    56 => 'FAILED_EMAIL_CONFIRMATION',
    59 => 'NOTIFIED_PUSH_NOTICENTER_ITEM',
    58 => 'NOTIFIED_CHAT_CONTENT',
    60 => 'NOTIFIED_JOIN_CHAT',
    61 => 'NOTIFIED_LEAVE_CHAT',
    62 => 'NOTIFIED_TYPING',
    63 => 'FRIEND_REQUEST_ACCEPTED',
    64 => 'DESTROY_MESSAGE',
    65 => 'NOTIFIED_DESTROY_MESSAGE',
    66 => 'UPDATE_PUBLICKEYCHAIN',
    67 => 'NOTIFIED_UPDATE_PUBLICKEYCHAIN',
    68 => 'NOTIFIED_BLOCK_CONTACT',
    69 => 'NOTIFIED_UNBLOCK_CONTACT',
    70 => 'UPDATE_GROUPPREFERENCE',
    71 => 'NOTIFIED_PAYMENT_EVENT',
    72 => 'REGISTER_E2EE_PUBLICKEY',
    73 => 'NOTIFIED_E2EE_KEY_EXCHANGE_REQ',
    74 => 'NOTIFIED_E2EE_KEY_EXCHANGE_RESP',
    75 => 'NOTIFIED_E2EE_MESSAGE_RESEND_REQ',
    76 => 'NOTIFIED_E2EE_MESSAGE_RESEND_RESP',
    77 => 'NOTIFIED_E2EE_KEY_UPDATE',
    78 => 'NOTIFIED_BUDDY_UPDATE_PROFILE',
    79 => 'NOTIFIED_UPDATE_LINEAT_TABS',
    80 => 'UPDATE_ROOM',
    81 => 'NOTIFIED_BEACON_DETECTED',
    82 => 'UPDATE_EXTENDED_PROFILE',
    83 => 'ADD_FOLLOW',
    84 => 'NOTIFIED_ADD_FOLLOW',
    85 => 'DELETE_FOLLOW',
    86 => 'NOTIFIED_DELETE_FOLLOW',
    87 => 'UPDATE_TIMELINE_SETTINGS',
    88 => 'NOTIFIED_FRIEND_REQUEST',
    89 => 'UPDATE_RINGBACK_TONE',
    90 => 'NOTIFIED_POSTBACK',
    91 => 'RECEIVE_READ_WATERMARK',
    92 => 'NOTIFIED_MESSAGE_DELIVERED',
    93 => 'NOTIFIED_UPDATE_CHAT_BAR',
    94 => 'NOTIFIED_CHATAPP_INSTALLED',
    95 => 'NOTIFIED_CHATAPP_UPDATED',
    96 => 'NOTIFIED_CHATAPP_NEW_MARK',
    97 => 'NOTIFIED_CHATAPP_DELETED',
    98 => 'NOTIFIED_CHATAPP_SYNC',
    99 => 'NOTIFIED_UPDATE_MESSAGE',
  );
}

final class PayloadType {
  const PAYLOAD_BUY = 101;
  const PAYLOAD_CS = 111;
  const PAYLOAD_BONUS = 121;
  const PAYLOAD_EVENT = 131;
  static public $__names = array(
    101 => 'PAYLOAD_BUY',
    111 => 'PAYLOAD_CS',
    121 => 'PAYLOAD_BONUS',
    131 => 'PAYLOAD_EVENT',
  );
}

final class PaymentPgType {
  const PAYMENT_PG_NONE = 0;
  const PAYMENT_PG_AU = 1;
  const PAYMENT_PG_AL = 2;
  static public $__names = array(
    0 => 'PAYMENT_PG_NONE',
    1 => 'PAYMENT_PG_AU',
    2 => 'PAYMENT_PG_AL',
  );
}

final class PaymentType {
  const PAYMENT_APPLE = 1;
  const PAYMENT_GOOGLE = 2;
  static public $__names = array(
    1 => 'PAYMENT_APPLE',
    2 => 'PAYMENT_GOOGLE',
  );
}

final class ProductBannerLinkType {
  const BANNER_LINK_NONE = 0;
  const BANNER_LINK_ITEM = 1;
  const BANNER_LINK_URL = 2;
  const BANNER_LINK_CATEGORY = 3;
  static public $__names = array(
    0 => 'BANNER_LINK_NONE',
    1 => 'BANNER_LINK_ITEM',
    2 => 'BANNER_LINK_URL',
    3 => 'BANNER_LINK_CATEGORY',
  );
}

final class ProductEventType {
  const NO_EVENT = 0;
  const CARRIER_ANY = 65537;
  const BUDDY_ANY = 131073;
  const INSTALL_IOS = 196609;
  const INSTALL_ANDROID = 196610;
  const MISSION_ANY = 262145;
  const MUSTBUY_ANY = 327681;
  static public $__names = array(
    0 => 'NO_EVENT',
    65537 => 'CARRIER_ANY',
    131073 => 'BUDDY_ANY',
    196609 => 'INSTALL_IOS',
    196610 => 'INSTALL_ANDROID',
    262145 => 'MISSION_ANY',
    327681 => 'MUSTBUY_ANY',
  );
}

final class StickerResourceType {
  const STATIC = 1;
  const ANIMATION = 2;
  const SOUND = 3;
  const ANIMATION_SOUND = 4;
  const POPUP = 5;
  const POPUP_SOUND = 6;
  static public $__names = array(
    1 => 'STATIC',
    2 => 'ANIMATION',
    3 => 'SOUND',
    4 => 'ANIMATION_SOUND',
    5 => 'POPUP',
    6 => 'POPUP_SOUND',
  );
}

final class ProfileAttribute {
  const ALL = 511;
  const EMAIL = 1;
  const DISPLAY_NAME = 2;
  const PHONETIC_NAME = 4;
  const PICTURE = 8;
  const STATUS_MESSAGE = 16;
  const ALLOW_SEARCH_BY_USERID = 32;
  const ALLOW_SEARCH_BY_EMAIL = 64;
  const BUDDY_STATUS = 128;
  const MUSIC_PROFILE = 256;
  static public $__names = array(
    511 => 'ALL',
    1 => 'EMAIL',
    2 => 'DISPLAY_NAME',
    4 => 'PHONETIC_NAME',
    8 => 'PICTURE',
    16 => 'STATUS_MESSAGE',
    32 => 'ALLOW_SEARCH_BY_USERID',
    64 => 'ALLOW_SEARCH_BY_EMAIL',
    128 => 'BUDDY_STATUS',
    256 => 'MUSIC_PROFILE',
  );
}

final class PublicType {
  const HIDDEN = 0;
  const PUBLIC = 1000;
  static public $__names = array(
    0 => 'HIDDEN',
    1000 => 'PUBLIC',
  );
}

final class RedirectType {
  const NONE = 0;
  const EXPIRE_SECOND = 1;
  static public $__names = array(
    0 => 'NONE',
    1 => 'EXPIRE_SECOND',
  );
}

final class RegistrationType {
  const PHONE = 0;
  const EMAIL_WAP = 1;
  const FACEBOOK = 2305;
  const SINA = 2306;
  const RENREN = 2307;
  const FEIXIN = 2308;
  static public $__names = array(
    0 => 'PHONE',
    1 => 'EMAIL_WAP',
    2305 => 'FACEBOOK',
    2306 => 'SINA',
    2307 => 'RENREN',
    2308 => 'FEIXIN',
  );
}

final class SettingsAttribute {
  const ALL = 2147483647;
  const NOTIFICATION_ENABLE = 1;
  const NOTIFICATION_MUTE_EXPIRATION = 2;
  const NOTIFICATION_NEW_MESSAGE = 4;
  const NOTIFICATION_GROUP_INVITATION = 8;
  const NOTIFICATION_SHOW_MESSAGE = 16;
  const NOTIFICATION_INCOMING_CALL = 32;
  const NOTIFICATION_SOUND_MESSAGE = 256;
  const NOTIFICATION_SOUND_GROUP = 512;
  const NOTIFICATION_DISABLED_WITH_SUB = 65536;
  const NOTIFICATION_PAYMENT = 131072;
  const PRIVACY_SYNC_CONTACTS = 64;
  const PRIVACY_SEARCH_BY_PHONE_NUMBER = 128;
  const PRIVACY_SEARCH_BY_USERID = 8192;
  const PRIVACY_SEARCH_BY_EMAIL = 16384;
  const PRIVACY_ALLOW_SECONDARY_DEVICE_LOGIN = 2097152;
  const PRIVACY_PROFILE_IMAGE_POST_TO_MYHOME = 8388608;
  const PRIVACY_ALLOW_FRIEND_REQUEST = 1073741824;
  const PRIVACY_RECV_MESSAGES_FROM_NOT_FRIEND = 33554432;
  const PRIVACY_AGREE_USE_LINECOIN_TO_PAIDCALL = 67108864;
  const PRIVACY_AGREE_USE_PAIDCALL = 134217728;
  const CONTACT_MY_TICKET = 1024;
  const IDENTITY_PROVIDER = 2048;
  const IDENTITY_IDENTIFIER = 4096;
  const SNS_ACCOUNT = 524288;
  const PHONE_REGISTRATION = 1048576;
  const PREFERENCE_LOCALE = 32768;
  const CUSTOM_MODE = 4194304;
  const EMAIL_CONFIRMATION_STATUS = 16777216;
  const ACCOUNT_MIGRATION_PINCODE = 268435456;
  const ENFORCED_INPUT_ACCOUNT_MIGRATION_PINCODE = 536870912;
  const SECURITY_CENTER_SETTINGS = 262144;
  static public $__names = array(
    2147483647 => 'ALL',
    1 => 'NOTIFICATION_ENABLE',
    2 => 'NOTIFICATION_MUTE_EXPIRATION',
    4 => 'NOTIFICATION_NEW_MESSAGE',
    8 => 'NOTIFICATION_GROUP_INVITATION',
    16 => 'NOTIFICATION_SHOW_MESSAGE',
    32 => 'NOTIFICATION_INCOMING_CALL',
    256 => 'NOTIFICATION_SOUND_MESSAGE',
    512 => 'NOTIFICATION_SOUND_GROUP',
    65536 => 'NOTIFICATION_DISABLED_WITH_SUB',
    131072 => 'NOTIFICATION_PAYMENT',
    64 => 'PRIVACY_SYNC_CONTACTS',
    128 => 'PRIVACY_SEARCH_BY_PHONE_NUMBER',
    8192 => 'PRIVACY_SEARCH_BY_USERID',
    16384 => 'PRIVACY_SEARCH_BY_EMAIL',
    2097152 => 'PRIVACY_ALLOW_SECONDARY_DEVICE_LOGIN',
    8388608 => 'PRIVACY_PROFILE_IMAGE_POST_TO_MYHOME',
    1073741824 => 'PRIVACY_ALLOW_FRIEND_REQUEST',
    33554432 => 'PRIVACY_RECV_MESSAGES_FROM_NOT_FRIEND',
    67108864 => 'PRIVACY_AGREE_USE_LINECOIN_TO_PAIDCALL',
    134217728 => 'PRIVACY_AGREE_USE_PAIDCALL',
    1024 => 'CONTACT_MY_TICKET',
    2048 => 'IDENTITY_PROVIDER',
    4096 => 'IDENTITY_IDENTIFIER',
    524288 => 'SNS_ACCOUNT',
    1048576 => 'PHONE_REGISTRATION',
    32768 => 'PREFERENCE_LOCALE',
    4194304 => 'CUSTOM_MODE',
    16777216 => 'EMAIL_CONFIRMATION_STATUS',
    268435456 => 'ACCOUNT_MIGRATION_PINCODE',
    536870912 => 'ENFORCED_INPUT_ACCOUNT_MIGRATION_PINCODE',
    262144 => 'SECURITY_CENTER_SETTINGS',
  );
}

final class SettingsAttributeEx {
  const NOTIFICATION_ENABLE = 0;
  const NOTIFICATION_MUTE_EXPIRATION = 1;
  const NOTIFICATION_NEW_MESSAGE = 2;
  const NOTIFICATION_GROUP_INVITATION = 3;
  const NOTIFICATION_SHOW_MESSAGE = 4;
  const NOTIFICATION_INCOMING_CALL = 5;
  const NOTIFICATION_SOUND_MESSAGE = 8;
  const NOTIFICATION_SOUND_GROUP = 9;
  const NOTIFICATION_DISABLED_WITH_SUB = 16;
  const NOTIFICATION_PAYMENT = 17;
  const NOTIFICATION_MENTION = 40;
  const NOTIFICATION_THUMBNAIL = 45;
  const PRIVACY_SYNC_CONTACTS = 6;
  const PRIVACY_SEARCH_BY_PHONE_NUMBER = 7;
  const PRIVACY_SEARCH_BY_USERID = 13;
  const PRIVACY_SEARCH_BY_EMAIL = 14;
  const PRIVACY_ALLOW_SECONDARY_DEVICE_LOGIN = 21;
  const PRIVACY_PROFILE_IMAGE_POST_TO_MYHOME = 23;
  const PRIVACY_PROFILE_MUSIC_POST_TO_MYHOME = 35;
  const PRIVACY_ALLOW_FRIEND_REQUEST = 30;
  const PRIVACY_RECV_MESSAGES_FROM_NOT_FRIEND = 25;
  const PRIVACY_AGREE_USE_LINECOIN_TO_PAIDCALL = 26;
  const PRIVACY_AGREE_USE_PAIDCALL = 27;
  const CONTACT_MY_TICKET = 10;
  const IDENTITY_PROVIDER = 11;
  const IDENTITY_IDENTIFIER = 12;
  const SNS_ACCOUNT = 19;
  const PHONE_REGISTRATION = 20;
  const PREFERENCE_LOCALE = 15;
  const CUSTOM_MODE = 22;
  const EMAIL_CONFIRMATION_STATUS = 24;
  const ACCOUNT_MIGRATION_PINCODE = 28;
  const ENFORCED_INPUT_ACCOUNT_MIGRATION_PINCODE = 29;
  const SECURITY_CENTER_SETTINGS = 18;
  const E2EE_ENABLE = 33;
  const ENABLE_SOUND_TO_TEXT = 47;
  const HITOKOTO_BACKUP_REQUESTED = 34;
  const CONTACT_ALLOW_FOLLOWING = 36;
  const PRIVACY_ALLOW_NEARBY = 37;
  const AGREEMENT_NEARBY = 38;
  const AGREEMENT_SQUARE = 39;
  const ALLOW_UNREGISTRATION_SECONDARY_DEVICE = 41;
  const AGREEMENT_BOT_USE = 42;
  const AGREEMENT_SHAKE_FUNCTION = 43;
  const AGREEMENT_MOBILE_CONTACT_NAME = 44;
  const AGREEMENT_SOUND_TO_TEXT = 46;
  static public $__names = array(
    0 => 'NOTIFICATION_ENABLE',
    1 => 'NOTIFICATION_MUTE_EXPIRATION',
    2 => 'NOTIFICATION_NEW_MESSAGE',
    3 => 'NOTIFICATION_GROUP_INVITATION',
    4 => 'NOTIFICATION_SHOW_MESSAGE',
    5 => 'NOTIFICATION_INCOMING_CALL',
    8 => 'NOTIFICATION_SOUND_MESSAGE',
    9 => 'NOTIFICATION_SOUND_GROUP',
    16 => 'NOTIFICATION_DISABLED_WITH_SUB',
    17 => 'NOTIFICATION_PAYMENT',
    40 => 'NOTIFICATION_MENTION',
    45 => 'NOTIFICATION_THUMBNAIL',
    6 => 'PRIVACY_SYNC_CONTACTS',
    7 => 'PRIVACY_SEARCH_BY_PHONE_NUMBER',
    13 => 'PRIVACY_SEARCH_BY_USERID',
    14 => 'PRIVACY_SEARCH_BY_EMAIL',
    21 => 'PRIVACY_ALLOW_SECONDARY_DEVICE_LOGIN',
    23 => 'PRIVACY_PROFILE_IMAGE_POST_TO_MYHOME',
    35 => 'PRIVACY_PROFILE_MUSIC_POST_TO_MYHOME',
    30 => 'PRIVACY_ALLOW_FRIEND_REQUEST',
    25 => 'PRIVACY_RECV_MESSAGES_FROM_NOT_FRIEND',
    26 => 'PRIVACY_AGREE_USE_LINECOIN_TO_PAIDCALL',
    27 => 'PRIVACY_AGREE_USE_PAIDCALL',
    10 => 'CONTACT_MY_TICKET',
    11 => 'IDENTITY_PROVIDER',
    12 => 'IDENTITY_IDENTIFIER',
    19 => 'SNS_ACCOUNT',
    20 => 'PHONE_REGISTRATION',
    15 => 'PREFERENCE_LOCALE',
    22 => 'CUSTOM_MODE',
    24 => 'EMAIL_CONFIRMATION_STATUS',
    28 => 'ACCOUNT_MIGRATION_PINCODE',
    29 => 'ENFORCED_INPUT_ACCOUNT_MIGRATION_PINCODE',
    18 => 'SECURITY_CENTER_SETTINGS',
    33 => 'E2EE_ENABLE',
    47 => 'ENABLE_SOUND_TO_TEXT',
    34 => 'HITOKOTO_BACKUP_REQUESTED',
    36 => 'CONTACT_ALLOW_FOLLOWING',
    37 => 'PRIVACY_ALLOW_NEARBY',
    38 => 'AGREEMENT_NEARBY',
    39 => 'AGREEMENT_SQUARE',
    41 => 'ALLOW_UNREGISTRATION_SECONDARY_DEVICE',
    42 => 'AGREEMENT_BOT_USE',
    43 => 'AGREEMENT_SHAKE_FUNCTION',
    44 => 'AGREEMENT_MOBILE_CONTACT_NAME',
    46 => 'AGREEMENT_SOUND_TO_TEXT',
  );
}

final class SnsIdType {
  const FACEBOOK = 1;
  const SINA = 2;
  const RENREN = 3;
  const FEIXIN = 4;
  const BBM = 5;
  static public $__names = array(
    1 => 'FACEBOOK',
    2 => 'SINA',
    3 => 'RENREN',
    4 => 'FEIXIN',
    5 => 'BBM',
  );
}

final class SpammerReason {
  const OTHER = 0;
  const ADVERTISING = 1;
  const GENDER_HARASSMENT = 2;
  const HARASSMENT = 3;
  static public $__names = array(
    0 => 'OTHER',
    1 => 'ADVERTISING',
    2 => 'GENDER_HARASSMENT',
    3 => 'HARASSMENT',
  );
}

final class SyncActionType {
  const SYNC = 0;
  const REPORT = 1;
  static public $__names = array(
    0 => 'SYNC',
    1 => 'REPORT',
  );
}

final class SyncCategory {
  const PROFILE = 0;
  const SETTINGS = 1;
  const OPS = 2;
  const CONTACT = 3;
  const RECOMMEND = 4;
  const BLOCK = 5;
  const GROUP = 6;
  const ROOM = 7;
  const NOTIFICATION = 8;
  static public $__names = array(
    0 => 'PROFILE',
    1 => 'SETTINGS',
    2 => 'OPS',
    3 => 'CONTACT',
    4 => 'RECOMMEND',
    5 => 'BLOCK',
    6 => 'GROUP',
    7 => 'ROOM',
    8 => 'NOTIFICATION',
  );
}

final class TMessageBoxStatus {
  const ACTIVATED = 1;
  const UNREAD = 2;
  static public $__names = array(
    1 => 'ACTIVATED',
    2 => 'UNREAD',
  );
}

final class UniversalNotificationServiceErrorCode {
  const INTERNAL_ERROR = 0;
  const INVALID_KEY = 1;
  const ILLEGAL_ARGUMENT = 2;
  const TOO_MANY_REQUEST = 3;
  const AUTHENTICATION_FAILED = 4;
  const NO_WRITE_PERMISSION = 5;
  static public $__names = array(
    0 => 'INTERNAL_ERROR',
    1 => 'INVALID_KEY',
    2 => 'ILLEGAL_ARGUMENT',
    3 => 'TOO_MANY_REQUEST',
    4 => 'AUTHENTICATION_FAILED',
    5 => 'NO_WRITE_PERMISSION',
  );
}

final class UnregistrationReason {
  const UNREGISTRATION_REASON_UNREGISTER_USER = 1;
  const UNREGISTRATION_REASON_UNBIND_DEVICE = 2;
  static public $__names = array(
    1 => 'UNREGISTRATION_REASON_UNREGISTER_USER',
    2 => 'UNREGISTRATION_REASON_UNBIND_DEVICE',
  );
}

final class UserAgeType {
  const OVER = 1;
  const UNDER = 2;
  const UNDEFINED = 3;
  static public $__names = array(
    1 => 'OVER',
    2 => 'UNDER',
    3 => 'UNDEFINED',
  );
}

final class VerificationMethod {
  const NO_AVAILABLE = 0;
  const PIN_VIA_SMS = 1;
  const CALLERID_INDIGO = 2;
  const PIN_VIA_TTS = 4;
  const SKIP = 10;
  static public $__names = array(
    0 => 'NO_AVAILABLE',
    1 => 'PIN_VIA_SMS',
    2 => 'CALLERID_INDIGO',
    4 => 'PIN_VIA_TTS',
    10 => 'SKIP',
  );
}

final class VerificationResult {
  const FAILED = 0;
  const OK_NOT_REGISTERED_YET = 1;
  const OK_REGISTERED_WITH_SAME_DEVICE = 2;
  const OK_REGISTERED_WITH_ANOTHER_DEVICE = 3;
  static public $__names = array(
    0 => 'FAILED',
    1 => 'OK_NOT_REGISTERED_YET',
    2 => 'OK_REGISTERED_WITH_SAME_DEVICE',
    3 => 'OK_REGISTERED_WITH_ANOTHER_DEVICE',
  );
}

final class WapInvitationType {
  const REGISTRATION = 1;
  const CHAT = 2;
  static public $__names = array(
    1 => 'REGISTRATION',
    2 => 'CHAT',
  );
}

final class MediaType {
  const AUDIO = 1;
  const VIDEO = 2;
  static public $__names = array(
    1 => 'AUDIO',
    2 => 'VIDEO',
  );
}

final class SQErrorCode {
  const UNKNOWN = 0;
  const ILLEGAL_ARGUMENT = 400;
  const AUTHENTICATION_FAILURE = 401;
  const FORBIDDEN = 403;
  const NOT_FOUND = 404;
  const REVISION_MISMATCH = 409;
  const PRECONDITION_FAILED = 410;
  const INTERNAL_ERROR = 500;
  const NOT_IMPLEMENTED = 501;
  const TRY_AGAIN_LATER = 505;
  static public $__names = array(
    0 => 'UNKNOWN',
    400 => 'ILLEGAL_ARGUMENT',
    401 => 'AUTHENTICATION_FAILURE',
    403 => 'FORBIDDEN',
    404 => 'NOT_FOUND',
    409 => 'REVISION_MISMATCH',
    410 => 'PRECONDITION_FAILED',
    500 => 'INTERNAL_ERROR',
    501 => 'NOT_IMPLEMENTED',
    505 => 'TRY_AGAIN_LATER',
  );
}

final class SquareEventType {
  const RECEIVE_MESSAGE = 0;
  const SEND_MESSAGE = 1;
  const NOTIFIED_JOIN_SQUARE_CHAT = 2;
  const NOTIFIED_INVITE_INTO_SQUARE_CHAT = 3;
  const NOTIFIED_LEAVE_SQUARE_CHAT = 4;
  const NOTIFIED_DESTROY_MESSAGE = 5;
  const NOTIFIED_MARK_AS_READ = 6;
  const NOTIFIED_UPDATE_SQUARE_MEMBER_PROFILE = 7;
  const NOTIFIED_KICKOUT_FROM_SQUARE = 19;
  const NOTIFIED_SHUTDOWN_SQUARE = 18;
  const NOTIFIED_DELETE_SQUARE_CHAT = 20;
  const NOTIFIED_UPDATE_SQUARE_CHAT_PROFILE_NAME = 30;
  const NOTIFIED_UPDATE_SQUARE_CHAT_PROFILE_IMAGE = 31;
  const NOTIFIED_UPDATE_SQUARE = 8;
  const NOTIFIED_UPDATE_SQUARE_STATUS = 9;
  const NOTIFIED_UPDATE_SQUARE_AUTHORITY = 10;
  const NOTIFIED_UPDATE_SQUARE_MEMBER = 11;
  const NOTIFIED_UPDATE_SQUARE_CHAT = 12;
  const NOTIFIED_UPDATE_SQUARE_CHAT_STATUS = 13;
  const NOTIFIED_UPDATE_SQUARE_CHAT_MEMBER = 14;
  const NOTIFIED_CREATE_SQUARE_MEMBER = 15;
  const NOTIFIED_CREATE_SQUARE_CHAT_MEMBER = 16;
  const NOTIFIED_UPDATE_SQUARE_MEMBER_RELATION = 17;
  const NOTIFIED_UPDATE_SQUARE_FEATURE_SET = 32;
  const NOTIFICATION_JOIN_REQUEST = 21;
  const NOTIFICATION_JOINED = 22;
  const NOTIFICATION_PROMOTED_COADMIN = 23;
  const NOTIFICATION_PROMOTED_ADMIN = 24;
  const NOTIFICATION_DEMOTED_MEMBER = 25;
  const NOTIFICATION_KICKED_OUT = 26;
  const NOTIFICATION_SQUARE_DELETE = 27;
  const NOTIFICATION_SQUARE_CHAT_DELETE = 28;
  const NOTIFICATION_MESSAGE = 29;
  static public $__names = array(
    0 => 'RECEIVE_MESSAGE',
    1 => 'SEND_MESSAGE',
    2 => 'NOTIFIED_JOIN_SQUARE_CHAT',
    3 => 'NOTIFIED_INVITE_INTO_SQUARE_CHAT',
    4 => 'NOTIFIED_LEAVE_SQUARE_CHAT',
    5 => 'NOTIFIED_DESTROY_MESSAGE',
    6 => 'NOTIFIED_MARK_AS_READ',
    7 => 'NOTIFIED_UPDATE_SQUARE_MEMBER_PROFILE',
    19 => 'NOTIFIED_KICKOUT_FROM_SQUARE',
    18 => 'NOTIFIED_SHUTDOWN_SQUARE',
    20 => 'NOTIFIED_DELETE_SQUARE_CHAT',
    30 => 'NOTIFIED_UPDATE_SQUARE_CHAT_PROFILE_NAME',
    31 => 'NOTIFIED_UPDATE_SQUARE_CHAT_PROFILE_IMAGE',
    8 => 'NOTIFIED_UPDATE_SQUARE',
    9 => 'NOTIFIED_UPDATE_SQUARE_STATUS',
    10 => 'NOTIFIED_UPDATE_SQUARE_AUTHORITY',
    11 => 'NOTIFIED_UPDATE_SQUARE_MEMBER',
    12 => 'NOTIFIED_UPDATE_SQUARE_CHAT',
    13 => 'NOTIFIED_UPDATE_SQUARE_CHAT_STATUS',
    14 => 'NOTIFIED_UPDATE_SQUARE_CHAT_MEMBER',
    15 => 'NOTIFIED_CREATE_SQUARE_MEMBER',
    16 => 'NOTIFIED_CREATE_SQUARE_CHAT_MEMBER',
    17 => 'NOTIFIED_UPDATE_SQUARE_MEMBER_RELATION',
    32 => 'NOTIFIED_UPDATE_SQUARE_FEATURE_SET',
    21 => 'NOTIFICATION_JOIN_REQUEST',
    22 => 'NOTIFICATION_JOINED',
    23 => 'NOTIFICATION_PROMOTED_COADMIN',
    24 => 'NOTIFICATION_PROMOTED_ADMIN',
    25 => 'NOTIFICATION_DEMOTED_MEMBER',
    26 => 'NOTIFICATION_KICKED_OUT',
    27 => 'NOTIFICATION_SQUARE_DELETE',
    28 => 'NOTIFICATION_SQUARE_CHAT_DELETE',
    29 => 'NOTIFICATION_MESSAGE',
  );
}

final class SquareMemberRelationState {
  const NONE = 1;
  const BLOCKED = 2;
  static public $__names = array(
    1 => 'NONE',
    2 => 'BLOCKED',
  );
}

final class SquareFeatureControlState {
  const DISABLED = 1;
  const ENABLED = 2;
  static public $__names = array(
    1 => 'DISABLED',
    2 => 'ENABLED',
  );
}

final class BooleanState {
  const NONE = 0;
  const OFF = 1;
  const ON = 2;
  static public $__names = array(
    0 => 'NONE',
    1 => 'OFF',
    2 => 'ON',
  );
}

final class SquareType {
  const CLOSED = 0;
  const OPEN = 1;
  static public $__names = array(
    0 => 'CLOSED',
    1 => 'OPEN',
  );
}

final class SquareChatType {
  const OPEN = 1;
  const SECRET = 2;
  const ONE_ON_ONE = 3;
  const SQUARE_DEFAULT = 4;
  static public $__names = array(
    1 => 'OPEN',
    2 => 'SECRET',
    3 => 'ONE_ON_ONE',
    4 => 'SQUARE_DEFAULT',
  );
}

final class SquareChatState {
  const ALIVE = 0;
  const DELETED = 1;
  const SUSPENDED = 2;
  static public $__names = array(
    0 => 'ALIVE',
    1 => 'DELETED',
    2 => 'SUSPENDED',
  );
}

final class SquareMembershipState {
  const JOIN_REQUESTED = 1;
  const JOINED = 2;
  const REJECTED = 3;
  const LEFT = 4;
  const KICK_OUT = 5;
  const BANNED = 6;
  const DELETED = 7;
  static public $__names = array(
    1 => 'JOIN_REQUESTED',
    2 => 'JOINED',
    3 => 'REJECTED',
    4 => 'LEFT',
    5 => 'KICK_OUT',
    6 => 'BANNED',
    7 => 'DELETED',
  );
}

final class SquareMemberRole {
  const ADMIN = 1;
  const CO_ADMIN = 2;
  const MEMBER = 10;
  static public $__names = array(
    1 => 'ADMIN',
    2 => 'CO_ADMIN',
    10 => 'MEMBER',
  );
}

final class PreconditionFailedExtraInfo {
  const DUPLICATED_DISPLAY_NAME = 0;
  static public $__names = array(
    0 => 'DUPLICATED_DISPLAY_NAME',
  );
}

final class SquareChatMembershipState {
  const JOINED = 1;
  const LEFT = 2;
  static public $__names = array(
    1 => 'JOINED',
    2 => 'LEFT',
  );
}

final class FetchDirection {
  const FORWARD = 1;
  const BACKWARD = 2;
  static public $__names = array(
    1 => 'FORWARD',
    2 => 'BACKWARD',
  );
}

final class SquareEventStatus {
  const NORMAL = 1;
  const ALERT_DISABLED = 2;
  static public $__names = array(
    1 => 'NORMAL',
    2 => 'ALERT_DISABLED',
  );
}

class AgeCheckDocomoResult {
  static $_TSPEC;

  /**
   * @var string
   */
  public $authUrl = null;
  /**
   * @var int
   */
  public $userAgeType = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'authUrl',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'userAgeType',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['authUrl'])) {
        $this->authUrl = $vals['authUrl'];
      }
      if (isset($vals['userAgeType'])) {
        $this->userAgeType = $vals['userAgeType'];
      }
    }
  }

  public function getName() {
    return 'AgeCheckDocomoResult';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->authUrl);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->userAgeType);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('AgeCheckDocomoResult');
    if ($this->authUrl !== null) {
      $xfer += $output->writeFieldBegin('authUrl', TType::STRING, 1);
      $xfer += $output->writeString($this->authUrl);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->userAgeType !== null) {
      $xfer += $output->writeFieldBegin('userAgeType', TType::I32, 2);
      $xfer += $output->writeI32($this->userAgeType);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class AgeCheckRequestResult {
  static $_TSPEC;

  /**
   * @var string
   */
  public $authUrl = null;
  /**
   * @var string
   */
  public $sessionId = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'authUrl',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'sessionId',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['authUrl'])) {
        $this->authUrl = $vals['authUrl'];
      }
      if (isset($vals['sessionId'])) {
        $this->sessionId = $vals['sessionId'];
      }
    }
  }

  public function getName() {
    return 'AgeCheckRequestResult';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->authUrl);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->sessionId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('AgeCheckRequestResult');
    if ($this->authUrl !== null) {
      $xfer += $output->writeFieldBegin('authUrl', TType::STRING, 1);
      $xfer += $output->writeString($this->authUrl);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->sessionId !== null) {
      $xfer += $output->writeFieldBegin('sessionId', TType::STRING, 2);
      $xfer += $output->writeString($this->sessionId);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class Announcement {
  static $_TSPEC;

  /**
   * @var int
   */
  public $index = null;
  /**
   * @var bool
   */
  public $forceUpdate = null;
  /**
   * @var string
   */
  public $title = null;
  /**
   * @var string
   */
  public $text = null;
  /**
   * @var int
   */
  public $createdTime = null;
  /**
   * @var string
   */
  public $pictureUrl = null;
  /**
   * @var string
   */
  public $thumbnailUrl = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'index',
          'type' => TType::I32,
          ),
        10 => array(
          'var' => 'forceUpdate',
          'type' => TType::BOOL,
          ),
        11 => array(
          'var' => 'title',
          'type' => TType::STRING,
          ),
        12 => array(
          'var' => 'text',
          'type' => TType::STRING,
          ),
        13 => array(
          'var' => 'createdTime',
          'type' => TType::I64,
          ),
        14 => array(
          'var' => 'pictureUrl',
          'type' => TType::STRING,
          ),
        15 => array(
          'var' => 'thumbnailUrl',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['index'])) {
        $this->index = $vals['index'];
      }
      if (isset($vals['forceUpdate'])) {
        $this->forceUpdate = $vals['forceUpdate'];
      }
      if (isset($vals['title'])) {
        $this->title = $vals['title'];
      }
      if (isset($vals['text'])) {
        $this->text = $vals['text'];
      }
      if (isset($vals['createdTime'])) {
        $this->createdTime = $vals['createdTime'];
      }
      if (isset($vals['pictureUrl'])) {
        $this->pictureUrl = $vals['pictureUrl'];
      }
      if (isset($vals['thumbnailUrl'])) {
        $this->thumbnailUrl = $vals['thumbnailUrl'];
      }
    }
  }

  public function getName() {
    return 'Announcement';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->index);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 10:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->forceUpdate);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 11:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->title);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 12:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->text);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 13:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->createdTime);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 14:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->pictureUrl);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 15:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->thumbnailUrl);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('Announcement');
    if ($this->index !== null) {
      $xfer += $output->writeFieldBegin('index', TType::I32, 1);
      $xfer += $output->writeI32($this->index);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->forceUpdate !== null) {
      $xfer += $output->writeFieldBegin('forceUpdate', TType::BOOL, 10);
      $xfer += $output->writeBool($this->forceUpdate);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->title !== null) {
      $xfer += $output->writeFieldBegin('title', TType::STRING, 11);
      $xfer += $output->writeString($this->title);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->text !== null) {
      $xfer += $output->writeFieldBegin('text', TType::STRING, 12);
      $xfer += $output->writeString($this->text);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->createdTime !== null) {
      $xfer += $output->writeFieldBegin('createdTime', TType::I64, 13);
      $xfer += $output->writeI64($this->createdTime);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->pictureUrl !== null) {
      $xfer += $output->writeFieldBegin('pictureUrl', TType::STRING, 14);
      $xfer += $output->writeString($this->pictureUrl);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->thumbnailUrl !== null) {
      $xfer += $output->writeFieldBegin('thumbnailUrl', TType::STRING, 15);
      $xfer += $output->writeString($this->thumbnailUrl);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ChannelProvider {
  static $_TSPEC;

  /**
   * @var string
   */
  public $name = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'name',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['name'])) {
        $this->name = $vals['name'];
      }
    }
  }

  public function getName() {
    return 'ChannelProvider';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->name);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ChannelProvider');
    if ($this->name !== null) {
      $xfer += $output->writeFieldBegin('name', TType::STRING, 1);
      $xfer += $output->writeString($this->name);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ChannelInfo {
  static $_TSPEC;

  /**
   * @var string
   */
  public $channelId = null;
  /**
   * @var string
   */
  public $name = null;
  /**
   * @var string
   */
  public $entryPageUrl = null;
  /**
   * @var string
   */
  public $descriptionText = null;
  /**
   * @var \ChannelProvider
   */
  public $provider = null;
  /**
   * @var int
   */
  public $publicType = null;
  /**
   * @var string
   */
  public $iconImage = null;
  /**
   * @var string[]
   */
  public $permissions = null;
  /**
   * @var string
   */
  public $iconThumbnailImage = null;
  /**
   * @var int[]
   */
  public $channelConfigurations = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'channelId',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'name',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'entryPageUrl',
          'type' => TType::STRING,
          ),
        5 => array(
          'var' => 'descriptionText',
          'type' => TType::STRING,
          ),
        6 => array(
          'var' => 'provider',
          'type' => TType::STRUCT,
          'class' => '\ChannelProvider',
          ),
        7 => array(
          'var' => 'publicType',
          'type' => TType::I32,
          ),
        8 => array(
          'var' => 'iconImage',
          'type' => TType::STRING,
          ),
        9 => array(
          'var' => 'permissions',
          'type' => TType::LST,
          'etype' => TType::STRING,
          'elem' => array(
            'type' => TType::STRING,
            ),
          ),
        11 => array(
          'var' => 'iconThumbnailImage',
          'type' => TType::STRING,
          ),
        12 => array(
          'var' => 'channelConfigurations',
          'type' => TType::LST,
          'etype' => TType::I32,
          'elem' => array(
            'type' => TType::I32,
            ),
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['channelId'])) {
        $this->channelId = $vals['channelId'];
      }
      if (isset($vals['name'])) {
        $this->name = $vals['name'];
      }
      if (isset($vals['entryPageUrl'])) {
        $this->entryPageUrl = $vals['entryPageUrl'];
      }
      if (isset($vals['descriptionText'])) {
        $this->descriptionText = $vals['descriptionText'];
      }
      if (isset($vals['provider'])) {
        $this->provider = $vals['provider'];
      }
      if (isset($vals['publicType'])) {
        $this->publicType = $vals['publicType'];
      }
      if (isset($vals['iconImage'])) {
        $this->iconImage = $vals['iconImage'];
      }
      if (isset($vals['permissions'])) {
        $this->permissions = $vals['permissions'];
      }
      if (isset($vals['iconThumbnailImage'])) {
        $this->iconThumbnailImage = $vals['iconThumbnailImage'];
      }
      if (isset($vals['channelConfigurations'])) {
        $this->channelConfigurations = $vals['channelConfigurations'];
      }
    }
  }

  public function getName() {
    return 'ChannelInfo';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->channelId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->name);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->entryPageUrl);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->descriptionText);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRUCT) {
            $this->provider = new \ChannelProvider();
            $xfer += $this->provider->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->publicType);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 8:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->iconImage);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 9:
          if ($ftype == TType::LST) {
            $this->permissions = array();
            $_size0 = 0;
            $_etype3 = 0;
            $xfer += $input->readListBegin($_etype3, $_size0);
            for ($_i4 = 0; $_i4 < $_size0; ++$_i4)
            {
              $elem5 = null;
              $xfer += $input->readString($elem5);
              $this->permissions []= $elem5;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 11:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->iconThumbnailImage);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 12:
          if ($ftype == TType::LST) {
            $this->channelConfigurations = array();
            $_size6 = 0;
            $_etype9 = 0;
            $xfer += $input->readListBegin($_etype9, $_size6);
            for ($_i10 = 0; $_i10 < $_size6; ++$_i10)
            {
              $elem11 = null;
              $xfer += $input->readI32($elem11);
              $this->channelConfigurations []= $elem11;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ChannelInfo');
    if ($this->channelId !== null) {
      $xfer += $output->writeFieldBegin('channelId', TType::STRING, 1);
      $xfer += $output->writeString($this->channelId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->name !== null) {
      $xfer += $output->writeFieldBegin('name', TType::STRING, 3);
      $xfer += $output->writeString($this->name);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->entryPageUrl !== null) {
      $xfer += $output->writeFieldBegin('entryPageUrl', TType::STRING, 4);
      $xfer += $output->writeString($this->entryPageUrl);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->descriptionText !== null) {
      $xfer += $output->writeFieldBegin('descriptionText', TType::STRING, 5);
      $xfer += $output->writeString($this->descriptionText);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->provider !== null) {
      if (!is_object($this->provider)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('provider', TType::STRUCT, 6);
      $xfer += $this->provider->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->publicType !== null) {
      $xfer += $output->writeFieldBegin('publicType', TType::I32, 7);
      $xfer += $output->writeI32($this->publicType);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->iconImage !== null) {
      $xfer += $output->writeFieldBegin('iconImage', TType::STRING, 8);
      $xfer += $output->writeString($this->iconImage);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->permissions !== null) {
      if (!is_array($this->permissions)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('permissions', TType::LST, 9);
      {
        $output->writeListBegin(TType::STRING, count($this->permissions));
        {
          foreach ($this->permissions as $iter12)
          {
            $xfer += $output->writeString($iter12);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->iconThumbnailImage !== null) {
      $xfer += $output->writeFieldBegin('iconThumbnailImage', TType::STRING, 11);
      $xfer += $output->writeString($this->iconThumbnailImage);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->channelConfigurations !== null) {
      if (!is_array($this->channelConfigurations)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('channelConfigurations', TType::LST, 12);
      {
        $output->writeListBegin(TType::I32, count($this->channelConfigurations));
        {
          foreach ($this->channelConfigurations as $iter13)
          {
            $xfer += $output->writeI32($iter13);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ApprovedChannelInfo {
  static $_TSPEC;

  /**
   * @var \ChannelInfo
   */
  public $channelInfo = null;
  /**
   * @var int
   */
  public $approvedAt = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'channelInfo',
          'type' => TType::STRUCT,
          'class' => '\ChannelInfo',
          ),
        2 => array(
          'var' => 'approvedAt',
          'type' => TType::I64,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['channelInfo'])) {
        $this->channelInfo = $vals['channelInfo'];
      }
      if (isset($vals['approvedAt'])) {
        $this->approvedAt = $vals['approvedAt'];
      }
    }
  }

  public function getName() {
    return 'ApprovedChannelInfo';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->channelInfo = new \ChannelInfo();
            $xfer += $this->channelInfo->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->approvedAt);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ApprovedChannelInfo');
    if ($this->channelInfo !== null) {
      if (!is_object($this->channelInfo)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('channelInfo', TType::STRUCT, 1);
      $xfer += $this->channelInfo->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->approvedAt !== null) {
      $xfer += $output->writeFieldBegin('approvedAt', TType::I64, 2);
      $xfer += $output->writeI64($this->approvedAt);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ApprovedChannelInfos {
  static $_TSPEC;

  /**
   * @var \ApprovedChannelInfo[]
   */
  public $approvedChannelInfos = null;
  /**
   * @var int
   */
  public $revision = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'approvedChannelInfos',
          'type' => TType::LST,
          'etype' => TType::STRUCT,
          'elem' => array(
            'type' => TType::STRUCT,
            'class' => '\ApprovedChannelInfo',
            ),
          ),
        2 => array(
          'var' => 'revision',
          'type' => TType::I64,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['approvedChannelInfos'])) {
        $this->approvedChannelInfos = $vals['approvedChannelInfos'];
      }
      if (isset($vals['revision'])) {
        $this->revision = $vals['revision'];
      }
    }
  }

  public function getName() {
    return 'ApprovedChannelInfos';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::LST) {
            $this->approvedChannelInfos = array();
            $_size14 = 0;
            $_etype17 = 0;
            $xfer += $input->readListBegin($_etype17, $_size14);
            for ($_i18 = 0; $_i18 < $_size14; ++$_i18)
            {
              $elem19 = null;
              $elem19 = new \ApprovedChannelInfo();
              $xfer += $elem19->read($input);
              $this->approvedChannelInfos []= $elem19;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->revision);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ApprovedChannelInfos');
    if ($this->approvedChannelInfos !== null) {
      if (!is_array($this->approvedChannelInfos)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('approvedChannelInfos', TType::LST, 1);
      {
        $output->writeListBegin(TType::STRUCT, count($this->approvedChannelInfos));
        {
          foreach ($this->approvedChannelInfos as $iter20)
          {
            $xfer += $iter20->write($output);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->revision !== null) {
      $xfer += $output->writeFieldBegin('revision', TType::I64, 2);
      $xfer += $output->writeI64($this->revision);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class AuthQrcode {
  static $_TSPEC;

  /**
   * @var string
   */
  public $qrcode = null;
  /**
   * @var string
   */
  public $verifier = null;
  /**
   * @var string
   */
  public $callbackUrl = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'qrcode',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'verifier',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'callbackUrl',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['qrcode'])) {
        $this->qrcode = $vals['qrcode'];
      }
      if (isset($vals['verifier'])) {
        $this->verifier = $vals['verifier'];
      }
      if (isset($vals['callbackUrl'])) {
        $this->callbackUrl = $vals['callbackUrl'];
      }
    }
  }

  public function getName() {
    return 'AuthQrcode';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->qrcode);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->verifier);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->callbackUrl);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('AuthQrcode');
    if ($this->qrcode !== null) {
      $xfer += $output->writeFieldBegin('qrcode', TType::STRING, 1);
      $xfer += $output->writeString($this->qrcode);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->verifier !== null) {
      $xfer += $output->writeFieldBegin('verifier', TType::STRING, 2);
      $xfer += $output->writeString($this->verifier);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->callbackUrl !== null) {
      $xfer += $output->writeFieldBegin('callbackUrl', TType::STRING, 3);
      $xfer += $output->writeString($this->callbackUrl);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class BuddyBanner {
  static $_TSPEC;

  /**
   * @var int
   */
  public $buddyBannerLinkType = null;
  /**
   * @var string
   */
  public $buddyBannerLink = null;
  /**
   * @var string
   */
  public $buddyBannerImageUrl = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'buddyBannerLinkType',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'buddyBannerLink',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'buddyBannerImageUrl',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['buddyBannerLinkType'])) {
        $this->buddyBannerLinkType = $vals['buddyBannerLinkType'];
      }
      if (isset($vals['buddyBannerLink'])) {
        $this->buddyBannerLink = $vals['buddyBannerLink'];
      }
      if (isset($vals['buddyBannerImageUrl'])) {
        $this->buddyBannerImageUrl = $vals['buddyBannerImageUrl'];
      }
    }
  }

  public function getName() {
    return 'BuddyBanner';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->buddyBannerLinkType);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->buddyBannerLink);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->buddyBannerImageUrl);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('BuddyBanner');
    if ($this->buddyBannerLinkType !== null) {
      $xfer += $output->writeFieldBegin('buddyBannerLinkType', TType::I32, 1);
      $xfer += $output->writeI32($this->buddyBannerLinkType);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->buddyBannerLink !== null) {
      $xfer += $output->writeFieldBegin('buddyBannerLink', TType::STRING, 2);
      $xfer += $output->writeString($this->buddyBannerLink);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->buddyBannerImageUrl !== null) {
      $xfer += $output->writeFieldBegin('buddyBannerImageUrl', TType::STRING, 3);
      $xfer += $output->writeString($this->buddyBannerImageUrl);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class BuddyDetail {
  static $_TSPEC;

  /**
   * @var string
   */
  public $mid = null;
  /**
   * @var int
   */
  public $memberCount = null;
  /**
   * @var bool
   */
  public $onAir = null;
  /**
   * @var bool
   */
  public $businessAccount = null;
  /**
   * @var bool
   */
  public $addable = null;
  /**
   * @var int[]
   */
  public $acceptableContentTypes = null;
  /**
   * @var bool
   */
  public $capableMyhome = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'mid',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'memberCount',
          'type' => TType::I64,
          ),
        3 => array(
          'var' => 'onAir',
          'type' => TType::BOOL,
          ),
        4 => array(
          'var' => 'businessAccount',
          'type' => TType::BOOL,
          ),
        5 => array(
          'var' => 'addable',
          'type' => TType::BOOL,
          ),
        6 => array(
          'var' => 'acceptableContentTypes',
          'type' => TType::SET,
          'etype' => TType::I32,
          'elem' => array(
            'type' => TType::I32,
            ),
          ),
        7 => array(
          'var' => 'capableMyhome',
          'type' => TType::BOOL,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['mid'])) {
        $this->mid = $vals['mid'];
      }
      if (isset($vals['memberCount'])) {
        $this->memberCount = $vals['memberCount'];
      }
      if (isset($vals['onAir'])) {
        $this->onAir = $vals['onAir'];
      }
      if (isset($vals['businessAccount'])) {
        $this->businessAccount = $vals['businessAccount'];
      }
      if (isset($vals['addable'])) {
        $this->addable = $vals['addable'];
      }
      if (isset($vals['acceptableContentTypes'])) {
        $this->acceptableContentTypes = $vals['acceptableContentTypes'];
      }
      if (isset($vals['capableMyhome'])) {
        $this->capableMyhome = $vals['capableMyhome'];
      }
    }
  }

  public function getName() {
    return 'BuddyDetail';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->mid);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->memberCount);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->onAir);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->businessAccount);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->addable);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::SET) {
            $this->acceptableContentTypes = array();
            $_size21 = 0;
            $_etype24 = 0;
            $xfer += $input->readSetBegin($_etype24, $_size21);
            for ($_i25 = 0; $_i25 < $_size21; ++$_i25)
            {
              $elem26 = null;
              $xfer += $input->readI32($elem26);
              if (is_scalar($elem26)) {
                $this->acceptableContentTypes[$elem26] = true;
              } else {
                $this->acceptableContentTypes []= $elem26;
              }
            }
            $xfer += $input->readSetEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->capableMyhome);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('BuddyDetail');
    if ($this->mid !== null) {
      $xfer += $output->writeFieldBegin('mid', TType::STRING, 1);
      $xfer += $output->writeString($this->mid);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->memberCount !== null) {
      $xfer += $output->writeFieldBegin('memberCount', TType::I64, 2);
      $xfer += $output->writeI64($this->memberCount);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->onAir !== null) {
      $xfer += $output->writeFieldBegin('onAir', TType::BOOL, 3);
      $xfer += $output->writeBool($this->onAir);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->businessAccount !== null) {
      $xfer += $output->writeFieldBegin('businessAccount', TType::BOOL, 4);
      $xfer += $output->writeBool($this->businessAccount);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->addable !== null) {
      $xfer += $output->writeFieldBegin('addable', TType::BOOL, 5);
      $xfer += $output->writeBool($this->addable);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->acceptableContentTypes !== null) {
      if (!is_array($this->acceptableContentTypes)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('acceptableContentTypes', TType::SET, 6);
      {
        $output->writeSetBegin(TType::I32, count($this->acceptableContentTypes));
        {
          foreach ($this->acceptableContentTypes as $iter27 => $iter28)
          {
            if (is_scalar($iter28)) {
            $xfer += $output->writeI32($iter27);
            } else {
            $xfer += $output->writeI32($iter28);
            }
          }
        }
        $output->writeSetEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->capableMyhome !== null) {
      $xfer += $output->writeFieldBegin('capableMyhome', TType::BOOL, 7);
      $xfer += $output->writeBool($this->capableMyhome);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class Contact {
  static $_TSPEC;

  /**
   * @var string
   */
  public $mid = null;
  /**
   * @var int
   */
  public $createdTime = null;
  /**
   * @var int
   */
  public $type = null;
  /**
   * @var int
   */
  public $status = null;
  /**
   * @var int
   */
  public $relation = null;
  /**
   * @var string
   */
  public $displayName = null;
  /**
   * @var string
   */
  public $phoneticName = null;
  /**
   * @var string
   */
  public $pictureStatus = null;
  /**
   * @var string
   */
  public $thumbnailUrl = null;
  /**
   * @var string
   */
  public $statusMessage = null;
  /**
   * @var string
   */
  public $displayNameOverridden = null;
  /**
   * @var int
   */
  public $favoriteTime = null;
  /**
   * @var bool
   */
  public $capableVoiceCall = null;
  /**
   * @var bool
   */
  public $capableVideoCall = null;
  /**
   * @var bool
   */
  public $capableMyhome = null;
  /**
   * @var bool
   */
  public $capableBuddy = null;
  /**
   * @var int
   */
  public $attributes = null;
  /**
   * @var int
   */
  public $settings = null;
  /**
   * @var string
   */
  public $picturePath = null;
  /**
   * @var string
   */
  public $recommendParams = null;
  /**
   * @var int
   */
  public $friendRequestStatus = null;
  /**
   * @var string
   */
  public $musicProfile = null;
  /**
   * @var string
   */
  public $videoProfile = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'mid',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'createdTime',
          'type' => TType::I64,
          ),
        10 => array(
          'var' => 'type',
          'type' => TType::I32,
          ),
        11 => array(
          'var' => 'status',
          'type' => TType::I32,
          ),
        21 => array(
          'var' => 'relation',
          'type' => TType::I32,
          ),
        22 => array(
          'var' => 'displayName',
          'type' => TType::STRING,
          ),
        23 => array(
          'var' => 'phoneticName',
          'type' => TType::STRING,
          ),
        24 => array(
          'var' => 'pictureStatus',
          'type' => TType::STRING,
          ),
        25 => array(
          'var' => 'thumbnailUrl',
          'type' => TType::STRING,
          ),
        26 => array(
          'var' => 'statusMessage',
          'type' => TType::STRING,
          ),
        27 => array(
          'var' => 'displayNameOverridden',
          'type' => TType::STRING,
          ),
        28 => array(
          'var' => 'favoriteTime',
          'type' => TType::I64,
          ),
        31 => array(
          'var' => 'capableVoiceCall',
          'type' => TType::BOOL,
          ),
        32 => array(
          'var' => 'capableVideoCall',
          'type' => TType::BOOL,
          ),
        33 => array(
          'var' => 'capableMyhome',
          'type' => TType::BOOL,
          ),
        34 => array(
          'var' => 'capableBuddy',
          'type' => TType::BOOL,
          ),
        35 => array(
          'var' => 'attributes',
          'type' => TType::I32,
          ),
        36 => array(
          'var' => 'settings',
          'type' => TType::I64,
          ),
        37 => array(
          'var' => 'picturePath',
          'type' => TType::STRING,
          ),
        38 => array(
          'var' => 'recommendParams',
          'type' => TType::STRING,
          ),
        39 => array(
          'var' => 'friendRequestStatus',
          'type' => TType::I32,
          ),
        40 => array(
          'var' => 'musicProfile',
          'type' => TType::STRING,
          ),
        42 => array(
          'var' => 'videoProfile',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['mid'])) {
        $this->mid = $vals['mid'];
      }
      if (isset($vals['createdTime'])) {
        $this->createdTime = $vals['createdTime'];
      }
      if (isset($vals['type'])) {
        $this->type = $vals['type'];
      }
      if (isset($vals['status'])) {
        $this->status = $vals['status'];
      }
      if (isset($vals['relation'])) {
        $this->relation = $vals['relation'];
      }
      if (isset($vals['displayName'])) {
        $this->displayName = $vals['displayName'];
      }
      if (isset($vals['phoneticName'])) {
        $this->phoneticName = $vals['phoneticName'];
      }
      if (isset($vals['pictureStatus'])) {
        $this->pictureStatus = $vals['pictureStatus'];
      }
      if (isset($vals['thumbnailUrl'])) {
        $this->thumbnailUrl = $vals['thumbnailUrl'];
      }
      if (isset($vals['statusMessage'])) {
        $this->statusMessage = $vals['statusMessage'];
      }
      if (isset($vals['displayNameOverridden'])) {
        $this->displayNameOverridden = $vals['displayNameOverridden'];
      }
      if (isset($vals['favoriteTime'])) {
        $this->favoriteTime = $vals['favoriteTime'];
      }
      if (isset($vals['capableVoiceCall'])) {
        $this->capableVoiceCall = $vals['capableVoiceCall'];
      }
      if (isset($vals['capableVideoCall'])) {
        $this->capableVideoCall = $vals['capableVideoCall'];
      }
      if (isset($vals['capableMyhome'])) {
        $this->capableMyhome = $vals['capableMyhome'];
      }
      if (isset($vals['capableBuddy'])) {
        $this->capableBuddy = $vals['capableBuddy'];
      }
      if (isset($vals['attributes'])) {
        $this->attributes = $vals['attributes'];
      }
      if (isset($vals['settings'])) {
        $this->settings = $vals['settings'];
      }
      if (isset($vals['picturePath'])) {
        $this->picturePath = $vals['picturePath'];
      }
      if (isset($vals['recommendParams'])) {
        $this->recommendParams = $vals['recommendParams'];
      }
      if (isset($vals['friendRequestStatus'])) {
        $this->friendRequestStatus = $vals['friendRequestStatus'];
      }
      if (isset($vals['musicProfile'])) {
        $this->musicProfile = $vals['musicProfile'];
      }
      if (isset($vals['videoProfile'])) {
        $this->videoProfile = $vals['videoProfile'];
      }
    }
  }

  public function getName() {
    return 'Contact';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->mid);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->createdTime);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 10:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->type);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 11:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->status);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 21:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->relation);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 22:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->displayName);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 23:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->phoneticName);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 24:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->pictureStatus);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 25:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->thumbnailUrl);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 26:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->statusMessage);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 27:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->displayNameOverridden);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 28:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->favoriteTime);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 31:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->capableVoiceCall);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 32:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->capableVideoCall);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 33:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->capableMyhome);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 34:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->capableBuddy);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 35:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->attributes);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 36:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->settings);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 37:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->picturePath);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 38:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->recommendParams);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 39:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->friendRequestStatus);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 40:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->musicProfile);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 42:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->videoProfile);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('Contact');
    if ($this->mid !== null) {
      $xfer += $output->writeFieldBegin('mid', TType::STRING, 1);
      $xfer += $output->writeString($this->mid);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->createdTime !== null) {
      $xfer += $output->writeFieldBegin('createdTime', TType::I64, 2);
      $xfer += $output->writeI64($this->createdTime);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->type !== null) {
      $xfer += $output->writeFieldBegin('type', TType::I32, 10);
      $xfer += $output->writeI32($this->type);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->status !== null) {
      $xfer += $output->writeFieldBegin('status', TType::I32, 11);
      $xfer += $output->writeI32($this->status);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->relation !== null) {
      $xfer += $output->writeFieldBegin('relation', TType::I32, 21);
      $xfer += $output->writeI32($this->relation);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->displayName !== null) {
      $xfer += $output->writeFieldBegin('displayName', TType::STRING, 22);
      $xfer += $output->writeString($this->displayName);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->phoneticName !== null) {
      $xfer += $output->writeFieldBegin('phoneticName', TType::STRING, 23);
      $xfer += $output->writeString($this->phoneticName);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->pictureStatus !== null) {
      $xfer += $output->writeFieldBegin('pictureStatus', TType::STRING, 24);
      $xfer += $output->writeString($this->pictureStatus);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->thumbnailUrl !== null) {
      $xfer += $output->writeFieldBegin('thumbnailUrl', TType::STRING, 25);
      $xfer += $output->writeString($this->thumbnailUrl);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->statusMessage !== null) {
      $xfer += $output->writeFieldBegin('statusMessage', TType::STRING, 26);
      $xfer += $output->writeString($this->statusMessage);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->displayNameOverridden !== null) {
      $xfer += $output->writeFieldBegin('displayNameOverridden', TType::STRING, 27);
      $xfer += $output->writeString($this->displayNameOverridden);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->favoriteTime !== null) {
      $xfer += $output->writeFieldBegin('favoriteTime', TType::I64, 28);
      $xfer += $output->writeI64($this->favoriteTime);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->capableVoiceCall !== null) {
      $xfer += $output->writeFieldBegin('capableVoiceCall', TType::BOOL, 31);
      $xfer += $output->writeBool($this->capableVoiceCall);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->capableVideoCall !== null) {
      $xfer += $output->writeFieldBegin('capableVideoCall', TType::BOOL, 32);
      $xfer += $output->writeBool($this->capableVideoCall);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->capableMyhome !== null) {
      $xfer += $output->writeFieldBegin('capableMyhome', TType::BOOL, 33);
      $xfer += $output->writeBool($this->capableMyhome);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->capableBuddy !== null) {
      $xfer += $output->writeFieldBegin('capableBuddy', TType::BOOL, 34);
      $xfer += $output->writeBool($this->capableBuddy);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->attributes !== null) {
      $xfer += $output->writeFieldBegin('attributes', TType::I32, 35);
      $xfer += $output->writeI32($this->attributes);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->settings !== null) {
      $xfer += $output->writeFieldBegin('settings', TType::I64, 36);
      $xfer += $output->writeI64($this->settings);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->picturePath !== null) {
      $xfer += $output->writeFieldBegin('picturePath', TType::STRING, 37);
      $xfer += $output->writeString($this->picturePath);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->recommendParams !== null) {
      $xfer += $output->writeFieldBegin('recommendParams', TType::STRING, 38);
      $xfer += $output->writeString($this->recommendParams);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->friendRequestStatus !== null) {
      $xfer += $output->writeFieldBegin('friendRequestStatus', TType::I32, 39);
      $xfer += $output->writeI32($this->friendRequestStatus);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->musicProfile !== null) {
      $xfer += $output->writeFieldBegin('musicProfile', TType::STRING, 40);
      $xfer += $output->writeString($this->musicProfile);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->videoProfile !== null) {
      $xfer += $output->writeFieldBegin('videoProfile', TType::STRING, 42);
      $xfer += $output->writeString($this->videoProfile);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class BuddyList {
  static $_TSPEC;

  /**
   * @var string
   */
  public $classification = null;
  /**
   * @var string
   */
  public $displayName = null;
  /**
   * @var int
   */
  public $totalBuddyCount = null;
  /**
   * @var \Contact[]
   */
  public $popularContacts = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'classification',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'displayName',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'totalBuddyCount',
          'type' => TType::I32,
          ),
        4 => array(
          'var' => 'popularContacts',
          'type' => TType::LST,
          'etype' => TType::STRUCT,
          'elem' => array(
            'type' => TType::STRUCT,
            'class' => '\Contact',
            ),
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['classification'])) {
        $this->classification = $vals['classification'];
      }
      if (isset($vals['displayName'])) {
        $this->displayName = $vals['displayName'];
      }
      if (isset($vals['totalBuddyCount'])) {
        $this->totalBuddyCount = $vals['totalBuddyCount'];
      }
      if (isset($vals['popularContacts'])) {
        $this->popularContacts = $vals['popularContacts'];
      }
    }
  }

  public function getName() {
    return 'BuddyList';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->classification);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->displayName);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->totalBuddyCount);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::LST) {
            $this->popularContacts = array();
            $_size29 = 0;
            $_etype32 = 0;
            $xfer += $input->readListBegin($_etype32, $_size29);
            for ($_i33 = 0; $_i33 < $_size29; ++$_i33)
            {
              $elem34 = null;
              $elem34 = new \Contact();
              $xfer += $elem34->read($input);
              $this->popularContacts []= $elem34;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('BuddyList');
    if ($this->classification !== null) {
      $xfer += $output->writeFieldBegin('classification', TType::STRING, 1);
      $xfer += $output->writeString($this->classification);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->displayName !== null) {
      $xfer += $output->writeFieldBegin('displayName', TType::STRING, 2);
      $xfer += $output->writeString($this->displayName);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->totalBuddyCount !== null) {
      $xfer += $output->writeFieldBegin('totalBuddyCount', TType::I32, 3);
      $xfer += $output->writeI32($this->totalBuddyCount);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->popularContacts !== null) {
      if (!is_array($this->popularContacts)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('popularContacts', TType::LST, 4);
      {
        $output->writeListBegin(TType::STRUCT, count($this->popularContacts));
        {
          foreach ($this->popularContacts as $iter35)
          {
            $xfer += $iter35->write($output);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class Location {
  static $_TSPEC;

  /**
   * @var string
   */
  public $title = null;
  /**
   * @var string
   */
  public $address = null;
  /**
   * @var double
   */
  public $latitude = null;
  /**
   * @var double
   */
  public $longitude = null;
  /**
   * @var string
   */
  public $phone = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'title',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'address',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'latitude',
          'type' => TType::DOUBLE,
          ),
        4 => array(
          'var' => 'longitude',
          'type' => TType::DOUBLE,
          ),
        5 => array(
          'var' => 'phone',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['title'])) {
        $this->title = $vals['title'];
      }
      if (isset($vals['address'])) {
        $this->address = $vals['address'];
      }
      if (isset($vals['latitude'])) {
        $this->latitude = $vals['latitude'];
      }
      if (isset($vals['longitude'])) {
        $this->longitude = $vals['longitude'];
      }
      if (isset($vals['phone'])) {
        $this->phone = $vals['phone'];
      }
    }
  }

  public function getName() {
    return 'Location';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->title);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->address);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::DOUBLE) {
            $xfer += $input->readDouble($this->latitude);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::DOUBLE) {
            $xfer += $input->readDouble($this->longitude);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->phone);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('Location');
    if ($this->title !== null) {
      $xfer += $output->writeFieldBegin('title', TType::STRING, 1);
      $xfer += $output->writeString($this->title);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->address !== null) {
      $xfer += $output->writeFieldBegin('address', TType::STRING, 2);
      $xfer += $output->writeString($this->address);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->latitude !== null) {
      $xfer += $output->writeFieldBegin('latitude', TType::DOUBLE, 3);
      $xfer += $output->writeDouble($this->latitude);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->longitude !== null) {
      $xfer += $output->writeFieldBegin('longitude', TType::DOUBLE, 4);
      $xfer += $output->writeDouble($this->longitude);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->phone !== null) {
      $xfer += $output->writeFieldBegin('phone', TType::STRING, 5);
      $xfer += $output->writeString($this->phone);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class BuddyMessageRequest {
  static $_TSPEC;

  /**
   * @var int
   */
  public $contentType = null;
  /**
   * @var string
   */
  public $text = null;
  /**
   * @var \Location
   */
  public $location = null;
  /**
   * @var string
   */
  public $content = null;
  /**
   * @var array
   */
  public $contentMetadata = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'contentType',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'text',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'location',
          'type' => TType::STRUCT,
          'class' => '\Location',
          ),
        4 => array(
          'var' => 'content',
          'type' => TType::STRING,
          ),
        5 => array(
          'var' => 'contentMetadata',
          'type' => TType::MAP,
          'ktype' => TType::STRING,
          'vtype' => TType::STRING,
          'key' => array(
            'type' => TType::STRING,
          ),
          'val' => array(
            'type' => TType::STRING,
            ),
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['contentType'])) {
        $this->contentType = $vals['contentType'];
      }
      if (isset($vals['text'])) {
        $this->text = $vals['text'];
      }
      if (isset($vals['location'])) {
        $this->location = $vals['location'];
      }
      if (isset($vals['content'])) {
        $this->content = $vals['content'];
      }
      if (isset($vals['contentMetadata'])) {
        $this->contentMetadata = $vals['contentMetadata'];
      }
    }
  }

  public function getName() {
    return 'BuddyMessageRequest';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->contentType);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->text);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRUCT) {
            $this->location = new \Location();
            $xfer += $this->location->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->content);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::MAP) {
            $this->contentMetadata = array();
            $_size36 = 0;
            $_ktype37 = 0;
            $_vtype38 = 0;
            $xfer += $input->readMapBegin($_ktype37, $_vtype38, $_size36);
            for ($_i40 = 0; $_i40 < $_size36; ++$_i40)
            {
              $key41 = '';
              $val42 = '';
              $xfer += $input->readString($key41);
              $xfer += $input->readString($val42);
              $this->contentMetadata[$key41] = $val42;
            }
            $xfer += $input->readMapEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('BuddyMessageRequest');
    if ($this->contentType !== null) {
      $xfer += $output->writeFieldBegin('contentType', TType::I32, 1);
      $xfer += $output->writeI32($this->contentType);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->text !== null) {
      $xfer += $output->writeFieldBegin('text', TType::STRING, 2);
      $xfer += $output->writeString($this->text);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->location !== null) {
      if (!is_object($this->location)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('location', TType::STRUCT, 3);
      $xfer += $this->location->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->content !== null) {
      $xfer += $output->writeFieldBegin('content', TType::STRING, 4);
      $xfer += $output->writeString($this->content);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->contentMetadata !== null) {
      if (!is_array($this->contentMetadata)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('contentMetadata', TType::MAP, 5);
      {
        $output->writeMapBegin(TType::STRING, TType::STRING, count($this->contentMetadata));
        {
          foreach ($this->contentMetadata as $kiter43 => $viter44)
          {
            $xfer += $output->writeString($kiter43);
            $xfer += $output->writeString($viter44);
          }
        }
        $output->writeMapEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class BuddyOnAirUrls {
  static $_TSPEC;

  /**
   * @var array
   */
  public $hls = null;
  /**
   * @var array
   */
  public $smoothStreaming = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'hls',
          'type' => TType::MAP,
          'ktype' => TType::STRING,
          'vtype' => TType::STRING,
          'key' => array(
            'type' => TType::STRING,
          ),
          'val' => array(
            'type' => TType::STRING,
            ),
          ),
        2 => array(
          'var' => 'smoothStreaming',
          'type' => TType::MAP,
          'ktype' => TType::STRING,
          'vtype' => TType::STRING,
          'key' => array(
            'type' => TType::STRING,
          ),
          'val' => array(
            'type' => TType::STRING,
            ),
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['hls'])) {
        $this->hls = $vals['hls'];
      }
      if (isset($vals['smoothStreaming'])) {
        $this->smoothStreaming = $vals['smoothStreaming'];
      }
    }
  }

  public function getName() {
    return 'BuddyOnAirUrls';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::MAP) {
            $this->hls = array();
            $_size45 = 0;
            $_ktype46 = 0;
            $_vtype47 = 0;
            $xfer += $input->readMapBegin($_ktype46, $_vtype47, $_size45);
            for ($_i49 = 0; $_i49 < $_size45; ++$_i49)
            {
              $key50 = '';
              $val51 = '';
              $xfer += $input->readString($key50);
              $xfer += $input->readString($val51);
              $this->hls[$key50] = $val51;
            }
            $xfer += $input->readMapEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::MAP) {
            $this->smoothStreaming = array();
            $_size52 = 0;
            $_ktype53 = 0;
            $_vtype54 = 0;
            $xfer += $input->readMapBegin($_ktype53, $_vtype54, $_size52);
            for ($_i56 = 0; $_i56 < $_size52; ++$_i56)
            {
              $key57 = '';
              $val58 = '';
              $xfer += $input->readString($key57);
              $xfer += $input->readString($val58);
              $this->smoothStreaming[$key57] = $val58;
            }
            $xfer += $input->readMapEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('BuddyOnAirUrls');
    if ($this->hls !== null) {
      if (!is_array($this->hls)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('hls', TType::MAP, 1);
      {
        $output->writeMapBegin(TType::STRING, TType::STRING, count($this->hls));
        {
          foreach ($this->hls as $kiter59 => $viter60)
          {
            $xfer += $output->writeString($kiter59);
            $xfer += $output->writeString($viter60);
          }
        }
        $output->writeMapEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->smoothStreaming !== null) {
      if (!is_array($this->smoothStreaming)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('smoothStreaming', TType::MAP, 2);
      {
        $output->writeMapBegin(TType::STRING, TType::STRING, count($this->smoothStreaming));
        {
          foreach ($this->smoothStreaming as $kiter61 => $viter62)
          {
            $xfer += $output->writeString($kiter61);
            $xfer += $output->writeString($viter62);
          }
        }
        $output->writeMapEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class BuddyOnAir {
  static $_TSPEC;

  /**
   * @var string
   */
  public $mid = null;
  /**
   * @var int
   */
  public $freshnessLifetime = null;
  /**
   * @var string
   */
  public $onAirId = null;
  /**
   * @var bool
   */
  public $onAir = null;
  /**
   * @var string
   */
  public $text = null;
  /**
   * @var int
   */
  public $viewerCount = null;
  /**
   * @var int
   */
  public $targetCount = null;
  /**
   * @var int
   */
  public $onAirType = null;
  /**
   * @var \BuddyOnAirUrls
   */
  public $onAirUrls = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'mid',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'freshnessLifetime',
          'type' => TType::I64,
          ),
        4 => array(
          'var' => 'onAirId',
          'type' => TType::STRING,
          ),
        5 => array(
          'var' => 'onAir',
          'type' => TType::BOOL,
          ),
        11 => array(
          'var' => 'text',
          'type' => TType::STRING,
          ),
        12 => array(
          'var' => 'viewerCount',
          'type' => TType::I64,
          ),
        13 => array(
          'var' => 'targetCount',
          'type' => TType::I64,
          ),
        31 => array(
          'var' => 'onAirType',
          'type' => TType::I32,
          ),
        32 => array(
          'var' => 'onAirUrls',
          'type' => TType::STRUCT,
          'class' => '\BuddyOnAirUrls',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['mid'])) {
        $this->mid = $vals['mid'];
      }
      if (isset($vals['freshnessLifetime'])) {
        $this->freshnessLifetime = $vals['freshnessLifetime'];
      }
      if (isset($vals['onAirId'])) {
        $this->onAirId = $vals['onAirId'];
      }
      if (isset($vals['onAir'])) {
        $this->onAir = $vals['onAir'];
      }
      if (isset($vals['text'])) {
        $this->text = $vals['text'];
      }
      if (isset($vals['viewerCount'])) {
        $this->viewerCount = $vals['viewerCount'];
      }
      if (isset($vals['targetCount'])) {
        $this->targetCount = $vals['targetCount'];
      }
      if (isset($vals['onAirType'])) {
        $this->onAirType = $vals['onAirType'];
      }
      if (isset($vals['onAirUrls'])) {
        $this->onAirUrls = $vals['onAirUrls'];
      }
    }
  }

  public function getName() {
    return 'BuddyOnAir';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->mid);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->freshnessLifetime);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->onAirId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->onAir);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 11:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->text);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 12:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->viewerCount);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 13:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->targetCount);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 31:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->onAirType);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 32:
          if ($ftype == TType::STRUCT) {
            $this->onAirUrls = new \BuddyOnAirUrls();
            $xfer += $this->onAirUrls->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('BuddyOnAir');
    if ($this->mid !== null) {
      $xfer += $output->writeFieldBegin('mid', TType::STRING, 1);
      $xfer += $output->writeString($this->mid);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->freshnessLifetime !== null) {
      $xfer += $output->writeFieldBegin('freshnessLifetime', TType::I64, 3);
      $xfer += $output->writeI64($this->freshnessLifetime);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->onAirId !== null) {
      $xfer += $output->writeFieldBegin('onAirId', TType::STRING, 4);
      $xfer += $output->writeString($this->onAirId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->onAir !== null) {
      $xfer += $output->writeFieldBegin('onAir', TType::BOOL, 5);
      $xfer += $output->writeBool($this->onAir);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->text !== null) {
      $xfer += $output->writeFieldBegin('text', TType::STRING, 11);
      $xfer += $output->writeString($this->text);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->viewerCount !== null) {
      $xfer += $output->writeFieldBegin('viewerCount', TType::I64, 12);
      $xfer += $output->writeI64($this->viewerCount);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->targetCount !== null) {
      $xfer += $output->writeFieldBegin('targetCount', TType::I64, 13);
      $xfer += $output->writeI64($this->targetCount);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->onAirType !== null) {
      $xfer += $output->writeFieldBegin('onAirType', TType::I32, 31);
      $xfer += $output->writeI32($this->onAirType);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->onAirUrls !== null) {
      if (!is_object($this->onAirUrls)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('onAirUrls', TType::STRUCT, 32);
      $xfer += $this->onAirUrls->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class BuddyProfile {
  static $_TSPEC;

  /**
   * @var string
   */
  public $buddyId = null;
  /**
   * @var string
   */
  public $mid = null;
  /**
   * @var string
   */
  public $searchId = null;
  /**
   * @var string
   */
  public $displayName = null;
  /**
   * @var string
   */
  public $statusMessage = null;
  /**
   * @var int
   */
  public $contactCount = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'buddyId',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'mid',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'searchId',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'displayName',
          'type' => TType::STRING,
          ),
        5 => array(
          'var' => 'statusMessage',
          'type' => TType::STRING,
          ),
        11 => array(
          'var' => 'contactCount',
          'type' => TType::I64,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['buddyId'])) {
        $this->buddyId = $vals['buddyId'];
      }
      if (isset($vals['mid'])) {
        $this->mid = $vals['mid'];
      }
      if (isset($vals['searchId'])) {
        $this->searchId = $vals['searchId'];
      }
      if (isset($vals['displayName'])) {
        $this->displayName = $vals['displayName'];
      }
      if (isset($vals['statusMessage'])) {
        $this->statusMessage = $vals['statusMessage'];
      }
      if (isset($vals['contactCount'])) {
        $this->contactCount = $vals['contactCount'];
      }
    }
  }

  public function getName() {
    return 'BuddyProfile';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->buddyId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->mid);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->searchId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->displayName);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->statusMessage);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 11:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->contactCount);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('BuddyProfile');
    if ($this->buddyId !== null) {
      $xfer += $output->writeFieldBegin('buddyId', TType::STRING, 1);
      $xfer += $output->writeString($this->buddyId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->mid !== null) {
      $xfer += $output->writeFieldBegin('mid', TType::STRING, 2);
      $xfer += $output->writeString($this->mid);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->searchId !== null) {
      $xfer += $output->writeFieldBegin('searchId', TType::STRING, 3);
      $xfer += $output->writeString($this->searchId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->displayName !== null) {
      $xfer += $output->writeFieldBegin('displayName', TType::STRING, 4);
      $xfer += $output->writeString($this->displayName);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->statusMessage !== null) {
      $xfer += $output->writeFieldBegin('statusMessage', TType::STRING, 5);
      $xfer += $output->writeString($this->statusMessage);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->contactCount !== null) {
      $xfer += $output->writeFieldBegin('contactCount', TType::I64, 11);
      $xfer += $output->writeI64($this->contactCount);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class BuddySearchResult {
  static $_TSPEC;

  /**
   * @var string
   */
  public $mid = null;
  /**
   * @var string
   */
  public $displayName = null;
  /**
   * @var string
   */
  public $pictureStatus = null;
  /**
   * @var string
   */
  public $picturePath = null;
  /**
   * @var string
   */
  public $statusMessage = null;
  /**
   * @var bool
   */
  public $businessAccount = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'mid',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'displayName',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'pictureStatus',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'picturePath',
          'type' => TType::STRING,
          ),
        5 => array(
          'var' => 'statusMessage',
          'type' => TType::STRING,
          ),
        6 => array(
          'var' => 'businessAccount',
          'type' => TType::BOOL,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['mid'])) {
        $this->mid = $vals['mid'];
      }
      if (isset($vals['displayName'])) {
        $this->displayName = $vals['displayName'];
      }
      if (isset($vals['pictureStatus'])) {
        $this->pictureStatus = $vals['pictureStatus'];
      }
      if (isset($vals['picturePath'])) {
        $this->picturePath = $vals['picturePath'];
      }
      if (isset($vals['statusMessage'])) {
        $this->statusMessage = $vals['statusMessage'];
      }
      if (isset($vals['businessAccount'])) {
        $this->businessAccount = $vals['businessAccount'];
      }
    }
  }

  public function getName() {
    return 'BuddySearchResult';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->mid);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->displayName);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->pictureStatus);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->picturePath);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->statusMessage);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->businessAccount);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('BuddySearchResult');
    if ($this->mid !== null) {
      $xfer += $output->writeFieldBegin('mid', TType::STRING, 1);
      $xfer += $output->writeString($this->mid);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->displayName !== null) {
      $xfer += $output->writeFieldBegin('displayName', TType::STRING, 2);
      $xfer += $output->writeString($this->displayName);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->pictureStatus !== null) {
      $xfer += $output->writeFieldBegin('pictureStatus', TType::STRING, 3);
      $xfer += $output->writeString($this->pictureStatus);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->picturePath !== null) {
      $xfer += $output->writeFieldBegin('picturePath', TType::STRING, 4);
      $xfer += $output->writeString($this->picturePath);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->statusMessage !== null) {
      $xfer += $output->writeFieldBegin('statusMessage', TType::STRING, 5);
      $xfer += $output->writeString($this->statusMessage);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->businessAccount !== null) {
      $xfer += $output->writeFieldBegin('businessAccount', TType::BOOL, 6);
      $xfer += $output->writeBool($this->businessAccount);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ChannelDomain {
  static $_TSPEC;

  /**
   * @var string
   */
  public $host = null;
  /**
   * @var bool
   */
  public $removed = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'host',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'removed',
          'type' => TType::BOOL,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['host'])) {
        $this->host = $vals['host'];
      }
      if (isset($vals['removed'])) {
        $this->removed = $vals['removed'];
      }
    }
  }

  public function getName() {
    return 'ChannelDomain';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->host);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->removed);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ChannelDomain');
    if ($this->host !== null) {
      $xfer += $output->writeFieldBegin('host', TType::STRING, 1);
      $xfer += $output->writeString($this->host);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->removed !== null) {
      $xfer += $output->writeFieldBegin('removed', TType::BOOL, 2);
      $xfer += $output->writeBool($this->removed);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ChannelDomains {
  static $_TSPEC;

  /**
   * @var \ChannelDomain[]
   */
  public $channelDomains = null;
  /**
   * @var int
   */
  public $revision = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'channelDomains',
          'type' => TType::LST,
          'etype' => TType::STRUCT,
          'elem' => array(
            'type' => TType::STRUCT,
            'class' => '\ChannelDomain',
            ),
          ),
        2 => array(
          'var' => 'revision',
          'type' => TType::I64,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['channelDomains'])) {
        $this->channelDomains = $vals['channelDomains'];
      }
      if (isset($vals['revision'])) {
        $this->revision = $vals['revision'];
      }
    }
  }

  public function getName() {
    return 'ChannelDomains';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::LST) {
            $this->channelDomains = array();
            $_size63 = 0;
            $_etype66 = 0;
            $xfer += $input->readListBegin($_etype66, $_size63);
            for ($_i67 = 0; $_i67 < $_size63; ++$_i67)
            {
              $elem68 = null;
              $elem68 = new \ChannelDomain();
              $xfer += $elem68->read($input);
              $this->channelDomains []= $elem68;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->revision);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ChannelDomains');
    if ($this->channelDomains !== null) {
      if (!is_array($this->channelDomains)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('channelDomains', TType::LST, 1);
      {
        $output->writeListBegin(TType::STRUCT, count($this->channelDomains));
        {
          foreach ($this->channelDomains as $iter69)
          {
            $xfer += $iter69->write($output);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->revision !== null) {
      $xfer += $output->writeFieldBegin('revision', TType::I64, 2);
      $xfer += $output->writeI64($this->revision);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ChannelException extends TException {
  static $_TSPEC;

  /**
   * @var int
   */
  public $code = null;
  /**
   * @var string
   */
  public $reason = null;
  /**
   * @var array
   */
  public $parameterMap = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'code',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'reason',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'parameterMap',
          'type' => TType::MAP,
          'ktype' => TType::STRING,
          'vtype' => TType::STRING,
          'key' => array(
            'type' => TType::STRING,
          ),
          'val' => array(
            'type' => TType::STRING,
            ),
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['code'])) {
        $this->code = $vals['code'];
      }
      if (isset($vals['reason'])) {
        $this->reason = $vals['reason'];
      }
      if (isset($vals['parameterMap'])) {
        $this->parameterMap = $vals['parameterMap'];
      }
    }
  }

  public function getName() {
    return 'ChannelException';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->code);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->reason);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::MAP) {
            $this->parameterMap = array();
            $_size70 = 0;
            $_ktype71 = 0;
            $_vtype72 = 0;
            $xfer += $input->readMapBegin($_ktype71, $_vtype72, $_size70);
            for ($_i74 = 0; $_i74 < $_size70; ++$_i74)
            {
              $key75 = '';
              $val76 = '';
              $xfer += $input->readString($key75);
              $xfer += $input->readString($val76);
              $this->parameterMap[$key75] = $val76;
            }
            $xfer += $input->readMapEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ChannelException');
    if ($this->code !== null) {
      $xfer += $output->writeFieldBegin('code', TType::I32, 1);
      $xfer += $output->writeI32($this->code);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->reason !== null) {
      $xfer += $output->writeFieldBegin('reason', TType::STRING, 2);
      $xfer += $output->writeString($this->reason);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parameterMap !== null) {
      if (!is_array($this->parameterMap)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('parameterMap', TType::MAP, 3);
      {
        $output->writeMapBegin(TType::STRING, TType::STRING, count($this->parameterMap));
        {
          foreach ($this->parameterMap as $kiter77 => $viter78)
          {
            $xfer += $output->writeString($kiter77);
            $xfer += $output->writeString($viter78);
          }
        }
        $output->writeMapEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ChannelInfos {
  static $_TSPEC;

  /**
   * @var \ChannelInfo[]
   */
  public $channelInfos = null;
  /**
   * @var int
   */
  public $revision = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'channelInfos',
          'type' => TType::LST,
          'etype' => TType::STRUCT,
          'elem' => array(
            'type' => TType::STRUCT,
            'class' => '\ChannelInfo',
            ),
          ),
        2 => array(
          'var' => 'revision',
          'type' => TType::I64,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['channelInfos'])) {
        $this->channelInfos = $vals['channelInfos'];
      }
      if (isset($vals['revision'])) {
        $this->revision = $vals['revision'];
      }
    }
  }

  public function getName() {
    return 'ChannelInfos';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::LST) {
            $this->channelInfos = array();
            $_size79 = 0;
            $_etype82 = 0;
            $xfer += $input->readListBegin($_etype82, $_size79);
            for ($_i83 = 0; $_i83 < $_size79; ++$_i83)
            {
              $elem84 = null;
              $elem84 = new \ChannelInfo();
              $xfer += $elem84->read($input);
              $this->channelInfos []= $elem84;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->revision);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ChannelInfos');
    if ($this->channelInfos !== null) {
      if (!is_array($this->channelInfos)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('channelInfos', TType::LST, 1);
      {
        $output->writeListBegin(TType::STRUCT, count($this->channelInfos));
        {
          foreach ($this->channelInfos as $iter85)
          {
            $xfer += $iter85->write($output);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->revision !== null) {
      $xfer += $output->writeFieldBegin('revision', TType::I64, 2);
      $xfer += $output->writeI64($this->revision);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ChannelNotificationSetting {
  static $_TSPEC;

  /**
   * @var string
   */
  public $channelId = null;
  /**
   * @var string
   */
  public $name = null;
  /**
   * @var bool
   */
  public $notificationReceivable = null;
  /**
   * @var bool
   */
  public $messageReceivable = null;
  /**
   * @var bool
   */
  public $showDefault = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'channelId',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'name',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'notificationReceivable',
          'type' => TType::BOOL,
          ),
        4 => array(
          'var' => 'messageReceivable',
          'type' => TType::BOOL,
          ),
        5 => array(
          'var' => 'showDefault',
          'type' => TType::BOOL,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['channelId'])) {
        $this->channelId = $vals['channelId'];
      }
      if (isset($vals['name'])) {
        $this->name = $vals['name'];
      }
      if (isset($vals['notificationReceivable'])) {
        $this->notificationReceivable = $vals['notificationReceivable'];
      }
      if (isset($vals['messageReceivable'])) {
        $this->messageReceivable = $vals['messageReceivable'];
      }
      if (isset($vals['showDefault'])) {
        $this->showDefault = $vals['showDefault'];
      }
    }
  }

  public function getName() {
    return 'ChannelNotificationSetting';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->channelId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->name);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->notificationReceivable);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->messageReceivable);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->showDefault);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ChannelNotificationSetting');
    if ($this->channelId !== null) {
      $xfer += $output->writeFieldBegin('channelId', TType::STRING, 1);
      $xfer += $output->writeString($this->channelId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->name !== null) {
      $xfer += $output->writeFieldBegin('name', TType::STRING, 2);
      $xfer += $output->writeString($this->name);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->notificationReceivable !== null) {
      $xfer += $output->writeFieldBegin('notificationReceivable', TType::BOOL, 3);
      $xfer += $output->writeBool($this->notificationReceivable);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->messageReceivable !== null) {
      $xfer += $output->writeFieldBegin('messageReceivable', TType::BOOL, 4);
      $xfer += $output->writeBool($this->messageReceivable);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->showDefault !== null) {
      $xfer += $output->writeFieldBegin('showDefault', TType::BOOL, 5);
      $xfer += $output->writeBool($this->showDefault);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ChannelSyncDatas {
  static $_TSPEC;

  /**
   * @var \ChannelInfo[]
   */
  public $channelInfos = null;
  /**
   * @var \ChannelDomain[]
   */
  public $channelDomains = null;
  /**
   * @var int
   */
  public $revision = null;
  /**
   * @var int
   */
  public $expires = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'channelInfos',
          'type' => TType::LST,
          'etype' => TType::STRUCT,
          'elem' => array(
            'type' => TType::STRUCT,
            'class' => '\ChannelInfo',
            ),
          ),
        2 => array(
          'var' => 'channelDomains',
          'type' => TType::LST,
          'etype' => TType::STRUCT,
          'elem' => array(
            'type' => TType::STRUCT,
            'class' => '\ChannelDomain',
            ),
          ),
        3 => array(
          'var' => 'revision',
          'type' => TType::I64,
          ),
        4 => array(
          'var' => 'expires',
          'type' => TType::I64,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['channelInfos'])) {
        $this->channelInfos = $vals['channelInfos'];
      }
      if (isset($vals['channelDomains'])) {
        $this->channelDomains = $vals['channelDomains'];
      }
      if (isset($vals['revision'])) {
        $this->revision = $vals['revision'];
      }
      if (isset($vals['expires'])) {
        $this->expires = $vals['expires'];
      }
    }
  }

  public function getName() {
    return 'ChannelSyncDatas';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::LST) {
            $this->channelInfos = array();
            $_size86 = 0;
            $_etype89 = 0;
            $xfer += $input->readListBegin($_etype89, $_size86);
            for ($_i90 = 0; $_i90 < $_size86; ++$_i90)
            {
              $elem91 = null;
              $elem91 = new \ChannelInfo();
              $xfer += $elem91->read($input);
              $this->channelInfos []= $elem91;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::LST) {
            $this->channelDomains = array();
            $_size92 = 0;
            $_etype95 = 0;
            $xfer += $input->readListBegin($_etype95, $_size92);
            for ($_i96 = 0; $_i96 < $_size92; ++$_i96)
            {
              $elem97 = null;
              $elem97 = new \ChannelDomain();
              $xfer += $elem97->read($input);
              $this->channelDomains []= $elem97;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->revision);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->expires);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ChannelSyncDatas');
    if ($this->channelInfos !== null) {
      if (!is_array($this->channelInfos)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('channelInfos', TType::LST, 1);
      {
        $output->writeListBegin(TType::STRUCT, count($this->channelInfos));
        {
          foreach ($this->channelInfos as $iter98)
          {
            $xfer += $iter98->write($output);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->channelDomains !== null) {
      if (!is_array($this->channelDomains)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('channelDomains', TType::LST, 2);
      {
        $output->writeListBegin(TType::STRUCT, count($this->channelDomains));
        {
          foreach ($this->channelDomains as $iter99)
          {
            $xfer += $iter99->write($output);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->revision !== null) {
      $xfer += $output->writeFieldBegin('revision', TType::I64, 3);
      $xfer += $output->writeI64($this->revision);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->expires !== null) {
      $xfer += $output->writeFieldBegin('expires', TType::I64, 4);
      $xfer += $output->writeI64($this->expires);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ChannelToken {
  static $_TSPEC;

  /**
   * @var string
   */
  public $token = null;
  /**
   * @var string
   */
  public $obsToken = null;
  /**
   * @var int
   */
  public $expiration = null;
  /**
   * @var string
   */
  public $refreshToken = null;
  /**
   * @var string
   */
  public $channelAccessToken = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'token',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'obsToken',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'expiration',
          'type' => TType::I64,
          ),
        4 => array(
          'var' => 'refreshToken',
          'type' => TType::STRING,
          ),
        5 => array(
          'var' => 'channelAccessToken',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['token'])) {
        $this->token = $vals['token'];
      }
      if (isset($vals['obsToken'])) {
        $this->obsToken = $vals['obsToken'];
      }
      if (isset($vals['expiration'])) {
        $this->expiration = $vals['expiration'];
      }
      if (isset($vals['refreshToken'])) {
        $this->refreshToken = $vals['refreshToken'];
      }
      if (isset($vals['channelAccessToken'])) {
        $this->channelAccessToken = $vals['channelAccessToken'];
      }
    }
  }

  public function getName() {
    return 'ChannelToken';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->token);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->obsToken);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->expiration);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->refreshToken);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->channelAccessToken);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ChannelToken');
    if ($this->token !== null) {
      $xfer += $output->writeFieldBegin('token', TType::STRING, 1);
      $xfer += $output->writeString($this->token);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->obsToken !== null) {
      $xfer += $output->writeFieldBegin('obsToken', TType::STRING, 2);
      $xfer += $output->writeString($this->obsToken);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->expiration !== null) {
      $xfer += $output->writeFieldBegin('expiration', TType::I64, 3);
      $xfer += $output->writeI64($this->expiration);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->refreshToken !== null) {
      $xfer += $output->writeFieldBegin('refreshToken', TType::STRING, 4);
      $xfer += $output->writeString($this->refreshToken);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->channelAccessToken !== null) {
      $xfer += $output->writeFieldBegin('channelAccessToken', TType::STRING, 5);
      $xfer += $output->writeString($this->channelAccessToken);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class Coin {
  static $_TSPEC;

  /**
   * @var int
   */
  public $freeCoinBalance = null;
  /**
   * @var int
   */
  public $payedCoinBalance = null;
  /**
   * @var int
   */
  public $totalCoinBalance = null;
  /**
   * @var int
   */
  public $rewardCoinBalance = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'freeCoinBalance',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'payedCoinBalance',
          'type' => TType::I32,
          ),
        3 => array(
          'var' => 'totalCoinBalance',
          'type' => TType::I32,
          ),
        4 => array(
          'var' => 'rewardCoinBalance',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['freeCoinBalance'])) {
        $this->freeCoinBalance = $vals['freeCoinBalance'];
      }
      if (isset($vals['payedCoinBalance'])) {
        $this->payedCoinBalance = $vals['payedCoinBalance'];
      }
      if (isset($vals['totalCoinBalance'])) {
        $this->totalCoinBalance = $vals['totalCoinBalance'];
      }
      if (isset($vals['rewardCoinBalance'])) {
        $this->rewardCoinBalance = $vals['rewardCoinBalance'];
      }
    }
  }

  public function getName() {
    return 'Coin';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->freeCoinBalance);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->payedCoinBalance);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->totalCoinBalance);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->rewardCoinBalance);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('Coin');
    if ($this->freeCoinBalance !== null) {
      $xfer += $output->writeFieldBegin('freeCoinBalance', TType::I32, 1);
      $xfer += $output->writeI32($this->freeCoinBalance);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->payedCoinBalance !== null) {
      $xfer += $output->writeFieldBegin('payedCoinBalance', TType::I32, 2);
      $xfer += $output->writeI32($this->payedCoinBalance);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->totalCoinBalance !== null) {
      $xfer += $output->writeFieldBegin('totalCoinBalance', TType::I32, 3);
      $xfer += $output->writeI32($this->totalCoinBalance);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->rewardCoinBalance !== null) {
      $xfer += $output->writeFieldBegin('rewardCoinBalance', TType::I32, 4);
      $xfer += $output->writeI32($this->rewardCoinBalance);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class CoinPayLoad {
  static $_TSPEC;

  /**
   * @var int
   */
  public $payCoin = null;
  /**
   * @var int
   */
  public $freeCoin = null;
  /**
   * @var int
   */
  public $type = null;
  /**
   * @var int
   */
  public $rewardCoin = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'payCoin',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'freeCoin',
          'type' => TType::I32,
          ),
        3 => array(
          'var' => 'type',
          'type' => TType::I32,
          ),
        4 => array(
          'var' => 'rewardCoin',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['payCoin'])) {
        $this->payCoin = $vals['payCoin'];
      }
      if (isset($vals['freeCoin'])) {
        $this->freeCoin = $vals['freeCoin'];
      }
      if (isset($vals['type'])) {
        $this->type = $vals['type'];
      }
      if (isset($vals['rewardCoin'])) {
        $this->rewardCoin = $vals['rewardCoin'];
      }
    }
  }

  public function getName() {
    return 'CoinPayLoad';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->payCoin);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->freeCoin);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->type);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->rewardCoin);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('CoinPayLoad');
    if ($this->payCoin !== null) {
      $xfer += $output->writeFieldBegin('payCoin', TType::I32, 1);
      $xfer += $output->writeI32($this->payCoin);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->freeCoin !== null) {
      $xfer += $output->writeFieldBegin('freeCoin', TType::I32, 2);
      $xfer += $output->writeI32($this->freeCoin);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->type !== null) {
      $xfer += $output->writeFieldBegin('type', TType::I32, 3);
      $xfer += $output->writeI32($this->type);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->rewardCoin !== null) {
      $xfer += $output->writeFieldBegin('rewardCoin', TType::I32, 4);
      $xfer += $output->writeI32($this->rewardCoin);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class CoinHistory {
  static $_TSPEC;

  /**
   * @var int
   */
  public $payDate = null;
  /**
   * @var int
   */
  public $coinBalance = null;
  /**
   * @var int
   */
  public $coin = null;
  /**
   * @var string
   */
  public $price = null;
  /**
   * @var string
   */
  public $title = null;
  /**
   * @var bool
   */
  public $refund = null;
  /**
   * @var string
   */
  public $paySeq = null;
  /**
   * @var string
   */
  public $currency = null;
  /**
   * @var string
   */
  public $currencySign = null;
  /**
   * @var string
   */
  public $displayPrice = null;
  /**
   * @var \CoinPayLoad
   */
  public $payload = null;
  /**
   * @var string
   */
  public $channelId = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'payDate',
          'type' => TType::I64,
          ),
        2 => array(
          'var' => 'coinBalance',
          'type' => TType::I32,
          ),
        3 => array(
          'var' => 'coin',
          'type' => TType::I32,
          ),
        4 => array(
          'var' => 'price',
          'type' => TType::STRING,
          ),
        5 => array(
          'var' => 'title',
          'type' => TType::STRING,
          ),
        6 => array(
          'var' => 'refund',
          'type' => TType::BOOL,
          ),
        7 => array(
          'var' => 'paySeq',
          'type' => TType::STRING,
          ),
        8 => array(
          'var' => 'currency',
          'type' => TType::STRING,
          ),
        9 => array(
          'var' => 'currencySign',
          'type' => TType::STRING,
          ),
        10 => array(
          'var' => 'displayPrice',
          'type' => TType::STRING,
          ),
        11 => array(
          'var' => 'payload',
          'type' => TType::STRUCT,
          'class' => '\CoinPayLoad',
          ),
        12 => array(
          'var' => 'channelId',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['payDate'])) {
        $this->payDate = $vals['payDate'];
      }
      if (isset($vals['coinBalance'])) {
        $this->coinBalance = $vals['coinBalance'];
      }
      if (isset($vals['coin'])) {
        $this->coin = $vals['coin'];
      }
      if (isset($vals['price'])) {
        $this->price = $vals['price'];
      }
      if (isset($vals['title'])) {
        $this->title = $vals['title'];
      }
      if (isset($vals['refund'])) {
        $this->refund = $vals['refund'];
      }
      if (isset($vals['paySeq'])) {
        $this->paySeq = $vals['paySeq'];
      }
      if (isset($vals['currency'])) {
        $this->currency = $vals['currency'];
      }
      if (isset($vals['currencySign'])) {
        $this->currencySign = $vals['currencySign'];
      }
      if (isset($vals['displayPrice'])) {
        $this->displayPrice = $vals['displayPrice'];
      }
      if (isset($vals['payload'])) {
        $this->payload = $vals['payload'];
      }
      if (isset($vals['channelId'])) {
        $this->channelId = $vals['channelId'];
      }
    }
  }

  public function getName() {
    return 'CoinHistory';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->payDate);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->coinBalance);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->coin);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->price);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->title);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->refund);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->paySeq);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 8:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->currency);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 9:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->currencySign);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 10:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->displayPrice);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 11:
          if ($ftype == TType::STRUCT) {
            $this->payload = new \CoinPayLoad();
            $xfer += $this->payload->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 12:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->channelId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('CoinHistory');
    if ($this->payDate !== null) {
      $xfer += $output->writeFieldBegin('payDate', TType::I64, 1);
      $xfer += $output->writeI64($this->payDate);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->coinBalance !== null) {
      $xfer += $output->writeFieldBegin('coinBalance', TType::I32, 2);
      $xfer += $output->writeI32($this->coinBalance);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->coin !== null) {
      $xfer += $output->writeFieldBegin('coin', TType::I32, 3);
      $xfer += $output->writeI32($this->coin);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->price !== null) {
      $xfer += $output->writeFieldBegin('price', TType::STRING, 4);
      $xfer += $output->writeString($this->price);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->title !== null) {
      $xfer += $output->writeFieldBegin('title', TType::STRING, 5);
      $xfer += $output->writeString($this->title);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->refund !== null) {
      $xfer += $output->writeFieldBegin('refund', TType::BOOL, 6);
      $xfer += $output->writeBool($this->refund);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->paySeq !== null) {
      $xfer += $output->writeFieldBegin('paySeq', TType::STRING, 7);
      $xfer += $output->writeString($this->paySeq);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->currency !== null) {
      $xfer += $output->writeFieldBegin('currency', TType::STRING, 8);
      $xfer += $output->writeString($this->currency);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->currencySign !== null) {
      $xfer += $output->writeFieldBegin('currencySign', TType::STRING, 9);
      $xfer += $output->writeString($this->currencySign);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->displayPrice !== null) {
      $xfer += $output->writeFieldBegin('displayPrice', TType::STRING, 10);
      $xfer += $output->writeString($this->displayPrice);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->payload !== null) {
      if (!is_object($this->payload)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('payload', TType::STRUCT, 11);
      $xfer += $this->payload->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->channelId !== null) {
      $xfer += $output->writeFieldBegin('channelId', TType::STRING, 12);
      $xfer += $output->writeString($this->channelId);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class CoinHistoryCondition {
  static $_TSPEC;

  /**
   * @var int
   */
  public $start = null;
  /**
   * @var int
   */
  public $size = null;
  /**
   * @var string
   */
  public $language = null;
  /**
   * @var string
   */
  public $eddt = null;
  /**
   * @var int
   */
  public $appStoreCode = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'start',
          'type' => TType::I64,
          ),
        2 => array(
          'var' => 'size',
          'type' => TType::I32,
          ),
        3 => array(
          'var' => 'language',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'eddt',
          'type' => TType::STRING,
          ),
        5 => array(
          'var' => 'appStoreCode',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['start'])) {
        $this->start = $vals['start'];
      }
      if (isset($vals['size'])) {
        $this->size = $vals['size'];
      }
      if (isset($vals['language'])) {
        $this->language = $vals['language'];
      }
      if (isset($vals['eddt'])) {
        $this->eddt = $vals['eddt'];
      }
      if (isset($vals['appStoreCode'])) {
        $this->appStoreCode = $vals['appStoreCode'];
      }
    }
  }

  public function getName() {
    return 'CoinHistoryCondition';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->start);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->size);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->language);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->eddt);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->appStoreCode);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('CoinHistoryCondition');
    if ($this->start !== null) {
      $xfer += $output->writeFieldBegin('start', TType::I64, 1);
      $xfer += $output->writeI64($this->start);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->size !== null) {
      $xfer += $output->writeFieldBegin('size', TType::I32, 2);
      $xfer += $output->writeI32($this->size);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->language !== null) {
      $xfer += $output->writeFieldBegin('language', TType::STRING, 3);
      $xfer += $output->writeString($this->language);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->eddt !== null) {
      $xfer += $output->writeFieldBegin('eddt', TType::STRING, 4);
      $xfer += $output->writeString($this->eddt);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->appStoreCode !== null) {
      $xfer += $output->writeFieldBegin('appStoreCode', TType::I32, 5);
      $xfer += $output->writeI32($this->appStoreCode);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class CoinHistoryResult {
  static $_TSPEC;

  /**
   * @var \CoinHistory[]
   */
  public $historys = null;
  /**
   * @var \Coin
   */
  public $balance = null;
  /**
   * @var bool
   */
  public $hasNext = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'historys',
          'type' => TType::LST,
          'etype' => TType::STRUCT,
          'elem' => array(
            'type' => TType::STRUCT,
            'class' => '\CoinHistory',
            ),
          ),
        2 => array(
          'var' => 'balance',
          'type' => TType::STRUCT,
          'class' => '\Coin',
          ),
        3 => array(
          'var' => 'hasNext',
          'type' => TType::BOOL,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['historys'])) {
        $this->historys = $vals['historys'];
      }
      if (isset($vals['balance'])) {
        $this->balance = $vals['balance'];
      }
      if (isset($vals['hasNext'])) {
        $this->hasNext = $vals['hasNext'];
      }
    }
  }

  public function getName() {
    return 'CoinHistoryResult';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::LST) {
            $this->historys = array();
            $_size100 = 0;
            $_etype103 = 0;
            $xfer += $input->readListBegin($_etype103, $_size100);
            for ($_i104 = 0; $_i104 < $_size100; ++$_i104)
            {
              $elem105 = null;
              $elem105 = new \CoinHistory();
              $xfer += $elem105->read($input);
              $this->historys []= $elem105;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->balance = new \Coin();
            $xfer += $this->balance->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->hasNext);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('CoinHistoryResult');
    if ($this->historys !== null) {
      if (!is_array($this->historys)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('historys', TType::LST, 1);
      {
        $output->writeListBegin(TType::STRUCT, count($this->historys));
        {
          foreach ($this->historys as $iter106)
          {
            $xfer += $iter106->write($output);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->balance !== null) {
      if (!is_object($this->balance)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('balance', TType::STRUCT, 2);
      $xfer += $this->balance->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->hasNext !== null) {
      $xfer += $output->writeFieldBegin('hasNext', TType::BOOL, 3);
      $xfer += $output->writeBool($this->hasNext);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class CoinProductItem {
  static $_TSPEC;

  /**
   * @var string
   */
  public $itemId = null;
  /**
   * @var int
   */
  public $coin = null;
  /**
   * @var int
   */
  public $freeCoin = null;
  /**
   * @var string
   */
  public $currency = null;
  /**
   * @var string
   */
  public $price = null;
  /**
   * @var string
   */
  public $displayPrice = null;
  /**
   * @var string
   */
  public $name = null;
  /**
   * @var string
   */
  public $desc = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'itemId',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'coin',
          'type' => TType::I32,
          ),
        3 => array(
          'var' => 'freeCoin',
          'type' => TType::I32,
          ),
        5 => array(
          'var' => 'currency',
          'type' => TType::STRING,
          ),
        6 => array(
          'var' => 'price',
          'type' => TType::STRING,
          ),
        7 => array(
          'var' => 'displayPrice',
          'type' => TType::STRING,
          ),
        8 => array(
          'var' => 'name',
          'type' => TType::STRING,
          ),
        9 => array(
          'var' => 'desc',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['itemId'])) {
        $this->itemId = $vals['itemId'];
      }
      if (isset($vals['coin'])) {
        $this->coin = $vals['coin'];
      }
      if (isset($vals['freeCoin'])) {
        $this->freeCoin = $vals['freeCoin'];
      }
      if (isset($vals['currency'])) {
        $this->currency = $vals['currency'];
      }
      if (isset($vals['price'])) {
        $this->price = $vals['price'];
      }
      if (isset($vals['displayPrice'])) {
        $this->displayPrice = $vals['displayPrice'];
      }
      if (isset($vals['name'])) {
        $this->name = $vals['name'];
      }
      if (isset($vals['desc'])) {
        $this->desc = $vals['desc'];
      }
    }
  }

  public function getName() {
    return 'CoinProductItem';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->itemId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->coin);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->freeCoin);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->currency);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->price);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->displayPrice);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 8:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->name);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 9:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->desc);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('CoinProductItem');
    if ($this->itemId !== null) {
      $xfer += $output->writeFieldBegin('itemId', TType::STRING, 1);
      $xfer += $output->writeString($this->itemId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->coin !== null) {
      $xfer += $output->writeFieldBegin('coin', TType::I32, 2);
      $xfer += $output->writeI32($this->coin);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->freeCoin !== null) {
      $xfer += $output->writeFieldBegin('freeCoin', TType::I32, 3);
      $xfer += $output->writeI32($this->freeCoin);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->currency !== null) {
      $xfer += $output->writeFieldBegin('currency', TType::STRING, 5);
      $xfer += $output->writeString($this->currency);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->price !== null) {
      $xfer += $output->writeFieldBegin('price', TType::STRING, 6);
      $xfer += $output->writeString($this->price);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->displayPrice !== null) {
      $xfer += $output->writeFieldBegin('displayPrice', TType::STRING, 7);
      $xfer += $output->writeString($this->displayPrice);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->name !== null) {
      $xfer += $output->writeFieldBegin('name', TType::STRING, 8);
      $xfer += $output->writeString($this->name);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->desc !== null) {
      $xfer += $output->writeFieldBegin('desc', TType::STRING, 9);
      $xfer += $output->writeString($this->desc);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class CoinPurchaseConfirm {
  static $_TSPEC;

  /**
   * @var string
   */
  public $orderId = null;
  /**
   * @var int
   */
  public $appStoreCode = null;
  /**
   * @var string
   */
  public $receipt = null;
  /**
   * @var string
   */
  public $signature = null;
  /**
   * @var string
   */
  public $seller = null;
  /**
   * @var string
   */
  public $requestType = null;
  /**
   * @var bool
   */
  public $ignoreReceipt = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'orderId',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'appStoreCode',
          'type' => TType::I32,
          ),
        3 => array(
          'var' => 'receipt',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'signature',
          'type' => TType::STRING,
          ),
        5 => array(
          'var' => 'seller',
          'type' => TType::STRING,
          ),
        6 => array(
          'var' => 'requestType',
          'type' => TType::STRING,
          ),
        7 => array(
          'var' => 'ignoreReceipt',
          'type' => TType::BOOL,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['orderId'])) {
        $this->orderId = $vals['orderId'];
      }
      if (isset($vals['appStoreCode'])) {
        $this->appStoreCode = $vals['appStoreCode'];
      }
      if (isset($vals['receipt'])) {
        $this->receipt = $vals['receipt'];
      }
      if (isset($vals['signature'])) {
        $this->signature = $vals['signature'];
      }
      if (isset($vals['seller'])) {
        $this->seller = $vals['seller'];
      }
      if (isset($vals['requestType'])) {
        $this->requestType = $vals['requestType'];
      }
      if (isset($vals['ignoreReceipt'])) {
        $this->ignoreReceipt = $vals['ignoreReceipt'];
      }
    }
  }

  public function getName() {
    return 'CoinPurchaseConfirm';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->orderId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->appStoreCode);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->receipt);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->signature);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->seller);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->requestType);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->ignoreReceipt);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('CoinPurchaseConfirm');
    if ($this->orderId !== null) {
      $xfer += $output->writeFieldBegin('orderId', TType::STRING, 1);
      $xfer += $output->writeString($this->orderId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->appStoreCode !== null) {
      $xfer += $output->writeFieldBegin('appStoreCode', TType::I32, 2);
      $xfer += $output->writeI32($this->appStoreCode);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->receipt !== null) {
      $xfer += $output->writeFieldBegin('receipt', TType::STRING, 3);
      $xfer += $output->writeString($this->receipt);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->signature !== null) {
      $xfer += $output->writeFieldBegin('signature', TType::STRING, 4);
      $xfer += $output->writeString($this->signature);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->seller !== null) {
      $xfer += $output->writeFieldBegin('seller', TType::STRING, 5);
      $xfer += $output->writeString($this->seller);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->requestType !== null) {
      $xfer += $output->writeFieldBegin('requestType', TType::STRING, 6);
      $xfer += $output->writeString($this->requestType);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ignoreReceipt !== null) {
      $xfer += $output->writeFieldBegin('ignoreReceipt', TType::BOOL, 7);
      $xfer += $output->writeBool($this->ignoreReceipt);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class CoinPurchaseReservation {
  static $_TSPEC;

  /**
   * @var string
   */
  public $productId = null;
  /**
   * @var string
   */
  public $country = null;
  /**
   * @var string
   */
  public $currency = null;
  /**
   * @var string
   */
  public $price = null;
  /**
   * @var int
   */
  public $appStoreCode = null;
  /**
   * @var string
   */
  public $language = null;
  /**
   * @var int
   */
  public $pgCode = null;
  /**
   * @var string
   */
  public $redirectUrl = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'productId',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'country',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'currency',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'price',
          'type' => TType::STRING,
          ),
        5 => array(
          'var' => 'appStoreCode',
          'type' => TType::I32,
          ),
        6 => array(
          'var' => 'language',
          'type' => TType::STRING,
          ),
        7 => array(
          'var' => 'pgCode',
          'type' => TType::I32,
          ),
        8 => array(
          'var' => 'redirectUrl',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['productId'])) {
        $this->productId = $vals['productId'];
      }
      if (isset($vals['country'])) {
        $this->country = $vals['country'];
      }
      if (isset($vals['currency'])) {
        $this->currency = $vals['currency'];
      }
      if (isset($vals['price'])) {
        $this->price = $vals['price'];
      }
      if (isset($vals['appStoreCode'])) {
        $this->appStoreCode = $vals['appStoreCode'];
      }
      if (isset($vals['language'])) {
        $this->language = $vals['language'];
      }
      if (isset($vals['pgCode'])) {
        $this->pgCode = $vals['pgCode'];
      }
      if (isset($vals['redirectUrl'])) {
        $this->redirectUrl = $vals['redirectUrl'];
      }
    }
  }

  public function getName() {
    return 'CoinPurchaseReservation';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->productId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->country);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->currency);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->price);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->appStoreCode);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->language);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->pgCode);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 8:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->redirectUrl);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('CoinPurchaseReservation');
    if ($this->productId !== null) {
      $xfer += $output->writeFieldBegin('productId', TType::STRING, 1);
      $xfer += $output->writeString($this->productId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->country !== null) {
      $xfer += $output->writeFieldBegin('country', TType::STRING, 2);
      $xfer += $output->writeString($this->country);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->currency !== null) {
      $xfer += $output->writeFieldBegin('currency', TType::STRING, 3);
      $xfer += $output->writeString($this->currency);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->price !== null) {
      $xfer += $output->writeFieldBegin('price', TType::STRING, 4);
      $xfer += $output->writeString($this->price);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->appStoreCode !== null) {
      $xfer += $output->writeFieldBegin('appStoreCode', TType::I32, 5);
      $xfer += $output->writeI32($this->appStoreCode);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->language !== null) {
      $xfer += $output->writeFieldBegin('language', TType::STRING, 6);
      $xfer += $output->writeString($this->language);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->pgCode !== null) {
      $xfer += $output->writeFieldBegin('pgCode', TType::I32, 7);
      $xfer += $output->writeI32($this->pgCode);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->redirectUrl !== null) {
      $xfer += $output->writeFieldBegin('redirectUrl', TType::STRING, 8);
      $xfer += $output->writeString($this->redirectUrl);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class CoinUseReservationItem {
  static $_TSPEC;

  /**
   * @var string
   */
  public $itemId = null;
  /**
   * @var string
   */
  public $itemName = null;
  /**
   * @var int
   */
  public $amount = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'itemId',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'itemName',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'amount',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['itemId'])) {
        $this->itemId = $vals['itemId'];
      }
      if (isset($vals['itemName'])) {
        $this->itemName = $vals['itemName'];
      }
      if (isset($vals['amount'])) {
        $this->amount = $vals['amount'];
      }
    }
  }

  public function getName() {
    return 'CoinUseReservationItem';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->itemId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->itemName);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->amount);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('CoinUseReservationItem');
    if ($this->itemId !== null) {
      $xfer += $output->writeFieldBegin('itemId', TType::STRING, 1);
      $xfer += $output->writeString($this->itemId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->itemName !== null) {
      $xfer += $output->writeFieldBegin('itemName', TType::STRING, 2);
      $xfer += $output->writeString($this->itemName);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->amount !== null) {
      $xfer += $output->writeFieldBegin('amount', TType::I32, 3);
      $xfer += $output->writeI32($this->amount);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class CoinUseReservation {
  static $_TSPEC;

  /**
   * @var string
   */
  public $channelId = null;
  /**
   * @var string
   */
  public $shopOrderId = null;
  /**
   * @var int
   */
  public $appStoreCode = null;
  /**
   * @var \CoinUseReservationItem[]
   */
  public $items = null;
  /**
   * @var string
   */
  public $country = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'channelId',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'shopOrderId',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'appStoreCode',
          'type' => TType::I32,
          ),
        4 => array(
          'var' => 'items',
          'type' => TType::LST,
          'etype' => TType::STRUCT,
          'elem' => array(
            'type' => TType::STRUCT,
            'class' => '\CoinUseReservationItem',
            ),
          ),
        5 => array(
          'var' => 'country',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['channelId'])) {
        $this->channelId = $vals['channelId'];
      }
      if (isset($vals['shopOrderId'])) {
        $this->shopOrderId = $vals['shopOrderId'];
      }
      if (isset($vals['appStoreCode'])) {
        $this->appStoreCode = $vals['appStoreCode'];
      }
      if (isset($vals['items'])) {
        $this->items = $vals['items'];
      }
      if (isset($vals['country'])) {
        $this->country = $vals['country'];
      }
    }
  }

  public function getName() {
    return 'CoinUseReservation';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->channelId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->shopOrderId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->appStoreCode);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::LST) {
            $this->items = array();
            $_size107 = 0;
            $_etype110 = 0;
            $xfer += $input->readListBegin($_etype110, $_size107);
            for ($_i111 = 0; $_i111 < $_size107; ++$_i111)
            {
              $elem112 = null;
              $elem112 = new \CoinUseReservationItem();
              $xfer += $elem112->read($input);
              $this->items []= $elem112;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->country);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('CoinUseReservation');
    if ($this->channelId !== null) {
      $xfer += $output->writeFieldBegin('channelId', TType::STRING, 1);
      $xfer += $output->writeString($this->channelId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->shopOrderId !== null) {
      $xfer += $output->writeFieldBegin('shopOrderId', TType::STRING, 2);
      $xfer += $output->writeString($this->shopOrderId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->appStoreCode !== null) {
      $xfer += $output->writeFieldBegin('appStoreCode', TType::I32, 3);
      $xfer += $output->writeI32($this->appStoreCode);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->items !== null) {
      if (!is_array($this->items)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('items', TType::LST, 4);
      {
        $output->writeListBegin(TType::STRUCT, count($this->items));
        {
          foreach ($this->items as $iter113)
          {
            $xfer += $iter113->write($output);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->country !== null) {
      $xfer += $output->writeFieldBegin('country', TType::STRING, 5);
      $xfer += $output->writeString($this->country);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class CompactContact {
  static $_TSPEC;

  /**
   * @var string
   */
  public $mid = null;
  /**
   * @var int
   */
  public $createdTime = null;
  /**
   * @var int
   */
  public $modifiedTime = null;
  /**
   * @var int
   */
  public $status = null;
  /**
   * @var int
   */
  public $settings = null;
  /**
   * @var string
   */
  public $displayNameOverridden = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'mid',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'createdTime',
          'type' => TType::I64,
          ),
        3 => array(
          'var' => 'modifiedTime',
          'type' => TType::I64,
          ),
        4 => array(
          'var' => 'status',
          'type' => TType::I32,
          ),
        5 => array(
          'var' => 'settings',
          'type' => TType::I64,
          ),
        6 => array(
          'var' => 'displayNameOverridden',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['mid'])) {
        $this->mid = $vals['mid'];
      }
      if (isset($vals['createdTime'])) {
        $this->createdTime = $vals['createdTime'];
      }
      if (isset($vals['modifiedTime'])) {
        $this->modifiedTime = $vals['modifiedTime'];
      }
      if (isset($vals['status'])) {
        $this->status = $vals['status'];
      }
      if (isset($vals['settings'])) {
        $this->settings = $vals['settings'];
      }
      if (isset($vals['displayNameOverridden'])) {
        $this->displayNameOverridden = $vals['displayNameOverridden'];
      }
    }
  }

  public function getName() {
    return 'CompactContact';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->mid);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->createdTime);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->modifiedTime);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->status);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->settings);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->displayNameOverridden);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('CompactContact');
    if ($this->mid !== null) {
      $xfer += $output->writeFieldBegin('mid', TType::STRING, 1);
      $xfer += $output->writeString($this->mid);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->createdTime !== null) {
      $xfer += $output->writeFieldBegin('createdTime', TType::I64, 2);
      $xfer += $output->writeI64($this->createdTime);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->modifiedTime !== null) {
      $xfer += $output->writeFieldBegin('modifiedTime', TType::I64, 3);
      $xfer += $output->writeI64($this->modifiedTime);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->status !== null) {
      $xfer += $output->writeFieldBegin('status', TType::I32, 4);
      $xfer += $output->writeI32($this->status);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->settings !== null) {
      $xfer += $output->writeFieldBegin('settings', TType::I64, 5);
      $xfer += $output->writeI64($this->settings);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->displayNameOverridden !== null) {
      $xfer += $output->writeFieldBegin('displayNameOverridden', TType::STRING, 6);
      $xfer += $output->writeString($this->displayNameOverridden);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ContactModification {
  static $_TSPEC;

  /**
   * @var int
   */
  public $type = null;
  /**
   * @var string
   */
  public $luid = null;
  /**
   * @var string[]
   */
  public $phones = null;
  /**
   * @var string[]
   */
  public $emails = null;
  /**
   * @var string[]
   */
  public $userids = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'type',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'luid',
          'type' => TType::STRING,
          ),
        11 => array(
          'var' => 'phones',
          'type' => TType::LST,
          'etype' => TType::STRING,
          'elem' => array(
            'type' => TType::STRING,
            ),
          ),
        12 => array(
          'var' => 'emails',
          'type' => TType::LST,
          'etype' => TType::STRING,
          'elem' => array(
            'type' => TType::STRING,
            ),
          ),
        13 => array(
          'var' => 'userids',
          'type' => TType::LST,
          'etype' => TType::STRING,
          'elem' => array(
            'type' => TType::STRING,
            ),
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['type'])) {
        $this->type = $vals['type'];
      }
      if (isset($vals['luid'])) {
        $this->luid = $vals['luid'];
      }
      if (isset($vals['phones'])) {
        $this->phones = $vals['phones'];
      }
      if (isset($vals['emails'])) {
        $this->emails = $vals['emails'];
      }
      if (isset($vals['userids'])) {
        $this->userids = $vals['userids'];
      }
    }
  }

  public function getName() {
    return 'ContactModification';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->type);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->luid);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 11:
          if ($ftype == TType::LST) {
            $this->phones = array();
            $_size114 = 0;
            $_etype117 = 0;
            $xfer += $input->readListBegin($_etype117, $_size114);
            for ($_i118 = 0; $_i118 < $_size114; ++$_i118)
            {
              $elem119 = null;
              $xfer += $input->readString($elem119);
              $this->phones []= $elem119;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 12:
          if ($ftype == TType::LST) {
            $this->emails = array();
            $_size120 = 0;
            $_etype123 = 0;
            $xfer += $input->readListBegin($_etype123, $_size120);
            for ($_i124 = 0; $_i124 < $_size120; ++$_i124)
            {
              $elem125 = null;
              $xfer += $input->readString($elem125);
              $this->emails []= $elem125;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 13:
          if ($ftype == TType::LST) {
            $this->userids = array();
            $_size126 = 0;
            $_etype129 = 0;
            $xfer += $input->readListBegin($_etype129, $_size126);
            for ($_i130 = 0; $_i130 < $_size126; ++$_i130)
            {
              $elem131 = null;
              $xfer += $input->readString($elem131);
              $this->userids []= $elem131;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ContactModification');
    if ($this->type !== null) {
      $xfer += $output->writeFieldBegin('type', TType::I32, 1);
      $xfer += $output->writeI32($this->type);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->luid !== null) {
      $xfer += $output->writeFieldBegin('luid', TType::STRING, 2);
      $xfer += $output->writeString($this->luid);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->phones !== null) {
      if (!is_array($this->phones)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('phones', TType::LST, 11);
      {
        $output->writeListBegin(TType::STRING, count($this->phones));
        {
          foreach ($this->phones as $iter132)
          {
            $xfer += $output->writeString($iter132);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->emails !== null) {
      if (!is_array($this->emails)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('emails', TType::LST, 12);
      {
        $output->writeListBegin(TType::STRING, count($this->emails));
        {
          foreach ($this->emails as $iter133)
          {
            $xfer += $output->writeString($iter133);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->userids !== null) {
      if (!is_array($this->userids)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('userids', TType::LST, 13);
      {
        $output->writeListBegin(TType::STRING, count($this->userids));
        {
          foreach ($this->userids as $iter134)
          {
            $xfer += $output->writeString($iter134);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ContactRegistration {
  static $_TSPEC;

  /**
   * @var \Contact
   */
  public $contact = null;
  /**
   * @var string
   */
  public $luid = null;
  /**
   * @var int
   */
  public $contactType = null;
  /**
   * @var string
   */
  public $contactKey = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'contact',
          'type' => TType::STRUCT,
          'class' => '\Contact',
          ),
        10 => array(
          'var' => 'luid',
          'type' => TType::STRING,
          ),
        11 => array(
          'var' => 'contactType',
          'type' => TType::I32,
          ),
        12 => array(
          'var' => 'contactKey',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['contact'])) {
        $this->contact = $vals['contact'];
      }
      if (isset($vals['luid'])) {
        $this->luid = $vals['luid'];
      }
      if (isset($vals['contactType'])) {
        $this->contactType = $vals['contactType'];
      }
      if (isset($vals['contactKey'])) {
        $this->contactKey = $vals['contactKey'];
      }
    }
  }

  public function getName() {
    return 'ContactRegistration';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->contact = new \Contact();
            $xfer += $this->contact->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 10:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->luid);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 11:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->contactType);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 12:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->contactKey);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ContactRegistration');
    if ($this->contact !== null) {
      if (!is_object($this->contact)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('contact', TType::STRUCT, 1);
      $xfer += $this->contact->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->luid !== null) {
      $xfer += $output->writeFieldBegin('luid', TType::STRING, 10);
      $xfer += $output->writeString($this->luid);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->contactType !== null) {
      $xfer += $output->writeFieldBegin('contactType', TType::I32, 11);
      $xfer += $output->writeI32($this->contactType);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->contactKey !== null) {
      $xfer += $output->writeFieldBegin('contactKey', TType::STRING, 12);
      $xfer += $output->writeString($this->contactKey);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ContactReport {
  static $_TSPEC;

  /**
   * @var string
   */
  public $mid = null;
  /**
   * @var bool
   */
  public $exists = null;
  /**
   * @var \Contact
   */
  public $contact = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'mid',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'exists',
          'type' => TType::BOOL,
          ),
        3 => array(
          'var' => 'contact',
          'type' => TType::STRUCT,
          'class' => '\Contact',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['mid'])) {
        $this->mid = $vals['mid'];
      }
      if (isset($vals['exists'])) {
        $this->exists = $vals['exists'];
      }
      if (isset($vals['contact'])) {
        $this->contact = $vals['contact'];
      }
    }
  }

  public function getName() {
    return 'ContactReport';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->mid);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->exists);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRUCT) {
            $this->contact = new \Contact();
            $xfer += $this->contact->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ContactReport');
    if ($this->mid !== null) {
      $xfer += $output->writeFieldBegin('mid', TType::STRING, 1);
      $xfer += $output->writeString($this->mid);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->exists !== null) {
      $xfer += $output->writeFieldBegin('exists', TType::BOOL, 2);
      $xfer += $output->writeBool($this->exists);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->contact !== null) {
      if (!is_object($this->contact)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('contact', TType::STRUCT, 3);
      $xfer += $this->contact->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ContactReportResult {
  static $_TSPEC;

  /**
   * @var string
   */
  public $mid = null;
  /**
   * @var bool
   */
  public $exists = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'mid',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'exists',
          'type' => TType::BOOL,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['mid'])) {
        $this->mid = $vals['mid'];
      }
      if (isset($vals['exists'])) {
        $this->exists = $vals['exists'];
      }
    }
  }

  public function getName() {
    return 'ContactReportResult';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->mid);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->exists);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ContactReportResult');
    if ($this->mid !== null) {
      $xfer += $output->writeFieldBegin('mid', TType::STRING, 1);
      $xfer += $output->writeString($this->mid);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->exists !== null) {
      $xfer += $output->writeFieldBegin('exists', TType::BOOL, 2);
      $xfer += $output->writeBool($this->exists);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class DeviceInfo {
  static $_TSPEC;

  /**
   * @var string
   */
  public $deviceName = null;
  /**
   * @var string
   */
  public $systemName = null;
  /**
   * @var string
   */
  public $systemVersion = null;
  /**
   * @var string
   */
  public $model = null;
  /**
   * @var int
   */
  public $carrierCode = null;
  /**
   * @var string
   */
  public $carrierName = null;
  /**
   * @var int
   */
  public $applicationType = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'deviceName',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'systemName',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'systemVersion',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'model',
          'type' => TType::STRING,
          ),
        10 => array(
          'var' => 'carrierCode',
          'type' => TType::I32,
          ),
        11 => array(
          'var' => 'carrierName',
          'type' => TType::STRING,
          ),
        20 => array(
          'var' => 'applicationType',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['deviceName'])) {
        $this->deviceName = $vals['deviceName'];
      }
      if (isset($vals['systemName'])) {
        $this->systemName = $vals['systemName'];
      }
      if (isset($vals['systemVersion'])) {
        $this->systemVersion = $vals['systemVersion'];
      }
      if (isset($vals['model'])) {
        $this->model = $vals['model'];
      }
      if (isset($vals['carrierCode'])) {
        $this->carrierCode = $vals['carrierCode'];
      }
      if (isset($vals['carrierName'])) {
        $this->carrierName = $vals['carrierName'];
      }
      if (isset($vals['applicationType'])) {
        $this->applicationType = $vals['applicationType'];
      }
    }
  }

  public function getName() {
    return 'DeviceInfo';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->deviceName);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->systemName);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->systemVersion);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->model);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 10:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->carrierCode);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 11:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->carrierName);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 20:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->applicationType);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('DeviceInfo');
    if ($this->deviceName !== null) {
      $xfer += $output->writeFieldBegin('deviceName', TType::STRING, 1);
      $xfer += $output->writeString($this->deviceName);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->systemName !== null) {
      $xfer += $output->writeFieldBegin('systemName', TType::STRING, 2);
      $xfer += $output->writeString($this->systemName);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->systemVersion !== null) {
      $xfer += $output->writeFieldBegin('systemVersion', TType::STRING, 3);
      $xfer += $output->writeString($this->systemVersion);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->model !== null) {
      $xfer += $output->writeFieldBegin('model', TType::STRING, 4);
      $xfer += $output->writeString($this->model);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->carrierCode !== null) {
      $xfer += $output->writeFieldBegin('carrierCode', TType::I32, 10);
      $xfer += $output->writeI32($this->carrierCode);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->carrierName !== null) {
      $xfer += $output->writeFieldBegin('carrierName', TType::STRING, 11);
      $xfer += $output->writeString($this->carrierName);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->applicationType !== null) {
      $xfer += $output->writeFieldBegin('applicationType', TType::I32, 20);
      $xfer += $output->writeI32($this->applicationType);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class EmailConfirmation {
  static $_TSPEC;

  /**
   * @var bool
   */
  public $usePasswordSet = null;
  /**
   * @var string
   */
  public $email = null;
  /**
   * @var string
   */
  public $password = null;
  /**
   * @var bool
   */
  public $ignoreDuplication = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'usePasswordSet',
          'type' => TType::BOOL,
          ),
        2 => array(
          'var' => 'email',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'password',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'ignoreDuplication',
          'type' => TType::BOOL,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['usePasswordSet'])) {
        $this->usePasswordSet = $vals['usePasswordSet'];
      }
      if (isset($vals['email'])) {
        $this->email = $vals['email'];
      }
      if (isset($vals['password'])) {
        $this->password = $vals['password'];
      }
      if (isset($vals['ignoreDuplication'])) {
        $this->ignoreDuplication = $vals['ignoreDuplication'];
      }
    }
  }

  public function getName() {
    return 'EmailConfirmation';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->usePasswordSet);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->email);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->password);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->ignoreDuplication);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('EmailConfirmation');
    if ($this->usePasswordSet !== null) {
      $xfer += $output->writeFieldBegin('usePasswordSet', TType::BOOL, 1);
      $xfer += $output->writeBool($this->usePasswordSet);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->email !== null) {
      $xfer += $output->writeFieldBegin('email', TType::STRING, 2);
      $xfer += $output->writeString($this->email);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->password !== null) {
      $xfer += $output->writeFieldBegin('password', TType::STRING, 3);
      $xfer += $output->writeString($this->password);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ignoreDuplication !== null) {
      $xfer += $output->writeFieldBegin('ignoreDuplication', TType::BOOL, 4);
      $xfer += $output->writeBool($this->ignoreDuplication);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class EmailConfirmationSession {
  static $_TSPEC;

  /**
   * @var int
   */
  public $emailConfirmationType = null;
  /**
   * @var string
   */
  public $verifier = null;
  /**
   * @var string
   */
  public $targetEmail = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'emailConfirmationType',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'verifier',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'targetEmail',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['emailConfirmationType'])) {
        $this->emailConfirmationType = $vals['emailConfirmationType'];
      }
      if (isset($vals['verifier'])) {
        $this->verifier = $vals['verifier'];
      }
      if (isset($vals['targetEmail'])) {
        $this->targetEmail = $vals['targetEmail'];
      }
    }
  }

  public function getName() {
    return 'EmailConfirmationSession';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->emailConfirmationType);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->verifier);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->targetEmail);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('EmailConfirmationSession');
    if ($this->emailConfirmationType !== null) {
      $xfer += $output->writeFieldBegin('emailConfirmationType', TType::I32, 1);
      $xfer += $output->writeI32($this->emailConfirmationType);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->verifier !== null) {
      $xfer += $output->writeFieldBegin('verifier', TType::STRING, 2);
      $xfer += $output->writeString($this->verifier);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->targetEmail !== null) {
      $xfer += $output->writeFieldBegin('targetEmail', TType::STRING, 3);
      $xfer += $output->writeString($this->targetEmail);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class FriendChannelMatrix {
  static $_TSPEC;

  /**
   * @var string
   */
  public $channelId = null;
  /**
   * @var string
   */
  public $representMid = null;
  /**
   * @var int
   */
  public $count = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'channelId',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'representMid',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'count',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['channelId'])) {
        $this->channelId = $vals['channelId'];
      }
      if (isset($vals['representMid'])) {
        $this->representMid = $vals['representMid'];
      }
      if (isset($vals['count'])) {
        $this->count = $vals['count'];
      }
    }
  }

  public function getName() {
    return 'FriendChannelMatrix';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->channelId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->representMid);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->count);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('FriendChannelMatrix');
    if ($this->channelId !== null) {
      $xfer += $output->writeFieldBegin('channelId', TType::STRING, 1);
      $xfer += $output->writeString($this->channelId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->representMid !== null) {
      $xfer += $output->writeFieldBegin('representMid', TType::STRING, 2);
      $xfer += $output->writeString($this->representMid);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->count !== null) {
      $xfer += $output->writeFieldBegin('count', TType::I32, 3);
      $xfer += $output->writeI32($this->count);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class FriendChannelMatricesResponse {
  static $_TSPEC;

  /**
   * @var int
   */
  public $expires = null;
  /**
   * @var \FriendChannelMatrix[]
   */
  public $matrices = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'expires',
          'type' => TType::I64,
          ),
        2 => array(
          'var' => 'matrices',
          'type' => TType::LST,
          'etype' => TType::STRUCT,
          'elem' => array(
            'type' => TType::STRUCT,
            'class' => '\FriendChannelMatrix',
            ),
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['expires'])) {
        $this->expires = $vals['expires'];
      }
      if (isset($vals['matrices'])) {
        $this->matrices = $vals['matrices'];
      }
    }
  }

  public function getName() {
    return 'FriendChannelMatricesResponse';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->expires);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::LST) {
            $this->matrices = array();
            $_size135 = 0;
            $_etype138 = 0;
            $xfer += $input->readListBegin($_etype138, $_size135);
            for ($_i139 = 0; $_i139 < $_size135; ++$_i139)
            {
              $elem140 = null;
              $elem140 = new \FriendChannelMatrix();
              $xfer += $elem140->read($input);
              $this->matrices []= $elem140;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('FriendChannelMatricesResponse');
    if ($this->expires !== null) {
      $xfer += $output->writeFieldBegin('expires', TType::I64, 1);
      $xfer += $output->writeI64($this->expires);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->matrices !== null) {
      if (!is_array($this->matrices)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('matrices', TType::LST, 2);
      {
        $output->writeListBegin(TType::STRUCT, count($this->matrices));
        {
          foreach ($this->matrices as $iter141)
          {
            $xfer += $iter141->write($output);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class Geolocation {
  static $_TSPEC;

  /**
   * @var double
   */
  public $longitude = null;
  /**
   * @var double
   */
  public $latitude = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'longitude',
          'type' => TType::DOUBLE,
          ),
        2 => array(
          'var' => 'latitude',
          'type' => TType::DOUBLE,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['longitude'])) {
        $this->longitude = $vals['longitude'];
      }
      if (isset($vals['latitude'])) {
        $this->latitude = $vals['latitude'];
      }
    }
  }

  public function getName() {
    return 'Geolocation';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::DOUBLE) {
            $xfer += $input->readDouble($this->longitude);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::DOUBLE) {
            $xfer += $input->readDouble($this->latitude);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('Geolocation');
    if ($this->longitude !== null) {
      $xfer += $output->writeFieldBegin('longitude', TType::DOUBLE, 1);
      $xfer += $output->writeDouble($this->longitude);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->latitude !== null) {
      $xfer += $output->writeFieldBegin('latitude', TType::DOUBLE, 2);
      $xfer += $output->writeDouble($this->latitude);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class NotificationTarget {
  static $_TSPEC;

  /**
   * @var string
   */
  public $applicationType = null;
  /**
   * @var string
   */
  public $applicationVersion = null;
  /**
   * @var string
   */
  public $region = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'applicationType',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'applicationVersion',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'region',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['applicationType'])) {
        $this->applicationType = $vals['applicationType'];
      }
      if (isset($vals['applicationVersion'])) {
        $this->applicationVersion = $vals['applicationVersion'];
      }
      if (isset($vals['region'])) {
        $this->region = $vals['region'];
      }
    }
  }

  public function getName() {
    return 'NotificationTarget';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->applicationType);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->applicationVersion);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->region);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('NotificationTarget');
    if ($this->applicationType !== null) {
      $xfer += $output->writeFieldBegin('applicationType', TType::STRING, 1);
      $xfer += $output->writeString($this->applicationType);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->applicationVersion !== null) {
      $xfer += $output->writeFieldBegin('applicationVersion', TType::STRING, 2);
      $xfer += $output->writeString($this->applicationVersion);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->region !== null) {
      $xfer += $output->writeFieldBegin('region', TType::STRING, 3);
      $xfer += $output->writeString($this->region);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class GlobalEvent {
  static $_TSPEC;

  /**
   * @var string
   */
  public $key = null;
  /**
   * @var \NotificationTarget[]
   */
  public $targets = null;
  /**
   * @var int
   */
  public $createdTime = null;
  /**
   * @var int
   */
  public $data = null;
  /**
   * @var int
   */
  public $maxDelay = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'key',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'targets',
          'type' => TType::LST,
          'etype' => TType::STRUCT,
          'elem' => array(
            'type' => TType::STRUCT,
            'class' => '\NotificationTarget',
            ),
          ),
        3 => array(
          'var' => 'createdTime',
          'type' => TType::I64,
          ),
        4 => array(
          'var' => 'data',
          'type' => TType::I64,
          ),
        5 => array(
          'var' => 'maxDelay',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['key'])) {
        $this->key = $vals['key'];
      }
      if (isset($vals['targets'])) {
        $this->targets = $vals['targets'];
      }
      if (isset($vals['createdTime'])) {
        $this->createdTime = $vals['createdTime'];
      }
      if (isset($vals['data'])) {
        $this->data = $vals['data'];
      }
      if (isset($vals['maxDelay'])) {
        $this->maxDelay = $vals['maxDelay'];
      }
    }
  }

  public function getName() {
    return 'GlobalEvent';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->key);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::LST) {
            $this->targets = array();
            $_size142 = 0;
            $_etype145 = 0;
            $xfer += $input->readListBegin($_etype145, $_size142);
            for ($_i146 = 0; $_i146 < $_size142; ++$_i146)
            {
              $elem147 = null;
              $elem147 = new \NotificationTarget();
              $xfer += $elem147->read($input);
              $this->targets []= $elem147;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->createdTime);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->data);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->maxDelay);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('GlobalEvent');
    if ($this->key !== null) {
      $xfer += $output->writeFieldBegin('key', TType::STRING, 1);
      $xfer += $output->writeString($this->key);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->targets !== null) {
      if (!is_array($this->targets)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('targets', TType::LST, 2);
      {
        $output->writeListBegin(TType::STRUCT, count($this->targets));
        {
          foreach ($this->targets as $iter148)
          {
            $xfer += $iter148->write($output);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->createdTime !== null) {
      $xfer += $output->writeFieldBegin('createdTime', TType::I64, 3);
      $xfer += $output->writeI64($this->createdTime);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->data !== null) {
      $xfer += $output->writeFieldBegin('data', TType::I64, 4);
      $xfer += $output->writeI64($this->data);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->maxDelay !== null) {
      $xfer += $output->writeFieldBegin('maxDelay', TType::I32, 5);
      $xfer += $output->writeI32($this->maxDelay);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class GroupPreference {
  static $_TSPEC;

  /**
   * @var string
   */
  public $invitationTicket = null;
  /**
   * @var int
   */
  public $favoriteTimestamp = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'invitationTicket',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'favoriteTimestamp',
          'type' => TType::I64,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['invitationTicket'])) {
        $this->invitationTicket = $vals['invitationTicket'];
      }
      if (isset($vals['favoriteTimestamp'])) {
        $this->favoriteTimestamp = $vals['favoriteTimestamp'];
      }
    }
  }

  public function getName() {
    return 'GroupPreference';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->invitationTicket);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->favoriteTimestamp);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('GroupPreference');
    if ($this->invitationTicket !== null) {
      $xfer += $output->writeFieldBegin('invitationTicket', TType::STRING, 1);
      $xfer += $output->writeString($this->invitationTicket);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->favoriteTimestamp !== null) {
      $xfer += $output->writeFieldBegin('favoriteTimestamp', TType::I64, 2);
      $xfer += $output->writeI64($this->favoriteTimestamp);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class Group {
  static $_TSPEC;

  /**
   * @var string
   */
  public $id = null;
  /**
   * @var int
   */
  public $createdTime = null;
  /**
   * @var string
   */
  public $name = null;
  /**
   * @var string
   */
  public $pictureStatus = null;
  /**
   * @var bool
   */
  public $preventedJoinByTicket = null;
  /**
   * @var \GroupPreference
   */
  public $groupPreference = null;
  /**
   * @var \Contact[]
   */
  public $members = null;
  /**
   * @var \Contact
   */
  public $creator = null;
  /**
   * @var \Contact[]
   */
  public $invitee = null;
  /**
   * @var bool
   */
  public $notificationDisabled = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'id',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'createdTime',
          'type' => TType::I64,
          ),
        10 => array(
          'var' => 'name',
          'type' => TType::STRING,
          ),
        11 => array(
          'var' => 'pictureStatus',
          'type' => TType::STRING,
          ),
        12 => array(
          'var' => 'preventedJoinByTicket',
          'type' => TType::BOOL,
          ),
        13 => array(
          'var' => 'groupPreference',
          'type' => TType::STRUCT,
          'class' => '\GroupPreference',
          ),
        20 => array(
          'var' => 'members',
          'type' => TType::LST,
          'etype' => TType::STRUCT,
          'elem' => array(
            'type' => TType::STRUCT,
            'class' => '\Contact',
            ),
          ),
        21 => array(
          'var' => 'creator',
          'type' => TType::STRUCT,
          'class' => '\Contact',
          ),
        22 => array(
          'var' => 'invitee',
          'type' => TType::LST,
          'etype' => TType::STRUCT,
          'elem' => array(
            'type' => TType::STRUCT,
            'class' => '\Contact',
            ),
          ),
        31 => array(
          'var' => 'notificationDisabled',
          'type' => TType::BOOL,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['id'])) {
        $this->id = $vals['id'];
      }
      if (isset($vals['createdTime'])) {
        $this->createdTime = $vals['createdTime'];
      }
      if (isset($vals['name'])) {
        $this->name = $vals['name'];
      }
      if (isset($vals['pictureStatus'])) {
        $this->pictureStatus = $vals['pictureStatus'];
      }
      if (isset($vals['preventedJoinByTicket'])) {
        $this->preventedJoinByTicket = $vals['preventedJoinByTicket'];
      }
      if (isset($vals['groupPreference'])) {
        $this->groupPreference = $vals['groupPreference'];
      }
      if (isset($vals['members'])) {
        $this->members = $vals['members'];
      }
      if (isset($vals['creator'])) {
        $this->creator = $vals['creator'];
      }
      if (isset($vals['invitee'])) {
        $this->invitee = $vals['invitee'];
      }
      if (isset($vals['notificationDisabled'])) {
        $this->notificationDisabled = $vals['notificationDisabled'];
      }
    }
  }

  public function getName() {
    return 'Group';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->id);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->createdTime);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 10:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->name);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 11:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->pictureStatus);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 12:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->preventedJoinByTicket);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 13:
          if ($ftype == TType::STRUCT) {
            $this->groupPreference = new \GroupPreference();
            $xfer += $this->groupPreference->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 20:
          if ($ftype == TType::LST) {
            $this->members = array();
            $_size149 = 0;
            $_etype152 = 0;
            $xfer += $input->readListBegin($_etype152, $_size149);
            for ($_i153 = 0; $_i153 < $_size149; ++$_i153)
            {
              $elem154 = null;
              $elem154 = new \Contact();
              $xfer += $elem154->read($input);
              $this->members []= $elem154;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 21:
          if ($ftype == TType::STRUCT) {
            $this->creator = new \Contact();
            $xfer += $this->creator->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 22:
          if ($ftype == TType::LST) {
            $this->invitee = array();
            $_size155 = 0;
            $_etype158 = 0;
            $xfer += $input->readListBegin($_etype158, $_size155);
            for ($_i159 = 0; $_i159 < $_size155; ++$_i159)
            {
              $elem160 = null;
              $elem160 = new \Contact();
              $xfer += $elem160->read($input);
              $this->invitee []= $elem160;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 31:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->notificationDisabled);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('Group');
    if ($this->id !== null) {
      $xfer += $output->writeFieldBegin('id', TType::STRING, 1);
      $xfer += $output->writeString($this->id);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->createdTime !== null) {
      $xfer += $output->writeFieldBegin('createdTime', TType::I64, 2);
      $xfer += $output->writeI64($this->createdTime);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->name !== null) {
      $xfer += $output->writeFieldBegin('name', TType::STRING, 10);
      $xfer += $output->writeString($this->name);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->pictureStatus !== null) {
      $xfer += $output->writeFieldBegin('pictureStatus', TType::STRING, 11);
      $xfer += $output->writeString($this->pictureStatus);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->preventedJoinByTicket !== null) {
      $xfer += $output->writeFieldBegin('preventedJoinByTicket', TType::BOOL, 12);
      $xfer += $output->writeBool($this->preventedJoinByTicket);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->groupPreference !== null) {
      if (!is_object($this->groupPreference)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('groupPreference', TType::STRUCT, 13);
      $xfer += $this->groupPreference->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->members !== null) {
      if (!is_array($this->members)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('members', TType::LST, 20);
      {
        $output->writeListBegin(TType::STRUCT, count($this->members));
        {
          foreach ($this->members as $iter161)
          {
            $xfer += $iter161->write($output);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->creator !== null) {
      if (!is_object($this->creator)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('creator', TType::STRUCT, 21);
      $xfer += $this->creator->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->invitee !== null) {
      if (!is_array($this->invitee)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('invitee', TType::LST, 22);
      {
        $output->writeListBegin(TType::STRUCT, count($this->invitee));
        {
          foreach ($this->invitee as $iter162)
          {
            $xfer += $iter162->write($output);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->notificationDisabled !== null) {
      $xfer += $output->writeFieldBegin('notificationDisabled', TType::BOOL, 31);
      $xfer += $output->writeBool($this->notificationDisabled);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class IdentityCredential {
  static $_TSPEC;

  /**
   * @var int
   */
  public $provider = null;
  /**
   * @var string
   */
  public $identifier = null;
  /**
   * @var string
   */
  public $password = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'provider',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'identifier',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'password',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['provider'])) {
        $this->provider = $vals['provider'];
      }
      if (isset($vals['identifier'])) {
        $this->identifier = $vals['identifier'];
      }
      if (isset($vals['password'])) {
        $this->password = $vals['password'];
      }
    }
  }

  public function getName() {
    return 'IdentityCredential';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->provider);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->identifier);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->password);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('IdentityCredential');
    if ($this->provider !== null) {
      $xfer += $output->writeFieldBegin('provider', TType::I32, 1);
      $xfer += $output->writeI32($this->provider);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->identifier !== null) {
      $xfer += $output->writeFieldBegin('identifier', TType::STRING, 2);
      $xfer += $output->writeString($this->identifier);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->password !== null) {
      $xfer += $output->writeFieldBegin('password', TType::STRING, 3);
      $xfer += $output->writeString($this->password);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class LastReadMessageId {
  static $_TSPEC;

  /**
   * @var string
   */
  public $mid = null;
  /**
   * @var string
   */
  public $lastReadMessageId = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'mid',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'lastReadMessageId',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['mid'])) {
        $this->mid = $vals['mid'];
      }
      if (isset($vals['lastReadMessageId'])) {
        $this->lastReadMessageId = $vals['lastReadMessageId'];
      }
    }
  }

  public function getName() {
    return 'LastReadMessageId';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->mid);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->lastReadMessageId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('LastReadMessageId');
    if ($this->mid !== null) {
      $xfer += $output->writeFieldBegin('mid', TType::STRING, 1);
      $xfer += $output->writeString($this->mid);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->lastReadMessageId !== null) {
      $xfer += $output->writeFieldBegin('lastReadMessageId', TType::STRING, 2);
      $xfer += $output->writeString($this->lastReadMessageId);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class LastReadMessageIds {
  static $_TSPEC;

  /**
   * @var string
   */
  public $chatId = null;
  /**
   * @var \LastReadMessageId[]
   */
  public $lastReadMessageIds = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'chatId',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'lastReadMessageIds',
          'type' => TType::LST,
          'etype' => TType::STRUCT,
          'elem' => array(
            'type' => TType::STRUCT,
            'class' => '\LastReadMessageId',
            ),
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['chatId'])) {
        $this->chatId = $vals['chatId'];
      }
      if (isset($vals['lastReadMessageIds'])) {
        $this->lastReadMessageIds = $vals['lastReadMessageIds'];
      }
    }
  }

  public function getName() {
    return 'LastReadMessageIds';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->chatId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::LST) {
            $this->lastReadMessageIds = array();
            $_size163 = 0;
            $_etype166 = 0;
            $xfer += $input->readListBegin($_etype166, $_size163);
            for ($_i167 = 0; $_i167 < $_size163; ++$_i167)
            {
              $elem168 = null;
              $elem168 = new \LastReadMessageId();
              $xfer += $elem168->read($input);
              $this->lastReadMessageIds []= $elem168;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('LastReadMessageIds');
    if ($this->chatId !== null) {
      $xfer += $output->writeFieldBegin('chatId', TType::STRING, 1);
      $xfer += $output->writeString($this->chatId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->lastReadMessageIds !== null) {
      if (!is_array($this->lastReadMessageIds)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('lastReadMessageIds', TType::LST, 2);
      {
        $output->writeListBegin(TType::STRUCT, count($this->lastReadMessageIds));
        {
          foreach ($this->lastReadMessageIds as $iter169)
          {
            $xfer += $iter169->write($output);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class LoginResult {
  static $_TSPEC;

  /**
   * @var string
   */
  public $authToken = null;
  /**
   * @var string
   */
  public $certificate = null;
  /**
   * @var string
   */
  public $verifier = null;
  /**
   * @var string
   */
  public $pinCode = null;
  /**
   * @var int
   */
  public $type = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'authToken',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'certificate',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'verifier',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'pinCode',
          'type' => TType::STRING,
          ),
        5 => array(
          'var' => 'type',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['authToken'])) {
        $this->authToken = $vals['authToken'];
      }
      if (isset($vals['certificate'])) {
        $this->certificate = $vals['certificate'];
      }
      if (isset($vals['verifier'])) {
        $this->verifier = $vals['verifier'];
      }
      if (isset($vals['pinCode'])) {
        $this->pinCode = $vals['pinCode'];
      }
      if (isset($vals['type'])) {
        $this->type = $vals['type'];
      }
    }
  }

  public function getName() {
    return 'LoginResult';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->authToken);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->certificate);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->verifier);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->pinCode);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->type);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('LoginResult');
    if ($this->authToken !== null) {
      $xfer += $output->writeFieldBegin('authToken', TType::STRING, 1);
      $xfer += $output->writeString($this->authToken);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->certificate !== null) {
      $xfer += $output->writeFieldBegin('certificate', TType::STRING, 2);
      $xfer += $output->writeString($this->certificate);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->verifier !== null) {
      $xfer += $output->writeFieldBegin('verifier', TType::STRING, 3);
      $xfer += $output->writeString($this->verifier);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->pinCode !== null) {
      $xfer += $output->writeFieldBegin('pinCode', TType::STRING, 4);
      $xfer += $output->writeString($this->pinCode);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->type !== null) {
      $xfer += $output->writeFieldBegin('type', TType::I32, 5);
      $xfer += $output->writeI32($this->type);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class loginRequest {
  static $_TSPEC;

  /**
   * @var int
   */
  public $type = null;
  /**
   * @var int
   */
  public $identityProvider = null;
  /**
   * @var string
   */
  public $identifier = null;
  /**
   * @var string
   */
  public $password = null;
  /**
   * @var bool
   */
  public $keepLoggedIn = null;
  /**
   * @var string
   */
  public $accessLocation = null;
  /**
   * @var string
   */
  public $systemName = null;
  /**
   * @var string
   */
  public $certificate = null;
  /**
   * @var string
   */
  public $verifier = null;
  /**
   * @var string
   */
  public $secret = null;
  /**
   * @var int
   */
  public $e2eeVersion = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'type',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'identityProvider',
          'type' => TType::I32,
          ),
        3 => array(
          'var' => 'identifier',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'password',
          'type' => TType::STRING,
          ),
        5 => array(
          'var' => 'keepLoggedIn',
          'type' => TType::BOOL,
          ),
        6 => array(
          'var' => 'accessLocation',
          'type' => TType::STRING,
          ),
        7 => array(
          'var' => 'systemName',
          'type' => TType::STRING,
          ),
        8 => array(
          'var' => 'certificate',
          'type' => TType::STRING,
          ),
        9 => array(
          'var' => 'verifier',
          'type' => TType::STRING,
          ),
        10 => array(
          'var' => 'secret',
          'type' => TType::STRING,
          ),
        11 => array(
          'var' => 'e2eeVersion',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['type'])) {
        $this->type = $vals['type'];
      }
      if (isset($vals['identityProvider'])) {
        $this->identityProvider = $vals['identityProvider'];
      }
      if (isset($vals['identifier'])) {
        $this->identifier = $vals['identifier'];
      }
      if (isset($vals['password'])) {
        $this->password = $vals['password'];
      }
      if (isset($vals['keepLoggedIn'])) {
        $this->keepLoggedIn = $vals['keepLoggedIn'];
      }
      if (isset($vals['accessLocation'])) {
        $this->accessLocation = $vals['accessLocation'];
      }
      if (isset($vals['systemName'])) {
        $this->systemName = $vals['systemName'];
      }
      if (isset($vals['certificate'])) {
        $this->certificate = $vals['certificate'];
      }
      if (isset($vals['verifier'])) {
        $this->verifier = $vals['verifier'];
      }
      if (isset($vals['secret'])) {
        $this->secret = $vals['secret'];
      }
      if (isset($vals['e2eeVersion'])) {
        $this->e2eeVersion = $vals['e2eeVersion'];
      }
    }
  }

  public function getName() {
    return 'loginRequest';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->type);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->identityProvider);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->identifier);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->password);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->keepLoggedIn);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->accessLocation);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->systemName);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 8:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->certificate);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 9:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->verifier);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 10:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->secret);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 11:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->e2eeVersion);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('loginRequest');
    if ($this->type !== null) {
      $xfer += $output->writeFieldBegin('type', TType::I32, 1);
      $xfer += $output->writeI32($this->type);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->identityProvider !== null) {
      $xfer += $output->writeFieldBegin('identityProvider', TType::I32, 2);
      $xfer += $output->writeI32($this->identityProvider);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->identifier !== null) {
      $xfer += $output->writeFieldBegin('identifier', TType::STRING, 3);
      $xfer += $output->writeString($this->identifier);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->password !== null) {
      $xfer += $output->writeFieldBegin('password', TType::STRING, 4);
      $xfer += $output->writeString($this->password);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->keepLoggedIn !== null) {
      $xfer += $output->writeFieldBegin('keepLoggedIn', TType::BOOL, 5);
      $xfer += $output->writeBool($this->keepLoggedIn);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->accessLocation !== null) {
      $xfer += $output->writeFieldBegin('accessLocation', TType::STRING, 6);
      $xfer += $output->writeString($this->accessLocation);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->systemName !== null) {
      $xfer += $output->writeFieldBegin('systemName', TType::STRING, 7);
      $xfer += $output->writeString($this->systemName);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->certificate !== null) {
      $xfer += $output->writeFieldBegin('certificate', TType::STRING, 8);
      $xfer += $output->writeString($this->certificate);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->verifier !== null) {
      $xfer += $output->writeFieldBegin('verifier', TType::STRING, 9);
      $xfer += $output->writeString($this->verifier);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->secret !== null) {
      $xfer += $output->writeFieldBegin('secret', TType::STRING, 10);
      $xfer += $output->writeString($this->secret);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->e2eeVersion !== null) {
      $xfer += $output->writeFieldBegin('e2eeVersion', TType::I32, 11);
      $xfer += $output->writeI32($this->e2eeVersion);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class LoginSession {
  static $_TSPEC;

  /**
   * @var string
   */
  public $tokenKey = null;
  /**
   * @var int
   */
  public $expirationTime = null;
  /**
   * @var int
   */
  public $applicationType = null;
  /**
   * @var string
   */
  public $systemName = null;
  /**
   * @var string
   */
  public $accessLocation = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'tokenKey',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'expirationTime',
          'type' => TType::I64,
          ),
        11 => array(
          'var' => 'applicationType',
          'type' => TType::I32,
          ),
        12 => array(
          'var' => 'systemName',
          'type' => TType::STRING,
          ),
        22 => array(
          'var' => 'accessLocation',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['tokenKey'])) {
        $this->tokenKey = $vals['tokenKey'];
      }
      if (isset($vals['expirationTime'])) {
        $this->expirationTime = $vals['expirationTime'];
      }
      if (isset($vals['applicationType'])) {
        $this->applicationType = $vals['applicationType'];
      }
      if (isset($vals['systemName'])) {
        $this->systemName = $vals['systemName'];
      }
      if (isset($vals['accessLocation'])) {
        $this->accessLocation = $vals['accessLocation'];
      }
    }
  }

  public function getName() {
    return 'LoginSession';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->tokenKey);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->expirationTime);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 11:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->applicationType);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 12:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->systemName);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 22:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->accessLocation);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('LoginSession');
    if ($this->tokenKey !== null) {
      $xfer += $output->writeFieldBegin('tokenKey', TType::STRING, 1);
      $xfer += $output->writeString($this->tokenKey);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->expirationTime !== null) {
      $xfer += $output->writeFieldBegin('expirationTime', TType::I64, 3);
      $xfer += $output->writeI64($this->expirationTime);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->applicationType !== null) {
      $xfer += $output->writeFieldBegin('applicationType', TType::I32, 11);
      $xfer += $output->writeI32($this->applicationType);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->systemName !== null) {
      $xfer += $output->writeFieldBegin('systemName', TType::STRING, 12);
      $xfer += $output->writeString($this->systemName);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->accessLocation !== null) {
      $xfer += $output->writeFieldBegin('accessLocation', TType::STRING, 22);
      $xfer += $output->writeString($this->accessLocation);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class Message {
  static $_TSPEC;

  /**
   * @var string
   */
  public $_from = null;
  /**
   * @var string
   */
  public $to = null;
  /**
   * @var int
   */
  public $toType = null;
  /**
   * @var string
   */
  public $id = null;
  /**
   * @var int
   */
  public $createdTime = null;
  /**
   * @var int
   */
  public $deliveredTime = null;
  /**
   * @var string
   */
  public $text = null;
  /**
   * @var \Location
   */
  public $location = null;
  /**
   * @var bool
   */
  public $hasContent = null;
  /**
   * @var int
   */
  public $contentType = null;
  /**
   * @var string
   */
  public $contentPreview = null;
  /**
   * @var array
   */
  public $contentMetadata = null;
  /**
   * @var int
   */
  public $sessionId = null;
  /**
   * @var string[]
   */
  public $chunks = null;
  /**
   * @var string
   */
  public $relatedMessageId = null;
  /**
   * @var int
   */
  public $messageRelationType = null;
  /**
   * @var int
   */
  public $readCount = null;
  /**
   * @var int
   */
  public $relatedMessageServiceCode = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => '_from',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'to',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'toType',
          'type' => TType::I32,
          ),
        4 => array(
          'var' => 'id',
          'type' => TType::STRING,
          ),
        5 => array(
          'var' => 'createdTime',
          'type' => TType::I64,
          ),
        6 => array(
          'var' => 'deliveredTime',
          'type' => TType::I64,
          ),
        10 => array(
          'var' => 'text',
          'type' => TType::STRING,
          ),
        11 => array(
          'var' => 'location',
          'type' => TType::STRUCT,
          'class' => '\Location',
          ),
        14 => array(
          'var' => 'hasContent',
          'type' => TType::BOOL,
          ),
        15 => array(
          'var' => 'contentType',
          'type' => TType::I32,
          ),
        17 => array(
          'var' => 'contentPreview',
          'type' => TType::STRING,
          ),
        18 => array(
          'var' => 'contentMetadata',
          'type' => TType::MAP,
          'ktype' => TType::STRING,
          'vtype' => TType::STRING,
          'key' => array(
            'type' => TType::STRING,
          ),
          'val' => array(
            'type' => TType::STRING,
            ),
          ),
        19 => array(
          'var' => 'sessionId',
          'type' => TType::I64,
          ),
        20 => array(
          'var' => 'chunks',
          'type' => TType::LST,
          'etype' => TType::STRING,
          'elem' => array(
            'type' => TType::STRING,
            ),
          ),
        21 => array(
          'var' => 'relatedMessageId',
          'type' => TType::STRING,
          ),
        22 => array(
          'var' => 'messageRelationType',
          'type' => TType::I64,
          ),
        23 => array(
          'var' => 'readCount',
          'type' => TType::I64,
          ),
        24 => array(
          'var' => 'relatedMessageServiceCode',
          'type' => TType::I64,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['_from'])) {
        $this->_from = $vals['_from'];
      }
      if (isset($vals['to'])) {
        $this->to = $vals['to'];
      }
      if (isset($vals['toType'])) {
        $this->toType = $vals['toType'];
      }
      if (isset($vals['id'])) {
        $this->id = $vals['id'];
      }
      if (isset($vals['createdTime'])) {
        $this->createdTime = $vals['createdTime'];
      }
      if (isset($vals['deliveredTime'])) {
        $this->deliveredTime = $vals['deliveredTime'];
      }
      if (isset($vals['text'])) {
        $this->text = $vals['text'];
      }
      if (isset($vals['location'])) {
        $this->location = $vals['location'];
      }
      if (isset($vals['hasContent'])) {
        $this->hasContent = $vals['hasContent'];
      }
      if (isset($vals['contentType'])) {
        $this->contentType = $vals['contentType'];
      }
      if (isset($vals['contentPreview'])) {
        $this->contentPreview = $vals['contentPreview'];
      }
      if (isset($vals['contentMetadata'])) {
        $this->contentMetadata = $vals['contentMetadata'];
      }
      if (isset($vals['sessionId'])) {
        $this->sessionId = $vals['sessionId'];
      }
      if (isset($vals['chunks'])) {
        $this->chunks = $vals['chunks'];
      }
      if (isset($vals['relatedMessageId'])) {
        $this->relatedMessageId = $vals['relatedMessageId'];
      }
      if (isset($vals['messageRelationType'])) {
        $this->messageRelationType = $vals['messageRelationType'];
      }
      if (isset($vals['readCount'])) {
        $this->readCount = $vals['readCount'];
      }
      if (isset($vals['relatedMessageServiceCode'])) {
        $this->relatedMessageServiceCode = $vals['relatedMessageServiceCode'];
      }
    }
  }

  public function getName() {
    return 'Message';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->_from);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->to);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->toType);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->id);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->createdTime);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->deliveredTime);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 10:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->text);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 11:
          if ($ftype == TType::STRUCT) {
            $this->location = new \Location();
            $xfer += $this->location->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 14:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->hasContent);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 15:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->contentType);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 17:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->contentPreview);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 18:
          if ($ftype == TType::MAP) {
            $this->contentMetadata = array();
            $_size170 = 0;
            $_ktype171 = 0;
            $_vtype172 = 0;
            $xfer += $input->readMapBegin($_ktype171, $_vtype172, $_size170);
            for ($_i174 = 0; $_i174 < $_size170; ++$_i174)
            {
              $key175 = '';
              $val176 = '';
              $xfer += $input->readString($key175);
              $xfer += $input->readString($val176);
              $this->contentMetadata[$key175] = $val176;
            }
            $xfer += $input->readMapEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 19:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->sessionId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 20:
          if ($ftype == TType::LST) {
            $this->chunks = array();
            $_size177 = 0;
            $_etype180 = 0;
            $xfer += $input->readListBegin($_etype180, $_size177);
            for ($_i181 = 0; $_i181 < $_size177; ++$_i181)
            {
              $elem182 = null;
              $xfer += $input->readString($elem182);
              $this->chunks []= $elem182;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 21:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->relatedMessageId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 22:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->messageRelationType);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 23:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->readCount);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 24:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->relatedMessageServiceCode);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('Message');
    if ($this->_from !== null) {
      $xfer += $output->writeFieldBegin('_from', TType::STRING, 1);
      $xfer += $output->writeString($this->_from);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->to !== null) {
      $xfer += $output->writeFieldBegin('to', TType::STRING, 2);
      $xfer += $output->writeString($this->to);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->toType !== null) {
      $xfer += $output->writeFieldBegin('toType', TType::I32, 3);
      $xfer += $output->writeI32($this->toType);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->id !== null) {
      $xfer += $output->writeFieldBegin('id', TType::STRING, 4);
      $xfer += $output->writeString($this->id);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->createdTime !== null) {
      $xfer += $output->writeFieldBegin('createdTime', TType::I64, 5);
      $xfer += $output->writeI64($this->createdTime);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->deliveredTime !== null) {
      $xfer += $output->writeFieldBegin('deliveredTime', TType::I64, 6);
      $xfer += $output->writeI64($this->deliveredTime);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->text !== null) {
      $xfer += $output->writeFieldBegin('text', TType::STRING, 10);
      $xfer += $output->writeString($this->text);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->location !== null) {
      if (!is_object($this->location)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('location', TType::STRUCT, 11);
      $xfer += $this->location->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->hasContent !== null) {
      $xfer += $output->writeFieldBegin('hasContent', TType::BOOL, 14);
      $xfer += $output->writeBool($this->hasContent);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->contentType !== null) {
      $xfer += $output->writeFieldBegin('contentType', TType::I32, 15);
      $xfer += $output->writeI32($this->contentType);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->contentPreview !== null) {
      $xfer += $output->writeFieldBegin('contentPreview', TType::STRING, 17);
      $xfer += $output->writeString($this->contentPreview);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->contentMetadata !== null) {
      if (!is_array($this->contentMetadata)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('contentMetadata', TType::MAP, 18);
      {
        $output->writeMapBegin(TType::STRING, TType::STRING, count($this->contentMetadata));
        {
          foreach ($this->contentMetadata as $kiter183 => $viter184)
          {
            $xfer += $output->writeString($kiter183);
            $xfer += $output->writeString($viter184);
          }
        }
        $output->writeMapEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->sessionId !== null) {
      $xfer += $output->writeFieldBegin('sessionId', TType::I64, 19);
      $xfer += $output->writeI64($this->sessionId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->chunks !== null) {
      if (!is_array($this->chunks)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('chunks', TType::LST, 20);
      {
        $output->writeListBegin(TType::STRING, count($this->chunks));
        {
          foreach ($this->chunks as $iter185)
          {
            $xfer += $output->writeString($iter185);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->relatedMessageId !== null) {
      $xfer += $output->writeFieldBegin('relatedMessageId', TType::STRING, 21);
      $xfer += $output->writeString($this->relatedMessageId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->messageRelationType !== null) {
      $xfer += $output->writeFieldBegin('messageRelationType', TType::I64, 22);
      $xfer += $output->writeI64($this->messageRelationType);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->readCount !== null) {
      $xfer += $output->writeFieldBegin('readCount', TType::I64, 23);
      $xfer += $output->writeI64($this->readCount);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->relatedMessageServiceCode !== null) {
      $xfer += $output->writeFieldBegin('relatedMessageServiceCode', TType::I64, 24);
      $xfer += $output->writeI64($this->relatedMessageServiceCode);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class MessageOperation {
  static $_TSPEC;

  /**
   * @var int
   */
  public $revision = null;
  /**
   * @var int
   */
  public $createdTime = null;
  /**
   * @var int
   */
  public $type = null;
  /**
   * @var int
   */
  public $reqSeq = null;
  /**
   * @var int
   */
  public $status = null;
  /**
   * @var string
   */
  public $param1 = null;
  /**
   * @var string
   */
  public $param2 = null;
  /**
   * @var string
   */
  public $param3 = null;
  /**
   * @var \Message
   */
  public $message = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'revision',
          'type' => TType::I64,
          ),
        2 => array(
          'var' => 'createdTime',
          'type' => TType::I64,
          ),
        3 => array(
          'var' => 'type',
          'type' => TType::I32,
          ),
        4 => array(
          'var' => 'reqSeq',
          'type' => TType::I32,
          ),
        5 => array(
          'var' => 'status',
          'type' => TType::I32,
          ),
        10 => array(
          'var' => 'param1',
          'type' => TType::STRING,
          ),
        11 => array(
          'var' => 'param2',
          'type' => TType::STRING,
          ),
        12 => array(
          'var' => 'param3',
          'type' => TType::STRING,
          ),
        20 => array(
          'var' => 'message',
          'type' => TType::STRUCT,
          'class' => '\Message',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['revision'])) {
        $this->revision = $vals['revision'];
      }
      if (isset($vals['createdTime'])) {
        $this->createdTime = $vals['createdTime'];
      }
      if (isset($vals['type'])) {
        $this->type = $vals['type'];
      }
      if (isset($vals['reqSeq'])) {
        $this->reqSeq = $vals['reqSeq'];
      }
      if (isset($vals['status'])) {
        $this->status = $vals['status'];
      }
      if (isset($vals['param1'])) {
        $this->param1 = $vals['param1'];
      }
      if (isset($vals['param2'])) {
        $this->param2 = $vals['param2'];
      }
      if (isset($vals['param3'])) {
        $this->param3 = $vals['param3'];
      }
      if (isset($vals['message'])) {
        $this->message = $vals['message'];
      }
    }
  }

  public function getName() {
    return 'MessageOperation';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->revision);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->createdTime);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->type);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->reqSeq);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->status);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 10:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->param1);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 11:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->param2);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 12:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->param3);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 20:
          if ($ftype == TType::STRUCT) {
            $this->message = new \Message();
            $xfer += $this->message->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('MessageOperation');
    if ($this->revision !== null) {
      $xfer += $output->writeFieldBegin('revision', TType::I64, 1);
      $xfer += $output->writeI64($this->revision);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->createdTime !== null) {
      $xfer += $output->writeFieldBegin('createdTime', TType::I64, 2);
      $xfer += $output->writeI64($this->createdTime);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->type !== null) {
      $xfer += $output->writeFieldBegin('type', TType::I32, 3);
      $xfer += $output->writeI32($this->type);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->reqSeq !== null) {
      $xfer += $output->writeFieldBegin('reqSeq', TType::I32, 4);
      $xfer += $output->writeI32($this->reqSeq);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->status !== null) {
      $xfer += $output->writeFieldBegin('status', TType::I32, 5);
      $xfer += $output->writeI32($this->status);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->param1 !== null) {
      $xfer += $output->writeFieldBegin('param1', TType::STRING, 10);
      $xfer += $output->writeString($this->param1);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->param2 !== null) {
      $xfer += $output->writeFieldBegin('param2', TType::STRING, 11);
      $xfer += $output->writeString($this->param2);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->param3 !== null) {
      $xfer += $output->writeFieldBegin('param3', TType::STRING, 12);
      $xfer += $output->writeString($this->param3);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->message !== null) {
      if (!is_object($this->message)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('message', TType::STRUCT, 20);
      $xfer += $this->message->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class MessageOperations {
  static $_TSPEC;

  /**
   * @var \MessageOperation[]
   */
  public $operations = null;
  /**
   * @var bool
   */
  public $endFlag = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'operations',
          'type' => TType::LST,
          'etype' => TType::STRUCT,
          'elem' => array(
            'type' => TType::STRUCT,
            'class' => '\MessageOperation',
            ),
          ),
        2 => array(
          'var' => 'endFlag',
          'type' => TType::BOOL,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['operations'])) {
        $this->operations = $vals['operations'];
      }
      if (isset($vals['endFlag'])) {
        $this->endFlag = $vals['endFlag'];
      }
    }
  }

  public function getName() {
    return 'MessageOperations';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::LST) {
            $this->operations = array();
            $_size186 = 0;
            $_etype189 = 0;
            $xfer += $input->readListBegin($_etype189, $_size186);
            for ($_i190 = 0; $_i190 < $_size186; ++$_i190)
            {
              $elem191 = null;
              $elem191 = new \MessageOperation();
              $xfer += $elem191->read($input);
              $this->operations []= $elem191;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->endFlag);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('MessageOperations');
    if ($this->operations !== null) {
      if (!is_array($this->operations)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('operations', TType::LST, 1);
      {
        $output->writeListBegin(TType::STRUCT, count($this->operations));
        {
          foreach ($this->operations as $iter192)
          {
            $xfer += $iter192->write($output);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->endFlag !== null) {
      $xfer += $output->writeFieldBegin('endFlag', TType::BOOL, 2);
      $xfer += $output->writeBool($this->endFlag);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class MetaProfile {
  static $_TSPEC;

  /**
   * @var int
   */
  public $createTime = null;
  /**
   * @var string
   */
  public $regionCode = null;
  /**
   * @var array
   */
  public $identities = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'createTime',
          'type' => TType::I64,
          ),
        2 => array(
          'var' => 'regionCode',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'identities',
          'type' => TType::MAP,
          'ktype' => TType::I32,
          'vtype' => TType::STRING,
          'key' => array(
            'type' => TType::I32,
          ),
          'val' => array(
            'type' => TType::STRING,
            ),
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['createTime'])) {
        $this->createTime = $vals['createTime'];
      }
      if (isset($vals['regionCode'])) {
        $this->regionCode = $vals['regionCode'];
      }
      if (isset($vals['identities'])) {
        $this->identities = $vals['identities'];
      }
    }
  }

  public function getName() {
    return 'MetaProfile';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->createTime);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->regionCode);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::MAP) {
            $this->identities = array();
            $_size193 = 0;
            $_ktype194 = 0;
            $_vtype195 = 0;
            $xfer += $input->readMapBegin($_ktype194, $_vtype195, $_size193);
            for ($_i197 = 0; $_i197 < $_size193; ++$_i197)
            {
              $key198 = 0;
              $val199 = '';
              $xfer += $input->readI32($key198);
              $xfer += $input->readString($val199);
              $this->identities[$key198] = $val199;
            }
            $xfer += $input->readMapEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('MetaProfile');
    if ($this->createTime !== null) {
      $xfer += $output->writeFieldBegin('createTime', TType::I64, 1);
      $xfer += $output->writeI64($this->createTime);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->regionCode !== null) {
      $xfer += $output->writeFieldBegin('regionCode', TType::STRING, 2);
      $xfer += $output->writeString($this->regionCode);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->identities !== null) {
      if (!is_array($this->identities)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('identities', TType::MAP, 3);
      {
        $output->writeMapBegin(TType::I32, TType::STRING, count($this->identities));
        {
          foreach ($this->identities as $kiter200 => $viter201)
          {
            $xfer += $output->writeI32($kiter200);
            $xfer += $output->writeString($viter201);
          }
        }
        $output->writeMapEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class NotificationItem {
  static $_TSPEC;

  /**
   * @var string
   */
  public $id = null;
  /**
   * @var string
   */
  public $_from = null;
  /**
   * @var string
   */
  public $to = null;
  /**
   * @var string
   */
  public $fromChannel = null;
  /**
   * @var string
   */
  public $toChannel = null;
  /**
   * @var int
   */
  public $revision = null;
  /**
   * @var int
   */
  public $createdTime = null;
  /**
   * @var array
   */
  public $content = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'id',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => '_from',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'to',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'fromChannel',
          'type' => TType::STRING,
          ),
        5 => array(
          'var' => 'toChannel',
          'type' => TType::STRING,
          ),
        7 => array(
          'var' => 'revision',
          'type' => TType::I64,
          ),
        8 => array(
          'var' => 'createdTime',
          'type' => TType::I64,
          ),
        9 => array(
          'var' => 'content',
          'type' => TType::MAP,
          'ktype' => TType::STRING,
          'vtype' => TType::STRING,
          'key' => array(
            'type' => TType::STRING,
          ),
          'val' => array(
            'type' => TType::STRING,
            ),
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['id'])) {
        $this->id = $vals['id'];
      }
      if (isset($vals['_from'])) {
        $this->_from = $vals['_from'];
      }
      if (isset($vals['to'])) {
        $this->to = $vals['to'];
      }
      if (isset($vals['fromChannel'])) {
        $this->fromChannel = $vals['fromChannel'];
      }
      if (isset($vals['toChannel'])) {
        $this->toChannel = $vals['toChannel'];
      }
      if (isset($vals['revision'])) {
        $this->revision = $vals['revision'];
      }
      if (isset($vals['createdTime'])) {
        $this->createdTime = $vals['createdTime'];
      }
      if (isset($vals['content'])) {
        $this->content = $vals['content'];
      }
    }
  }

  public function getName() {
    return 'NotificationItem';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->id);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->_from);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->to);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->fromChannel);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->toChannel);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->revision);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 8:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->createdTime);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 9:
          if ($ftype == TType::MAP) {
            $this->content = array();
            $_size202 = 0;
            $_ktype203 = 0;
            $_vtype204 = 0;
            $xfer += $input->readMapBegin($_ktype203, $_vtype204, $_size202);
            for ($_i206 = 0; $_i206 < $_size202; ++$_i206)
            {
              $key207 = '';
              $val208 = '';
              $xfer += $input->readString($key207);
              $xfer += $input->readString($val208);
              $this->content[$key207] = $val208;
            }
            $xfer += $input->readMapEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('NotificationItem');
    if ($this->id !== null) {
      $xfer += $output->writeFieldBegin('id', TType::STRING, 1);
      $xfer += $output->writeString($this->id);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->_from !== null) {
      $xfer += $output->writeFieldBegin('_from', TType::STRING, 2);
      $xfer += $output->writeString($this->_from);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->to !== null) {
      $xfer += $output->writeFieldBegin('to', TType::STRING, 3);
      $xfer += $output->writeString($this->to);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->fromChannel !== null) {
      $xfer += $output->writeFieldBegin('fromChannel', TType::STRING, 4);
      $xfer += $output->writeString($this->fromChannel);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->toChannel !== null) {
      $xfer += $output->writeFieldBegin('toChannel', TType::STRING, 5);
      $xfer += $output->writeString($this->toChannel);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->revision !== null) {
      $xfer += $output->writeFieldBegin('revision', TType::I64, 7);
      $xfer += $output->writeI64($this->revision);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->createdTime !== null) {
      $xfer += $output->writeFieldBegin('createdTime', TType::I64, 8);
      $xfer += $output->writeI64($this->createdTime);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->content !== null) {
      if (!is_array($this->content)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('content', TType::MAP, 9);
      {
        $output->writeMapBegin(TType::STRING, TType::STRING, count($this->content));
        {
          foreach ($this->content as $kiter209 => $viter210)
          {
            $xfer += $output->writeString($kiter209);
            $xfer += $output->writeString($viter210);
          }
        }
        $output->writeMapEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class NotificationFetchResult {
  static $_TSPEC;

  /**
   * @var int
   */
  public $fetchMode = null;
  /**
   * @var \NotificationItem[]
   */
  public $itemList = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'fetchMode',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'itemList',
          'type' => TType::LST,
          'etype' => TType::STRUCT,
          'elem' => array(
            'type' => TType::STRUCT,
            'class' => '\NotificationItem',
            ),
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['fetchMode'])) {
        $this->fetchMode = $vals['fetchMode'];
      }
      if (isset($vals['itemList'])) {
        $this->itemList = $vals['itemList'];
      }
    }
  }

  public function getName() {
    return 'NotificationFetchResult';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->fetchMode);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::LST) {
            $this->itemList = array();
            $_size211 = 0;
            $_etype214 = 0;
            $xfer += $input->readListBegin($_etype214, $_size211);
            for ($_i215 = 0; $_i215 < $_size211; ++$_i215)
            {
              $elem216 = null;
              $elem216 = new \NotificationItem();
              $xfer += $elem216->read($input);
              $this->itemList []= $elem216;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('NotificationFetchResult');
    if ($this->fetchMode !== null) {
      $xfer += $output->writeFieldBegin('fetchMode', TType::I32, 1);
      $xfer += $output->writeI32($this->fetchMode);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->itemList !== null) {
      if (!is_array($this->itemList)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('itemList', TType::LST, 2);
      {
        $output->writeListBegin(TType::STRUCT, count($this->itemList));
        {
          foreach ($this->itemList as $iter217)
          {
            $xfer += $iter217->write($output);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class Operation {
  static $_TSPEC;

  /**
   * @var int
   */
  public $revision = null;
  /**
   * @var int
   */
  public $createdTime = null;
  /**
   * @var int
   */
  public $type = null;
  /**
   * @var int
   */
  public $reqSeq = null;
  /**
   * @var string
   */
  public $checksum = null;
  /**
   * @var int
   */
  public $status = null;
  /**
   * @var string
   */
  public $param1 = null;
  /**
   * @var string
   */
  public $param2 = null;
  /**
   * @var string
   */
  public $param3 = null;
  /**
   * @var \Message
   */
  public $message = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'revision',
          'type' => TType::I64,
          ),
        2 => array(
          'var' => 'createdTime',
          'type' => TType::I64,
          ),
        3 => array(
          'var' => 'type',
          'type' => TType::I32,
          ),
        4 => array(
          'var' => 'reqSeq',
          'type' => TType::I32,
          ),
        5 => array(
          'var' => 'checksum',
          'type' => TType::STRING,
          ),
        7 => array(
          'var' => 'status',
          'type' => TType::I32,
          ),
        10 => array(
          'var' => 'param1',
          'type' => TType::STRING,
          ),
        11 => array(
          'var' => 'param2',
          'type' => TType::STRING,
          ),
        12 => array(
          'var' => 'param3',
          'type' => TType::STRING,
          ),
        20 => array(
          'var' => 'message',
          'type' => TType::STRUCT,
          'class' => '\Message',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['revision'])) {
        $this->revision = $vals['revision'];
      }
      if (isset($vals['createdTime'])) {
        $this->createdTime = $vals['createdTime'];
      }
      if (isset($vals['type'])) {
        $this->type = $vals['type'];
      }
      if (isset($vals['reqSeq'])) {
        $this->reqSeq = $vals['reqSeq'];
      }
      if (isset($vals['checksum'])) {
        $this->checksum = $vals['checksum'];
      }
      if (isset($vals['status'])) {
        $this->status = $vals['status'];
      }
      if (isset($vals['param1'])) {
        $this->param1 = $vals['param1'];
      }
      if (isset($vals['param2'])) {
        $this->param2 = $vals['param2'];
      }
      if (isset($vals['param3'])) {
        $this->param3 = $vals['param3'];
      }
      if (isset($vals['message'])) {
        $this->message = $vals['message'];
      }
    }
  }

  public function getName() {
    return 'Operation';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->revision);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->createdTime);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->type);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->reqSeq);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->checksum);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->status);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 10:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->param1);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 11:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->param2);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 12:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->param3);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 20:
          if ($ftype == TType::STRUCT) {
            $this->message = new \Message();
            $xfer += $this->message->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('Operation');
    if ($this->revision !== null) {
      $xfer += $output->writeFieldBegin('revision', TType::I64, 1);
      $xfer += $output->writeI64($this->revision);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->createdTime !== null) {
      $xfer += $output->writeFieldBegin('createdTime', TType::I64, 2);
      $xfer += $output->writeI64($this->createdTime);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->type !== null) {
      $xfer += $output->writeFieldBegin('type', TType::I32, 3);
      $xfer += $output->writeI32($this->type);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->reqSeq !== null) {
      $xfer += $output->writeFieldBegin('reqSeq', TType::I32, 4);
      $xfer += $output->writeI32($this->reqSeq);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->checksum !== null) {
      $xfer += $output->writeFieldBegin('checksum', TType::STRING, 5);
      $xfer += $output->writeString($this->checksum);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->status !== null) {
      $xfer += $output->writeFieldBegin('status', TType::I32, 7);
      $xfer += $output->writeI32($this->status);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->param1 !== null) {
      $xfer += $output->writeFieldBegin('param1', TType::STRING, 10);
      $xfer += $output->writeString($this->param1);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->param2 !== null) {
      $xfer += $output->writeFieldBegin('param2', TType::STRING, 11);
      $xfer += $output->writeString($this->param2);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->param3 !== null) {
      $xfer += $output->writeFieldBegin('param3', TType::STRING, 12);
      $xfer += $output->writeString($this->param3);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->message !== null) {
      if (!is_object($this->message)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('message', TType::STRUCT, 20);
      $xfer += $this->message->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class PaymentReservation {
  static $_TSPEC;

  /**
   * @var string
   */
  public $receiverMid = null;
  /**
   * @var string
   */
  public $productId = null;
  /**
   * @var string
   */
  public $language = null;
  /**
   * @var string
   */
  public $location = null;
  /**
   * @var string
   */
  public $currency = null;
  /**
   * @var string
   */
  public $price = null;
  /**
   * @var int
   */
  public $appStoreCode = null;
  /**
   * @var string
   */
  public $messageText = null;
  /**
   * @var int
   */
  public $messageTemplate = null;
  /**
   * @var int
   */
  public $packageId = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'receiverMid',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'productId',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'language',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'location',
          'type' => TType::STRING,
          ),
        5 => array(
          'var' => 'currency',
          'type' => TType::STRING,
          ),
        6 => array(
          'var' => 'price',
          'type' => TType::STRING,
          ),
        7 => array(
          'var' => 'appStoreCode',
          'type' => TType::I32,
          ),
        8 => array(
          'var' => 'messageText',
          'type' => TType::STRING,
          ),
        9 => array(
          'var' => 'messageTemplate',
          'type' => TType::I32,
          ),
        10 => array(
          'var' => 'packageId',
          'type' => TType::I64,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['receiverMid'])) {
        $this->receiverMid = $vals['receiverMid'];
      }
      if (isset($vals['productId'])) {
        $this->productId = $vals['productId'];
      }
      if (isset($vals['language'])) {
        $this->language = $vals['language'];
      }
      if (isset($vals['location'])) {
        $this->location = $vals['location'];
      }
      if (isset($vals['currency'])) {
        $this->currency = $vals['currency'];
      }
      if (isset($vals['price'])) {
        $this->price = $vals['price'];
      }
      if (isset($vals['appStoreCode'])) {
        $this->appStoreCode = $vals['appStoreCode'];
      }
      if (isset($vals['messageText'])) {
        $this->messageText = $vals['messageText'];
      }
      if (isset($vals['messageTemplate'])) {
        $this->messageTemplate = $vals['messageTemplate'];
      }
      if (isset($vals['packageId'])) {
        $this->packageId = $vals['packageId'];
      }
    }
  }

  public function getName() {
    return 'PaymentReservation';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->receiverMid);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->productId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->language);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->location);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->currency);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->price);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->appStoreCode);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 8:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->messageText);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 9:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->messageTemplate);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 10:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->packageId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('PaymentReservation');
    if ($this->receiverMid !== null) {
      $xfer += $output->writeFieldBegin('receiverMid', TType::STRING, 1);
      $xfer += $output->writeString($this->receiverMid);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->productId !== null) {
      $xfer += $output->writeFieldBegin('productId', TType::STRING, 2);
      $xfer += $output->writeString($this->productId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->language !== null) {
      $xfer += $output->writeFieldBegin('language', TType::STRING, 3);
      $xfer += $output->writeString($this->language);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->location !== null) {
      $xfer += $output->writeFieldBegin('location', TType::STRING, 4);
      $xfer += $output->writeString($this->location);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->currency !== null) {
      $xfer += $output->writeFieldBegin('currency', TType::STRING, 5);
      $xfer += $output->writeString($this->currency);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->price !== null) {
      $xfer += $output->writeFieldBegin('price', TType::STRING, 6);
      $xfer += $output->writeString($this->price);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->appStoreCode !== null) {
      $xfer += $output->writeFieldBegin('appStoreCode', TType::I32, 7);
      $xfer += $output->writeI32($this->appStoreCode);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->messageText !== null) {
      $xfer += $output->writeFieldBegin('messageText', TType::STRING, 8);
      $xfer += $output->writeString($this->messageText);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->messageTemplate !== null) {
      $xfer += $output->writeFieldBegin('messageTemplate', TType::I32, 9);
      $xfer += $output->writeI32($this->messageTemplate);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->packageId !== null) {
      $xfer += $output->writeFieldBegin('packageId', TType::I64, 10);
      $xfer += $output->writeI64($this->packageId);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class PaymentReservationResult {
  static $_TSPEC;

  /**
   * @var string
   */
  public $orderId = null;
  /**
   * @var string
   */
  public $confirmUrl = null;
  /**
   * @var array
   */
  public $extras = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'orderId',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'confirmUrl',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'extras',
          'type' => TType::MAP,
          'ktype' => TType::STRING,
          'vtype' => TType::STRING,
          'key' => array(
            'type' => TType::STRING,
          ),
          'val' => array(
            'type' => TType::STRING,
            ),
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['orderId'])) {
        $this->orderId = $vals['orderId'];
      }
      if (isset($vals['confirmUrl'])) {
        $this->confirmUrl = $vals['confirmUrl'];
      }
      if (isset($vals['extras'])) {
        $this->extras = $vals['extras'];
      }
    }
  }

  public function getName() {
    return 'PaymentReservationResult';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->orderId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->confirmUrl);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::MAP) {
            $this->extras = array();
            $_size218 = 0;
            $_ktype219 = 0;
            $_vtype220 = 0;
            $xfer += $input->readMapBegin($_ktype219, $_vtype220, $_size218);
            for ($_i222 = 0; $_i222 < $_size218; ++$_i222)
            {
              $key223 = '';
              $val224 = '';
              $xfer += $input->readString($key223);
              $xfer += $input->readString($val224);
              $this->extras[$key223] = $val224;
            }
            $xfer += $input->readMapEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('PaymentReservationResult');
    if ($this->orderId !== null) {
      $xfer += $output->writeFieldBegin('orderId', TType::STRING, 1);
      $xfer += $output->writeString($this->orderId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->confirmUrl !== null) {
      $xfer += $output->writeFieldBegin('confirmUrl', TType::STRING, 2);
      $xfer += $output->writeString($this->confirmUrl);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->extras !== null) {
      if (!is_array($this->extras)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('extras', TType::MAP, 3);
      {
        $output->writeMapBegin(TType::STRING, TType::STRING, count($this->extras));
        {
          foreach ($this->extras as $kiter225 => $viter226)
          {
            $xfer += $output->writeString($kiter225);
            $xfer += $output->writeString($viter226);
          }
        }
        $output->writeMapEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class Product {
  static $_TSPEC;

  /**
   * @var string
   */
  public $productId = null;
  /**
   * @var int
   */
  public $packageId = null;
  /**
   * @var int
   */
  public $version = null;
  /**
   * @var string
   */
  public $authorName = null;
  /**
   * @var bool
   */
  public $onSale = null;
  /**
   * @var int
   */
  public $validDays = null;
  /**
   * @var int
   */
  public $saleType = null;
  /**
   * @var string
   */
  public $copyright = null;
  /**
   * @var string
   */
  public $title = null;
  /**
   * @var string
   */
  public $descriptionText = null;
  /**
   * @var int
   */
  public $shopOrderId = null;
  /**
   * @var string
   */
  public $fromMid = null;
  /**
   * @var string
   */
  public $toMid = null;
  /**
   * @var int
   */
  public $validUntil = null;
  /**
   * @var int
   */
  public $priceTier = null;
  /**
   * @var string
   */
  public $price = null;
  /**
   * @var string
   */
  public $currency = null;
  /**
   * @var string
   */
  public $currencySymbol = null;
  /**
   * @var int
   */
  public $paymentType = null;
  /**
   * @var int
   */
  public $createDate = null;
  /**
   * @var bool
   */
  public $ownFlag = null;
  /**
   * @var int
   */
  public $eventType = null;
  /**
   * @var string
   */
  public $urlSchema = null;
  /**
   * @var string
   */
  public $downloadUrl = null;
  /**
   * @var string
   */
  public $buddyMid = null;
  /**
   * @var int
   */
  public $publishSince = null;
  /**
   * @var bool
   */
  public $newFlag = null;
  /**
   * @var bool
   */
  public $missionFlag = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'productId',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'packageId',
          'type' => TType::I64,
          ),
        3 => array(
          'var' => 'version',
          'type' => TType::I32,
          ),
        4 => array(
          'var' => 'authorName',
          'type' => TType::STRING,
          ),
        5 => array(
          'var' => 'onSale',
          'type' => TType::BOOL,
          ),
        6 => array(
          'var' => 'validDays',
          'type' => TType::I32,
          ),
        7 => array(
          'var' => 'saleType',
          'type' => TType::I32,
          ),
        8 => array(
          'var' => 'copyright',
          'type' => TType::STRING,
          ),
        9 => array(
          'var' => 'title',
          'type' => TType::STRING,
          ),
        10 => array(
          'var' => 'descriptionText',
          'type' => TType::STRING,
          ),
        11 => array(
          'var' => 'shopOrderId',
          'type' => TType::I64,
          ),
        12 => array(
          'var' => 'fromMid',
          'type' => TType::STRING,
          ),
        13 => array(
          'var' => 'toMid',
          'type' => TType::STRING,
          ),
        14 => array(
          'var' => 'validUntil',
          'type' => TType::I64,
          ),
        15 => array(
          'var' => 'priceTier',
          'type' => TType::I32,
          ),
        16 => array(
          'var' => 'price',
          'type' => TType::STRING,
          ),
        17 => array(
          'var' => 'currency',
          'type' => TType::STRING,
          ),
        18 => array(
          'var' => 'currencySymbol',
          'type' => TType::STRING,
          ),
        19 => array(
          'var' => 'paymentType',
          'type' => TType::I32,
          ),
        20 => array(
          'var' => 'createDate',
          'type' => TType::I64,
          ),
        21 => array(
          'var' => 'ownFlag',
          'type' => TType::BOOL,
          ),
        22 => array(
          'var' => 'eventType',
          'type' => TType::I32,
          ),
        23 => array(
          'var' => 'urlSchema',
          'type' => TType::STRING,
          ),
        24 => array(
          'var' => 'downloadUrl',
          'type' => TType::STRING,
          ),
        25 => array(
          'var' => 'buddyMid',
          'type' => TType::STRING,
          ),
        26 => array(
          'var' => 'publishSince',
          'type' => TType::I64,
          ),
        27 => array(
          'var' => 'newFlag',
          'type' => TType::BOOL,
          ),
        28 => array(
          'var' => 'missionFlag',
          'type' => TType::BOOL,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['productId'])) {
        $this->productId = $vals['productId'];
      }
      if (isset($vals['packageId'])) {
        $this->packageId = $vals['packageId'];
      }
      if (isset($vals['version'])) {
        $this->version = $vals['version'];
      }
      if (isset($vals['authorName'])) {
        $this->authorName = $vals['authorName'];
      }
      if (isset($vals['onSale'])) {
        $this->onSale = $vals['onSale'];
      }
      if (isset($vals['validDays'])) {
        $this->validDays = $vals['validDays'];
      }
      if (isset($vals['saleType'])) {
        $this->saleType = $vals['saleType'];
      }
      if (isset($vals['copyright'])) {
        $this->copyright = $vals['copyright'];
      }
      if (isset($vals['title'])) {
        $this->title = $vals['title'];
      }
      if (isset($vals['descriptionText'])) {
        $this->descriptionText = $vals['descriptionText'];
      }
      if (isset($vals['shopOrderId'])) {
        $this->shopOrderId = $vals['shopOrderId'];
      }
      if (isset($vals['fromMid'])) {
        $this->fromMid = $vals['fromMid'];
      }
      if (isset($vals['toMid'])) {
        $this->toMid = $vals['toMid'];
      }
      if (isset($vals['validUntil'])) {
        $this->validUntil = $vals['validUntil'];
      }
      if (isset($vals['priceTier'])) {
        $this->priceTier = $vals['priceTier'];
      }
      if (isset($vals['price'])) {
        $this->price = $vals['price'];
      }
      if (isset($vals['currency'])) {
        $this->currency = $vals['currency'];
      }
      if (isset($vals['currencySymbol'])) {
        $this->currencySymbol = $vals['currencySymbol'];
      }
      if (isset($vals['paymentType'])) {
        $this->paymentType = $vals['paymentType'];
      }
      if (isset($vals['createDate'])) {
        $this->createDate = $vals['createDate'];
      }
      if (isset($vals['ownFlag'])) {
        $this->ownFlag = $vals['ownFlag'];
      }
      if (isset($vals['eventType'])) {
        $this->eventType = $vals['eventType'];
      }
      if (isset($vals['urlSchema'])) {
        $this->urlSchema = $vals['urlSchema'];
      }
      if (isset($vals['downloadUrl'])) {
        $this->downloadUrl = $vals['downloadUrl'];
      }
      if (isset($vals['buddyMid'])) {
        $this->buddyMid = $vals['buddyMid'];
      }
      if (isset($vals['publishSince'])) {
        $this->publishSince = $vals['publishSince'];
      }
      if (isset($vals['newFlag'])) {
        $this->newFlag = $vals['newFlag'];
      }
      if (isset($vals['missionFlag'])) {
        $this->missionFlag = $vals['missionFlag'];
      }
    }
  }

  public function getName() {
    return 'Product';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->productId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->packageId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->version);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->authorName);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->onSale);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->validDays);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->saleType);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 8:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->copyright);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 9:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->title);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 10:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->descriptionText);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 11:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->shopOrderId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 12:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->fromMid);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 13:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->toMid);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 14:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->validUntil);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 15:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->priceTier);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 16:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->price);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 17:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->currency);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 18:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->currencySymbol);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 19:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->paymentType);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 20:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->createDate);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 21:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->ownFlag);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 22:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->eventType);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 23:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->urlSchema);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 24:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->downloadUrl);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 25:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->buddyMid);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 26:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->publishSince);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 27:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->newFlag);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 28:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->missionFlag);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('Product');
    if ($this->productId !== null) {
      $xfer += $output->writeFieldBegin('productId', TType::STRING, 1);
      $xfer += $output->writeString($this->productId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->packageId !== null) {
      $xfer += $output->writeFieldBegin('packageId', TType::I64, 2);
      $xfer += $output->writeI64($this->packageId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->version !== null) {
      $xfer += $output->writeFieldBegin('version', TType::I32, 3);
      $xfer += $output->writeI32($this->version);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->authorName !== null) {
      $xfer += $output->writeFieldBegin('authorName', TType::STRING, 4);
      $xfer += $output->writeString($this->authorName);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->onSale !== null) {
      $xfer += $output->writeFieldBegin('onSale', TType::BOOL, 5);
      $xfer += $output->writeBool($this->onSale);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->validDays !== null) {
      $xfer += $output->writeFieldBegin('validDays', TType::I32, 6);
      $xfer += $output->writeI32($this->validDays);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->saleType !== null) {
      $xfer += $output->writeFieldBegin('saleType', TType::I32, 7);
      $xfer += $output->writeI32($this->saleType);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->copyright !== null) {
      $xfer += $output->writeFieldBegin('copyright', TType::STRING, 8);
      $xfer += $output->writeString($this->copyright);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->title !== null) {
      $xfer += $output->writeFieldBegin('title', TType::STRING, 9);
      $xfer += $output->writeString($this->title);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->descriptionText !== null) {
      $xfer += $output->writeFieldBegin('descriptionText', TType::STRING, 10);
      $xfer += $output->writeString($this->descriptionText);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->shopOrderId !== null) {
      $xfer += $output->writeFieldBegin('shopOrderId', TType::I64, 11);
      $xfer += $output->writeI64($this->shopOrderId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->fromMid !== null) {
      $xfer += $output->writeFieldBegin('fromMid', TType::STRING, 12);
      $xfer += $output->writeString($this->fromMid);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->toMid !== null) {
      $xfer += $output->writeFieldBegin('toMid', TType::STRING, 13);
      $xfer += $output->writeString($this->toMid);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->validUntil !== null) {
      $xfer += $output->writeFieldBegin('validUntil', TType::I64, 14);
      $xfer += $output->writeI64($this->validUntil);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->priceTier !== null) {
      $xfer += $output->writeFieldBegin('priceTier', TType::I32, 15);
      $xfer += $output->writeI32($this->priceTier);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->price !== null) {
      $xfer += $output->writeFieldBegin('price', TType::STRING, 16);
      $xfer += $output->writeString($this->price);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->currency !== null) {
      $xfer += $output->writeFieldBegin('currency', TType::STRING, 17);
      $xfer += $output->writeString($this->currency);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->currencySymbol !== null) {
      $xfer += $output->writeFieldBegin('currencySymbol', TType::STRING, 18);
      $xfer += $output->writeString($this->currencySymbol);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->paymentType !== null) {
      $xfer += $output->writeFieldBegin('paymentType', TType::I32, 19);
      $xfer += $output->writeI32($this->paymentType);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->createDate !== null) {
      $xfer += $output->writeFieldBegin('createDate', TType::I64, 20);
      $xfer += $output->writeI64($this->createDate);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ownFlag !== null) {
      $xfer += $output->writeFieldBegin('ownFlag', TType::BOOL, 21);
      $xfer += $output->writeBool($this->ownFlag);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->eventType !== null) {
      $xfer += $output->writeFieldBegin('eventType', TType::I32, 22);
      $xfer += $output->writeI32($this->eventType);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->urlSchema !== null) {
      $xfer += $output->writeFieldBegin('urlSchema', TType::STRING, 23);
      $xfer += $output->writeString($this->urlSchema);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->downloadUrl !== null) {
      $xfer += $output->writeFieldBegin('downloadUrl', TType::STRING, 24);
      $xfer += $output->writeString($this->downloadUrl);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->buddyMid !== null) {
      $xfer += $output->writeFieldBegin('buddyMid', TType::STRING, 25);
      $xfer += $output->writeString($this->buddyMid);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->publishSince !== null) {
      $xfer += $output->writeFieldBegin('publishSince', TType::I64, 26);
      $xfer += $output->writeI64($this->publishSince);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->newFlag !== null) {
      $xfer += $output->writeFieldBegin('newFlag', TType::BOOL, 27);
      $xfer += $output->writeBool($this->newFlag);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->missionFlag !== null) {
      $xfer += $output->writeFieldBegin('missionFlag', TType::BOOL, 28);
      $xfer += $output->writeBool($this->missionFlag);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ProductList {
  static $_TSPEC;

  /**
   * @var bool
   */
  public $hasNext = null;
  /**
   * @var int
   */
  public $bannerSequence = null;
  /**
   * @var int
   */
  public $bannerTargetType = null;
  /**
   * @var string
   */
  public $bannerTargetPath = null;
  /**
   * @var \Product[]
   */
  public $productList = null;
  /**
   * @var string
   */
  public $bannerLang = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'hasNext',
          'type' => TType::BOOL,
          ),
        4 => array(
          'var' => 'bannerSequence',
          'type' => TType::I64,
          ),
        5 => array(
          'var' => 'bannerTargetType',
          'type' => TType::I32,
          ),
        6 => array(
          'var' => 'bannerTargetPath',
          'type' => TType::STRING,
          ),
        7 => array(
          'var' => 'productList',
          'type' => TType::LST,
          'etype' => TType::STRUCT,
          'elem' => array(
            'type' => TType::STRUCT,
            'class' => '\Product',
            ),
          ),
        8 => array(
          'var' => 'bannerLang',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['hasNext'])) {
        $this->hasNext = $vals['hasNext'];
      }
      if (isset($vals['bannerSequence'])) {
        $this->bannerSequence = $vals['bannerSequence'];
      }
      if (isset($vals['bannerTargetType'])) {
        $this->bannerTargetType = $vals['bannerTargetType'];
      }
      if (isset($vals['bannerTargetPath'])) {
        $this->bannerTargetPath = $vals['bannerTargetPath'];
      }
      if (isset($vals['productList'])) {
        $this->productList = $vals['productList'];
      }
      if (isset($vals['bannerLang'])) {
        $this->bannerLang = $vals['bannerLang'];
      }
    }
  }

  public function getName() {
    return 'ProductList';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->hasNext);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->bannerSequence);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->bannerTargetType);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->bannerTargetPath);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::LST) {
            $this->productList = array();
            $_size227 = 0;
            $_etype230 = 0;
            $xfer += $input->readListBegin($_etype230, $_size227);
            for ($_i231 = 0; $_i231 < $_size227; ++$_i231)
            {
              $elem232 = null;
              $elem232 = new \Product();
              $xfer += $elem232->read($input);
              $this->productList []= $elem232;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 8:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->bannerLang);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ProductList');
    if ($this->hasNext !== null) {
      $xfer += $output->writeFieldBegin('hasNext', TType::BOOL, 1);
      $xfer += $output->writeBool($this->hasNext);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->bannerSequence !== null) {
      $xfer += $output->writeFieldBegin('bannerSequence', TType::I64, 4);
      $xfer += $output->writeI64($this->bannerSequence);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->bannerTargetType !== null) {
      $xfer += $output->writeFieldBegin('bannerTargetType', TType::I32, 5);
      $xfer += $output->writeI32($this->bannerTargetType);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->bannerTargetPath !== null) {
      $xfer += $output->writeFieldBegin('bannerTargetPath', TType::STRING, 6);
      $xfer += $output->writeString($this->bannerTargetPath);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->productList !== null) {
      if (!is_array($this->productList)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('productList', TType::LST, 7);
      {
        $output->writeListBegin(TType::STRUCT, count($this->productList));
        {
          foreach ($this->productList as $iter233)
          {
            $xfer += $iter233->write($output);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->bannerLang !== null) {
      $xfer += $output->writeFieldBegin('bannerLang', TType::STRING, 8);
      $xfer += $output->writeString($this->bannerLang);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ProductSimple {
  static $_TSPEC;

  /**
   * @var string
   */
  public $productId = null;
  /**
   * @var int
   */
  public $packageId = null;
  /**
   * @var int
   */
  public $version = null;
  /**
   * @var bool
   */
  public $onSale = null;
  /**
   * @var int
   */
  public $validUntil = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'productId',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'packageId',
          'type' => TType::I64,
          ),
        3 => array(
          'var' => 'version',
          'type' => TType::I32,
          ),
        4 => array(
          'var' => 'onSale',
          'type' => TType::BOOL,
          ),
        5 => array(
          'var' => 'validUntil',
          'type' => TType::I64,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['productId'])) {
        $this->productId = $vals['productId'];
      }
      if (isset($vals['packageId'])) {
        $this->packageId = $vals['packageId'];
      }
      if (isset($vals['version'])) {
        $this->version = $vals['version'];
      }
      if (isset($vals['onSale'])) {
        $this->onSale = $vals['onSale'];
      }
      if (isset($vals['validUntil'])) {
        $this->validUntil = $vals['validUntil'];
      }
    }
  }

  public function getName() {
    return 'ProductSimple';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->productId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->packageId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->version);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->onSale);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->validUntil);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ProductSimple');
    if ($this->productId !== null) {
      $xfer += $output->writeFieldBegin('productId', TType::STRING, 1);
      $xfer += $output->writeString($this->productId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->packageId !== null) {
      $xfer += $output->writeFieldBegin('packageId', TType::I64, 2);
      $xfer += $output->writeI64($this->packageId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->version !== null) {
      $xfer += $output->writeFieldBegin('version', TType::I32, 3);
      $xfer += $output->writeI32($this->version);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->onSale !== null) {
      $xfer += $output->writeFieldBegin('onSale', TType::BOOL, 4);
      $xfer += $output->writeBool($this->onSale);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->validUntil !== null) {
      $xfer += $output->writeFieldBegin('validUntil', TType::I64, 5);
      $xfer += $output->writeI64($this->validUntil);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ProductSimpleList {
  static $_TSPEC;

  /**
   * @var bool
   */
  public $hasNext = null;
  /**
   * @var int
   */
  public $reinvokeHour = null;
  /**
   * @var int
   */
  public $lastVersionSeq = null;
  /**
   * @var \ProductSimple[]
   */
  public $productList = null;
  /**
   * @var int
   */
  public $recentNewReleaseDate = null;
  /**
   * @var int
   */
  public $recentEventReleaseDate = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'hasNext',
          'type' => TType::BOOL,
          ),
        2 => array(
          'var' => 'reinvokeHour',
          'type' => TType::I32,
          ),
        3 => array(
          'var' => 'lastVersionSeq',
          'type' => TType::I64,
          ),
        4 => array(
          'var' => 'productList',
          'type' => TType::LST,
          'etype' => TType::STRUCT,
          'elem' => array(
            'type' => TType::STRUCT,
            'class' => '\ProductSimple',
            ),
          ),
        5 => array(
          'var' => 'recentNewReleaseDate',
          'type' => TType::I64,
          ),
        6 => array(
          'var' => 'recentEventReleaseDate',
          'type' => TType::I64,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['hasNext'])) {
        $this->hasNext = $vals['hasNext'];
      }
      if (isset($vals['reinvokeHour'])) {
        $this->reinvokeHour = $vals['reinvokeHour'];
      }
      if (isset($vals['lastVersionSeq'])) {
        $this->lastVersionSeq = $vals['lastVersionSeq'];
      }
      if (isset($vals['productList'])) {
        $this->productList = $vals['productList'];
      }
      if (isset($vals['recentNewReleaseDate'])) {
        $this->recentNewReleaseDate = $vals['recentNewReleaseDate'];
      }
      if (isset($vals['recentEventReleaseDate'])) {
        $this->recentEventReleaseDate = $vals['recentEventReleaseDate'];
      }
    }
  }

  public function getName() {
    return 'ProductSimpleList';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->hasNext);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->reinvokeHour);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->lastVersionSeq);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::LST) {
            $this->productList = array();
            $_size234 = 0;
            $_etype237 = 0;
            $xfer += $input->readListBegin($_etype237, $_size234);
            for ($_i238 = 0; $_i238 < $_size234; ++$_i238)
            {
              $elem239 = null;
              $elem239 = new \ProductSimple();
              $xfer += $elem239->read($input);
              $this->productList []= $elem239;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->recentNewReleaseDate);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->recentEventReleaseDate);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ProductSimpleList');
    if ($this->hasNext !== null) {
      $xfer += $output->writeFieldBegin('hasNext', TType::BOOL, 1);
      $xfer += $output->writeBool($this->hasNext);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->reinvokeHour !== null) {
      $xfer += $output->writeFieldBegin('reinvokeHour', TType::I32, 2);
      $xfer += $output->writeI32($this->reinvokeHour);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->lastVersionSeq !== null) {
      $xfer += $output->writeFieldBegin('lastVersionSeq', TType::I64, 3);
      $xfer += $output->writeI64($this->lastVersionSeq);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->productList !== null) {
      if (!is_array($this->productList)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('productList', TType::LST, 4);
      {
        $output->writeListBegin(TType::STRUCT, count($this->productList));
        {
          foreach ($this->productList as $iter240)
          {
            $xfer += $iter240->write($output);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->recentNewReleaseDate !== null) {
      $xfer += $output->writeFieldBegin('recentNewReleaseDate', TType::I64, 5);
      $xfer += $output->writeI64($this->recentNewReleaseDate);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->recentEventReleaseDate !== null) {
      $xfer += $output->writeFieldBegin('recentEventReleaseDate', TType::I64, 6);
      $xfer += $output->writeI64($this->recentEventReleaseDate);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class Profile {
  static $_TSPEC;

  /**
   * @var string
   */
  public $mid = null;
  /**
   * @var string
   */
  public $userid = null;
  /**
   * @var string
   */
  public $phone = null;
  /**
   * @var string
   */
  public $email = null;
  /**
   * @var string
   */
  public $regionCode = null;
  /**
   * @var string
   */
  public $displayName = null;
  /**
   * @var string
   */
  public $phoneticName = null;
  /**
   * @var string
   */
  public $pictureStatus = null;
  /**
   * @var string
   */
  public $thumbnailUrl = null;
  /**
   * @var string
   */
  public $statusMessage = null;
  /**
   * @var bool
   */
  public $allowSearchByUserid = null;
  /**
   * @var bool
   */
  public $allowSearchByEmail = null;
  /**
   * @var string
   */
  public $picturePath = null;
  /**
   * @var string
   */
  public $musicProfile = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'mid',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'userid',
          'type' => TType::STRING,
          ),
        10 => array(
          'var' => 'phone',
          'type' => TType::STRING,
          ),
        11 => array(
          'var' => 'email',
          'type' => TType::STRING,
          ),
        12 => array(
          'var' => 'regionCode',
          'type' => TType::STRING,
          ),
        20 => array(
          'var' => 'displayName',
          'type' => TType::STRING,
          ),
        21 => array(
          'var' => 'phoneticName',
          'type' => TType::STRING,
          ),
        22 => array(
          'var' => 'pictureStatus',
          'type' => TType::STRING,
          ),
        23 => array(
          'var' => 'thumbnailUrl',
          'type' => TType::STRING,
          ),
        24 => array(
          'var' => 'statusMessage',
          'type' => TType::STRING,
          ),
        31 => array(
          'var' => 'allowSearchByUserid',
          'type' => TType::BOOL,
          ),
        32 => array(
          'var' => 'allowSearchByEmail',
          'type' => TType::BOOL,
          ),
        33 => array(
          'var' => 'picturePath',
          'type' => TType::STRING,
          ),
        34 => array(
          'var' => 'musicProfile',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['mid'])) {
        $this->mid = $vals['mid'];
      }
      if (isset($vals['userid'])) {
        $this->userid = $vals['userid'];
      }
      if (isset($vals['phone'])) {
        $this->phone = $vals['phone'];
      }
      if (isset($vals['email'])) {
        $this->email = $vals['email'];
      }
      if (isset($vals['regionCode'])) {
        $this->regionCode = $vals['regionCode'];
      }
      if (isset($vals['displayName'])) {
        $this->displayName = $vals['displayName'];
      }
      if (isset($vals['phoneticName'])) {
        $this->phoneticName = $vals['phoneticName'];
      }
      if (isset($vals['pictureStatus'])) {
        $this->pictureStatus = $vals['pictureStatus'];
      }
      if (isset($vals['thumbnailUrl'])) {
        $this->thumbnailUrl = $vals['thumbnailUrl'];
      }
      if (isset($vals['statusMessage'])) {
        $this->statusMessage = $vals['statusMessage'];
      }
      if (isset($vals['allowSearchByUserid'])) {
        $this->allowSearchByUserid = $vals['allowSearchByUserid'];
      }
      if (isset($vals['allowSearchByEmail'])) {
        $this->allowSearchByEmail = $vals['allowSearchByEmail'];
      }
      if (isset($vals['picturePath'])) {
        $this->picturePath = $vals['picturePath'];
      }
      if (isset($vals['musicProfile'])) {
        $this->musicProfile = $vals['musicProfile'];
      }
    }
  }

  public function getName() {
    return 'Profile';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->mid);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->userid);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 10:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->phone);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 11:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->email);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 12:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->regionCode);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 20:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->displayName);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 21:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->phoneticName);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 22:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->pictureStatus);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 23:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->thumbnailUrl);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 24:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->statusMessage);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 31:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->allowSearchByUserid);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 32:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->allowSearchByEmail);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 33:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->picturePath);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 34:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->musicProfile);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('Profile');
    if ($this->mid !== null) {
      $xfer += $output->writeFieldBegin('mid', TType::STRING, 1);
      $xfer += $output->writeString($this->mid);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->userid !== null) {
      $xfer += $output->writeFieldBegin('userid', TType::STRING, 3);
      $xfer += $output->writeString($this->userid);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->phone !== null) {
      $xfer += $output->writeFieldBegin('phone', TType::STRING, 10);
      $xfer += $output->writeString($this->phone);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->email !== null) {
      $xfer += $output->writeFieldBegin('email', TType::STRING, 11);
      $xfer += $output->writeString($this->email);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->regionCode !== null) {
      $xfer += $output->writeFieldBegin('regionCode', TType::STRING, 12);
      $xfer += $output->writeString($this->regionCode);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->displayName !== null) {
      $xfer += $output->writeFieldBegin('displayName', TType::STRING, 20);
      $xfer += $output->writeString($this->displayName);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->phoneticName !== null) {
      $xfer += $output->writeFieldBegin('phoneticName', TType::STRING, 21);
      $xfer += $output->writeString($this->phoneticName);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->pictureStatus !== null) {
      $xfer += $output->writeFieldBegin('pictureStatus', TType::STRING, 22);
      $xfer += $output->writeString($this->pictureStatus);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->thumbnailUrl !== null) {
      $xfer += $output->writeFieldBegin('thumbnailUrl', TType::STRING, 23);
      $xfer += $output->writeString($this->thumbnailUrl);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->statusMessage !== null) {
      $xfer += $output->writeFieldBegin('statusMessage', TType::STRING, 24);
      $xfer += $output->writeString($this->statusMessage);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->allowSearchByUserid !== null) {
      $xfer += $output->writeFieldBegin('allowSearchByUserid', TType::BOOL, 31);
      $xfer += $output->writeBool($this->allowSearchByUserid);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->allowSearchByEmail !== null) {
      $xfer += $output->writeFieldBegin('allowSearchByEmail', TType::BOOL, 32);
      $xfer += $output->writeBool($this->allowSearchByEmail);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->picturePath !== null) {
      $xfer += $output->writeFieldBegin('picturePath', TType::STRING, 33);
      $xfer += $output->writeString($this->picturePath);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->musicProfile !== null) {
      $xfer += $output->writeFieldBegin('musicProfile', TType::STRING, 34);
      $xfer += $output->writeString($this->musicProfile);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ProximityMatchCandidateResult {
  static $_TSPEC;

  /**
   * @var \Contact[]
   */
  public $users = null;
  /**
   * @var \Contact[]
   */
  public $buddies = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'users',
          'type' => TType::LST,
          'etype' => TType::STRUCT,
          'elem' => array(
            'type' => TType::STRUCT,
            'class' => '\Contact',
            ),
          ),
        2 => array(
          'var' => 'buddies',
          'type' => TType::LST,
          'etype' => TType::STRUCT,
          'elem' => array(
            'type' => TType::STRUCT,
            'class' => '\Contact',
            ),
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['users'])) {
        $this->users = $vals['users'];
      }
      if (isset($vals['buddies'])) {
        $this->buddies = $vals['buddies'];
      }
    }
  }

  public function getName() {
    return 'ProximityMatchCandidateResult';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::LST) {
            $this->users = array();
            $_size241 = 0;
            $_etype244 = 0;
            $xfer += $input->readListBegin($_etype244, $_size241);
            for ($_i245 = 0; $_i245 < $_size241; ++$_i245)
            {
              $elem246 = null;
              $elem246 = new \Contact();
              $xfer += $elem246->read($input);
              $this->users []= $elem246;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::LST) {
            $this->buddies = array();
            $_size247 = 0;
            $_etype250 = 0;
            $xfer += $input->readListBegin($_etype250, $_size247);
            for ($_i251 = 0; $_i251 < $_size247; ++$_i251)
            {
              $elem252 = null;
              $elem252 = new \Contact();
              $xfer += $elem252->read($input);
              $this->buddies []= $elem252;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ProximityMatchCandidateResult');
    if ($this->users !== null) {
      if (!is_array($this->users)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('users', TType::LST, 1);
      {
        $output->writeListBegin(TType::STRUCT, count($this->users));
        {
          foreach ($this->users as $iter253)
          {
            $xfer += $iter253->write($output);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->buddies !== null) {
      if (!is_array($this->buddies)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('buddies', TType::LST, 2);
      {
        $output->writeListBegin(TType::STRUCT, count($this->buddies));
        {
          foreach ($this->buddies as $iter254)
          {
            $xfer += $iter254->write($output);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class RegisterWithSnsIdResult {
  static $_TSPEC;

  /**
   * @var string
   */
  public $authToken = null;
  /**
   * @var bool
   */
  public $userCreated = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'authToken',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'userCreated',
          'type' => TType::BOOL,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['authToken'])) {
        $this->authToken = $vals['authToken'];
      }
      if (isset($vals['userCreated'])) {
        $this->userCreated = $vals['userCreated'];
      }
    }
  }

  public function getName() {
    return 'RegisterWithSnsIdResult';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->authToken);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->userCreated);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('RegisterWithSnsIdResult');
    if ($this->authToken !== null) {
      $xfer += $output->writeFieldBegin('authToken', TType::STRING, 1);
      $xfer += $output->writeString($this->authToken);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->userCreated !== null) {
      $xfer += $output->writeFieldBegin('userCreated', TType::BOOL, 2);
      $xfer += $output->writeBool($this->userCreated);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class RequestTokenResponse {
  static $_TSPEC;

  /**
   * @var string
   */
  public $requestToken = null;
  /**
   * @var string
   */
  public $returnUrl = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'requestToken',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'returnUrl',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['requestToken'])) {
        $this->requestToken = $vals['requestToken'];
      }
      if (isset($vals['returnUrl'])) {
        $this->returnUrl = $vals['returnUrl'];
      }
    }
  }

  public function getName() {
    return 'RequestTokenResponse';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->requestToken);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->returnUrl);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('RequestTokenResponse');
    if ($this->requestToken !== null) {
      $xfer += $output->writeFieldBegin('requestToken', TType::STRING, 1);
      $xfer += $output->writeString($this->requestToken);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->returnUrl !== null) {
      $xfer += $output->writeFieldBegin('returnUrl', TType::STRING, 2);
      $xfer += $output->writeString($this->returnUrl);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class Room {
  static $_TSPEC;

  /**
   * @var string
   */
  public $mid = null;
  /**
   * @var int
   */
  public $createdTime = null;
  /**
   * @var \Contact[]
   */
  public $contacts = null;
  /**
   * @var bool
   */
  public $notificationDisabled = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'mid',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'createdTime',
          'type' => TType::I64,
          ),
        10 => array(
          'var' => 'contacts',
          'type' => TType::LST,
          'etype' => TType::STRUCT,
          'elem' => array(
            'type' => TType::STRUCT,
            'class' => '\Contact',
            ),
          ),
        31 => array(
          'var' => 'notificationDisabled',
          'type' => TType::BOOL,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['mid'])) {
        $this->mid = $vals['mid'];
      }
      if (isset($vals['createdTime'])) {
        $this->createdTime = $vals['createdTime'];
      }
      if (isset($vals['contacts'])) {
        $this->contacts = $vals['contacts'];
      }
      if (isset($vals['notificationDisabled'])) {
        $this->notificationDisabled = $vals['notificationDisabled'];
      }
    }
  }

  public function getName() {
    return 'Room';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->mid);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->createdTime);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 10:
          if ($ftype == TType::LST) {
            $this->contacts = array();
            $_size255 = 0;
            $_etype258 = 0;
            $xfer += $input->readListBegin($_etype258, $_size255);
            for ($_i259 = 0; $_i259 < $_size255; ++$_i259)
            {
              $elem260 = null;
              $elem260 = new \Contact();
              $xfer += $elem260->read($input);
              $this->contacts []= $elem260;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 31:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->notificationDisabled);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('Room');
    if ($this->mid !== null) {
      $xfer += $output->writeFieldBegin('mid', TType::STRING, 1);
      $xfer += $output->writeString($this->mid);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->createdTime !== null) {
      $xfer += $output->writeFieldBegin('createdTime', TType::I64, 2);
      $xfer += $output->writeI64($this->createdTime);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->contacts !== null) {
      if (!is_array($this->contacts)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('contacts', TType::LST, 10);
      {
        $output->writeListBegin(TType::STRUCT, count($this->contacts));
        {
          foreach ($this->contacts as $iter261)
          {
            $xfer += $iter261->write($output);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->notificationDisabled !== null) {
      $xfer += $output->writeFieldBegin('notificationDisabled', TType::BOOL, 31);
      $xfer += $output->writeBool($this->notificationDisabled);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class RSAKey {
  static $_TSPEC;

  /**
   * @var string
   */
  public $keynm = null;
  /**
   * @var string
   */
  public $nvalue = null;
  /**
   * @var string
   */
  public $evalue = null;
  /**
   * @var string
   */
  public $sessionKey = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'keynm',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'nvalue',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'evalue',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'sessionKey',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['keynm'])) {
        $this->keynm = $vals['keynm'];
      }
      if (isset($vals['nvalue'])) {
        $this->nvalue = $vals['nvalue'];
      }
      if (isset($vals['evalue'])) {
        $this->evalue = $vals['evalue'];
      }
      if (isset($vals['sessionKey'])) {
        $this->sessionKey = $vals['sessionKey'];
      }
    }
  }

  public function getName() {
    return 'RSAKey';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->keynm);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->nvalue);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->evalue);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->sessionKey);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('RSAKey');
    if ($this->keynm !== null) {
      $xfer += $output->writeFieldBegin('keynm', TType::STRING, 1);
      $xfer += $output->writeString($this->keynm);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->nvalue !== null) {
      $xfer += $output->writeFieldBegin('nvalue', TType::STRING, 2);
      $xfer += $output->writeString($this->nvalue);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->evalue !== null) {
      $xfer += $output->writeFieldBegin('evalue', TType::STRING, 3);
      $xfer += $output->writeString($this->evalue);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->sessionKey !== null) {
      $xfer += $output->writeFieldBegin('sessionKey', TType::STRING, 4);
      $xfer += $output->writeString($this->sessionKey);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class SendBuddyMessageResult {
  static $_TSPEC;

  /**
   * @var string
   */
  public $requestId = null;
  /**
   * @var int
   */
  public $state = null;
  /**
   * @var string
   */
  public $messageId = null;
  /**
   * @var int
   */
  public $eventNo = null;
  /**
   * @var int
   */
  public $receiverCount = null;
  /**
   * @var int
   */
  public $successCount = null;
  /**
   * @var int
   */
  public $failCount = null;
  /**
   * @var int
   */
  public $cancelCount = null;
  /**
   * @var int
   */
  public $blockCount = null;
  /**
   * @var int
   */
  public $unregisterCount = null;
  /**
   * @var int
   */
  public $timestamp = null;
  /**
   * @var string
   */
  public $message = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'requestId',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'state',
          'type' => TType::I32,
          ),
        3 => array(
          'var' => 'messageId',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'eventNo',
          'type' => TType::I32,
          ),
        11 => array(
          'var' => 'receiverCount',
          'type' => TType::I64,
          ),
        12 => array(
          'var' => 'successCount',
          'type' => TType::I64,
          ),
        13 => array(
          'var' => 'failCount',
          'type' => TType::I64,
          ),
        14 => array(
          'var' => 'cancelCount',
          'type' => TType::I64,
          ),
        15 => array(
          'var' => 'blockCount',
          'type' => TType::I64,
          ),
        16 => array(
          'var' => 'unregisterCount',
          'type' => TType::I64,
          ),
        21 => array(
          'var' => 'timestamp',
          'type' => TType::I64,
          ),
        22 => array(
          'var' => 'message',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['requestId'])) {
        $this->requestId = $vals['requestId'];
      }
      if (isset($vals['state'])) {
        $this->state = $vals['state'];
      }
      if (isset($vals['messageId'])) {
        $this->messageId = $vals['messageId'];
      }
      if (isset($vals['eventNo'])) {
        $this->eventNo = $vals['eventNo'];
      }
      if (isset($vals['receiverCount'])) {
        $this->receiverCount = $vals['receiverCount'];
      }
      if (isset($vals['successCount'])) {
        $this->successCount = $vals['successCount'];
      }
      if (isset($vals['failCount'])) {
        $this->failCount = $vals['failCount'];
      }
      if (isset($vals['cancelCount'])) {
        $this->cancelCount = $vals['cancelCount'];
      }
      if (isset($vals['blockCount'])) {
        $this->blockCount = $vals['blockCount'];
      }
      if (isset($vals['unregisterCount'])) {
        $this->unregisterCount = $vals['unregisterCount'];
      }
      if (isset($vals['timestamp'])) {
        $this->timestamp = $vals['timestamp'];
      }
      if (isset($vals['message'])) {
        $this->message = $vals['message'];
      }
    }
  }

  public function getName() {
    return 'SendBuddyMessageResult';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->requestId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->state);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->messageId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->eventNo);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 11:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->receiverCount);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 12:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->successCount);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 13:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->failCount);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 14:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->cancelCount);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 15:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->blockCount);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 16:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->unregisterCount);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 21:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->timestamp);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 22:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->message);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('SendBuddyMessageResult');
    if ($this->requestId !== null) {
      $xfer += $output->writeFieldBegin('requestId', TType::STRING, 1);
      $xfer += $output->writeString($this->requestId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->state !== null) {
      $xfer += $output->writeFieldBegin('state', TType::I32, 2);
      $xfer += $output->writeI32($this->state);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->messageId !== null) {
      $xfer += $output->writeFieldBegin('messageId', TType::STRING, 3);
      $xfer += $output->writeString($this->messageId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->eventNo !== null) {
      $xfer += $output->writeFieldBegin('eventNo', TType::I32, 4);
      $xfer += $output->writeI32($this->eventNo);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->receiverCount !== null) {
      $xfer += $output->writeFieldBegin('receiverCount', TType::I64, 11);
      $xfer += $output->writeI64($this->receiverCount);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->successCount !== null) {
      $xfer += $output->writeFieldBegin('successCount', TType::I64, 12);
      $xfer += $output->writeI64($this->successCount);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->failCount !== null) {
      $xfer += $output->writeFieldBegin('failCount', TType::I64, 13);
      $xfer += $output->writeI64($this->failCount);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->cancelCount !== null) {
      $xfer += $output->writeFieldBegin('cancelCount', TType::I64, 14);
      $xfer += $output->writeI64($this->cancelCount);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->blockCount !== null) {
      $xfer += $output->writeFieldBegin('blockCount', TType::I64, 15);
      $xfer += $output->writeI64($this->blockCount);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->unregisterCount !== null) {
      $xfer += $output->writeFieldBegin('unregisterCount', TType::I64, 16);
      $xfer += $output->writeI64($this->unregisterCount);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->timestamp !== null) {
      $xfer += $output->writeFieldBegin('timestamp', TType::I64, 21);
      $xfer += $output->writeI64($this->timestamp);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->message !== null) {
      $xfer += $output->writeFieldBegin('message', TType::STRING, 22);
      $xfer += $output->writeString($this->message);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class SetBuddyOnAirResult {
  static $_TSPEC;

  /**
   * @var string
   */
  public $requestId = null;
  /**
   * @var int
   */
  public $state = null;
  /**
   * @var int
   */
  public $eventNo = null;
  /**
   * @var int
   */
  public $receiverCount = null;
  /**
   * @var int
   */
  public $successCount = null;
  /**
   * @var int
   */
  public $failCount = null;
  /**
   * @var int
   */
  public $cancelCount = null;
  /**
   * @var int
   */
  public $unregisterCount = null;
  /**
   * @var int
   */
  public $timestamp = null;
  /**
   * @var string
   */
  public $message = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'requestId',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'state',
          'type' => TType::I32,
          ),
        3 => array(
          'var' => 'eventNo',
          'type' => TType::I32,
          ),
        11 => array(
          'var' => 'receiverCount',
          'type' => TType::I64,
          ),
        12 => array(
          'var' => 'successCount',
          'type' => TType::I64,
          ),
        13 => array(
          'var' => 'failCount',
          'type' => TType::I64,
          ),
        14 => array(
          'var' => 'cancelCount',
          'type' => TType::I64,
          ),
        15 => array(
          'var' => 'unregisterCount',
          'type' => TType::I64,
          ),
        21 => array(
          'var' => 'timestamp',
          'type' => TType::I64,
          ),
        22 => array(
          'var' => 'message',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['requestId'])) {
        $this->requestId = $vals['requestId'];
      }
      if (isset($vals['state'])) {
        $this->state = $vals['state'];
      }
      if (isset($vals['eventNo'])) {
        $this->eventNo = $vals['eventNo'];
      }
      if (isset($vals['receiverCount'])) {
        $this->receiverCount = $vals['receiverCount'];
      }
      if (isset($vals['successCount'])) {
        $this->successCount = $vals['successCount'];
      }
      if (isset($vals['failCount'])) {
        $this->failCount = $vals['failCount'];
      }
      if (isset($vals['cancelCount'])) {
        $this->cancelCount = $vals['cancelCount'];
      }
      if (isset($vals['unregisterCount'])) {
        $this->unregisterCount = $vals['unregisterCount'];
      }
      if (isset($vals['timestamp'])) {
        $this->timestamp = $vals['timestamp'];
      }
      if (isset($vals['message'])) {
        $this->message = $vals['message'];
      }
    }
  }

  public function getName() {
    return 'SetBuddyOnAirResult';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->requestId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->state);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->eventNo);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 11:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->receiverCount);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 12:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->successCount);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 13:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->failCount);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 14:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->cancelCount);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 15:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->unregisterCount);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 21:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->timestamp);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 22:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->message);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('SetBuddyOnAirResult');
    if ($this->requestId !== null) {
      $xfer += $output->writeFieldBegin('requestId', TType::STRING, 1);
      $xfer += $output->writeString($this->requestId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->state !== null) {
      $xfer += $output->writeFieldBegin('state', TType::I32, 2);
      $xfer += $output->writeI32($this->state);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->eventNo !== null) {
      $xfer += $output->writeFieldBegin('eventNo', TType::I32, 3);
      $xfer += $output->writeI32($this->eventNo);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->receiverCount !== null) {
      $xfer += $output->writeFieldBegin('receiverCount', TType::I64, 11);
      $xfer += $output->writeI64($this->receiverCount);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->successCount !== null) {
      $xfer += $output->writeFieldBegin('successCount', TType::I64, 12);
      $xfer += $output->writeI64($this->successCount);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->failCount !== null) {
      $xfer += $output->writeFieldBegin('failCount', TType::I64, 13);
      $xfer += $output->writeI64($this->failCount);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->cancelCount !== null) {
      $xfer += $output->writeFieldBegin('cancelCount', TType::I64, 14);
      $xfer += $output->writeI64($this->cancelCount);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->unregisterCount !== null) {
      $xfer += $output->writeFieldBegin('unregisterCount', TType::I64, 15);
      $xfer += $output->writeI64($this->unregisterCount);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->timestamp !== null) {
      $xfer += $output->writeFieldBegin('timestamp', TType::I64, 21);
      $xfer += $output->writeI64($this->timestamp);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->message !== null) {
      $xfer += $output->writeFieldBegin('message', TType::STRING, 22);
      $xfer += $output->writeString($this->message);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class Settings {
  static $_TSPEC;

  /**
   * @var bool
   */
  public $notificationEnable = null;
  /**
   * @var int
   */
  public $notificationMuteExpiration = null;
  /**
   * @var bool
   */
  public $notificationNewMessage = null;
  /**
   * @var bool
   */
  public $notificationGroupInvitation = null;
  /**
   * @var bool
   */
  public $notificationShowMessage = null;
  /**
   * @var bool
   */
  public $notificationIncomingCall = null;
  /**
   * @var string
   */
  public $notificationSoundMessage = null;
  /**
   * @var string
   */
  public $notificationSoundGroup = null;
  /**
   * @var bool
   */
  public $notificationDisabledWithSub = null;
  /**
   * @var bool
   */
  public $privacySyncContacts = null;
  /**
   * @var bool
   */
  public $privacySearchByPhoneNumber = null;
  /**
   * @var bool
   */
  public $privacySearchByUserid = null;
  /**
   * @var bool
   */
  public $privacySearchByEmail = null;
  /**
   * @var bool
   */
  public $privacyAllowSecondaryDeviceLogin = null;
  /**
   * @var bool
   */
  public $privacyProfileImagePostToMyhome = null;
  /**
   * @var bool
   */
  public $privacyReceiveMessagesFromNotFriend = null;
  /**
   * @var string
   */
  public $contactMyTicket = null;
  /**
   * @var int
   */
  public $identityProvider = null;
  /**
   * @var string
   */
  public $identityIdentifier = null;
  /**
   * @var array
   */
  public $snsAccounts = null;
  /**
   * @var bool
   */
  public $phoneRegistration = null;
  /**
   * @var int
   */
  public $emailConfirmationStatus = null;
  /**
   * @var string
   */
  public $preferenceLocale = null;
  /**
   * @var array
   */
  public $customModes = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        10 => array(
          'var' => 'notificationEnable',
          'type' => TType::BOOL,
          ),
        11 => array(
          'var' => 'notificationMuteExpiration',
          'type' => TType::I64,
          ),
        12 => array(
          'var' => 'notificationNewMessage',
          'type' => TType::BOOL,
          ),
        13 => array(
          'var' => 'notificationGroupInvitation',
          'type' => TType::BOOL,
          ),
        14 => array(
          'var' => 'notificationShowMessage',
          'type' => TType::BOOL,
          ),
        15 => array(
          'var' => 'notificationIncomingCall',
          'type' => TType::BOOL,
          ),
        16 => array(
          'var' => 'notificationSoundMessage',
          'type' => TType::STRING,
          ),
        17 => array(
          'var' => 'notificationSoundGroup',
          'type' => TType::STRING,
          ),
        18 => array(
          'var' => 'notificationDisabledWithSub',
          'type' => TType::BOOL,
          ),
        20 => array(
          'var' => 'privacySyncContacts',
          'type' => TType::BOOL,
          ),
        21 => array(
          'var' => 'privacySearchByPhoneNumber',
          'type' => TType::BOOL,
          ),
        22 => array(
          'var' => 'privacySearchByUserid',
          'type' => TType::BOOL,
          ),
        23 => array(
          'var' => 'privacySearchByEmail',
          'type' => TType::BOOL,
          ),
        24 => array(
          'var' => 'privacyAllowSecondaryDeviceLogin',
          'type' => TType::BOOL,
          ),
        25 => array(
          'var' => 'privacyProfileImagePostToMyhome',
          'type' => TType::BOOL,
          ),
        26 => array(
          'var' => 'privacyReceiveMessagesFromNotFriend',
          'type' => TType::BOOL,
          ),
        30 => array(
          'var' => 'contactMyTicket',
          'type' => TType::STRING,
          ),
        40 => array(
          'var' => 'identityProvider',
          'type' => TType::I32,
          ),
        41 => array(
          'var' => 'identityIdentifier',
          'type' => TType::STRING,
          ),
        42 => array(
          'var' => 'snsAccounts',
          'type' => TType::MAP,
          'ktype' => TType::I32,
          'vtype' => TType::STRING,
          'key' => array(
            'type' => TType::I32,
          ),
          'val' => array(
            'type' => TType::STRING,
            ),
          ),
        43 => array(
          'var' => 'phoneRegistration',
          'type' => TType::BOOL,
          ),
        44 => array(
          'var' => 'emailConfirmationStatus',
          'type' => TType::I32,
          ),
        50 => array(
          'var' => 'preferenceLocale',
          'type' => TType::STRING,
          ),
        60 => array(
          'var' => 'customModes',
          'type' => TType::MAP,
          'ktype' => TType::I32,
          'vtype' => TType::STRING,
          'key' => array(
            'type' => TType::I32,
          ),
          'val' => array(
            'type' => TType::STRING,
            ),
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['notificationEnable'])) {
        $this->notificationEnable = $vals['notificationEnable'];
      }
      if (isset($vals['notificationMuteExpiration'])) {
        $this->notificationMuteExpiration = $vals['notificationMuteExpiration'];
      }
      if (isset($vals['notificationNewMessage'])) {
        $this->notificationNewMessage = $vals['notificationNewMessage'];
      }
      if (isset($vals['notificationGroupInvitation'])) {
        $this->notificationGroupInvitation = $vals['notificationGroupInvitation'];
      }
      if (isset($vals['notificationShowMessage'])) {
        $this->notificationShowMessage = $vals['notificationShowMessage'];
      }
      if (isset($vals['notificationIncomingCall'])) {
        $this->notificationIncomingCall = $vals['notificationIncomingCall'];
      }
      if (isset($vals['notificationSoundMessage'])) {
        $this->notificationSoundMessage = $vals['notificationSoundMessage'];
      }
      if (isset($vals['notificationSoundGroup'])) {
        $this->notificationSoundGroup = $vals['notificationSoundGroup'];
      }
      if (isset($vals['notificationDisabledWithSub'])) {
        $this->notificationDisabledWithSub = $vals['notificationDisabledWithSub'];
      }
      if (isset($vals['privacySyncContacts'])) {
        $this->privacySyncContacts = $vals['privacySyncContacts'];
      }
      if (isset($vals['privacySearchByPhoneNumber'])) {
        $this->privacySearchByPhoneNumber = $vals['privacySearchByPhoneNumber'];
      }
      if (isset($vals['privacySearchByUserid'])) {
        $this->privacySearchByUserid = $vals['privacySearchByUserid'];
      }
      if (isset($vals['privacySearchByEmail'])) {
        $this->privacySearchByEmail = $vals['privacySearchByEmail'];
      }
      if (isset($vals['privacyAllowSecondaryDeviceLogin'])) {
        $this->privacyAllowSecondaryDeviceLogin = $vals['privacyAllowSecondaryDeviceLogin'];
      }
      if (isset($vals['privacyProfileImagePostToMyhome'])) {
        $this->privacyProfileImagePostToMyhome = $vals['privacyProfileImagePostToMyhome'];
      }
      if (isset($vals['privacyReceiveMessagesFromNotFriend'])) {
        $this->privacyReceiveMessagesFromNotFriend = $vals['privacyReceiveMessagesFromNotFriend'];
      }
      if (isset($vals['contactMyTicket'])) {
        $this->contactMyTicket = $vals['contactMyTicket'];
      }
      if (isset($vals['identityProvider'])) {
        $this->identityProvider = $vals['identityProvider'];
      }
      if (isset($vals['identityIdentifier'])) {
        $this->identityIdentifier = $vals['identityIdentifier'];
      }
      if (isset($vals['snsAccounts'])) {
        $this->snsAccounts = $vals['snsAccounts'];
      }
      if (isset($vals['phoneRegistration'])) {
        $this->phoneRegistration = $vals['phoneRegistration'];
      }
      if (isset($vals['emailConfirmationStatus'])) {
        $this->emailConfirmationStatus = $vals['emailConfirmationStatus'];
      }
      if (isset($vals['preferenceLocale'])) {
        $this->preferenceLocale = $vals['preferenceLocale'];
      }
      if (isset($vals['customModes'])) {
        $this->customModes = $vals['customModes'];
      }
    }
  }

  public function getName() {
    return 'Settings';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 10:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->notificationEnable);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 11:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->notificationMuteExpiration);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 12:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->notificationNewMessage);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 13:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->notificationGroupInvitation);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 14:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->notificationShowMessage);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 15:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->notificationIncomingCall);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 16:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->notificationSoundMessage);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 17:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->notificationSoundGroup);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 18:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->notificationDisabledWithSub);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 20:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->privacySyncContacts);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 21:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->privacySearchByPhoneNumber);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 22:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->privacySearchByUserid);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 23:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->privacySearchByEmail);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 24:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->privacyAllowSecondaryDeviceLogin);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 25:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->privacyProfileImagePostToMyhome);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 26:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->privacyReceiveMessagesFromNotFriend);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 30:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->contactMyTicket);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 40:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->identityProvider);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 41:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->identityIdentifier);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 42:
          if ($ftype == TType::MAP) {
            $this->snsAccounts = array();
            $_size262 = 0;
            $_ktype263 = 0;
            $_vtype264 = 0;
            $xfer += $input->readMapBegin($_ktype263, $_vtype264, $_size262);
            for ($_i266 = 0; $_i266 < $_size262; ++$_i266)
            {
              $key267 = 0;
              $val268 = '';
              $xfer += $input->readI32($key267);
              $xfer += $input->readString($val268);
              $this->snsAccounts[$key267] = $val268;
            }
            $xfer += $input->readMapEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 43:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->phoneRegistration);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 44:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->emailConfirmationStatus);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 50:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->preferenceLocale);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 60:
          if ($ftype == TType::MAP) {
            $this->customModes = array();
            $_size269 = 0;
            $_ktype270 = 0;
            $_vtype271 = 0;
            $xfer += $input->readMapBegin($_ktype270, $_vtype271, $_size269);
            for ($_i273 = 0; $_i273 < $_size269; ++$_i273)
            {
              $key274 = 0;
              $val275 = '';
              $xfer += $input->readI32($key274);
              $xfer += $input->readString($val275);
              $this->customModes[$key274] = $val275;
            }
            $xfer += $input->readMapEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('Settings');
    if ($this->notificationEnable !== null) {
      $xfer += $output->writeFieldBegin('notificationEnable', TType::BOOL, 10);
      $xfer += $output->writeBool($this->notificationEnable);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->notificationMuteExpiration !== null) {
      $xfer += $output->writeFieldBegin('notificationMuteExpiration', TType::I64, 11);
      $xfer += $output->writeI64($this->notificationMuteExpiration);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->notificationNewMessage !== null) {
      $xfer += $output->writeFieldBegin('notificationNewMessage', TType::BOOL, 12);
      $xfer += $output->writeBool($this->notificationNewMessage);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->notificationGroupInvitation !== null) {
      $xfer += $output->writeFieldBegin('notificationGroupInvitation', TType::BOOL, 13);
      $xfer += $output->writeBool($this->notificationGroupInvitation);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->notificationShowMessage !== null) {
      $xfer += $output->writeFieldBegin('notificationShowMessage', TType::BOOL, 14);
      $xfer += $output->writeBool($this->notificationShowMessage);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->notificationIncomingCall !== null) {
      $xfer += $output->writeFieldBegin('notificationIncomingCall', TType::BOOL, 15);
      $xfer += $output->writeBool($this->notificationIncomingCall);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->notificationSoundMessage !== null) {
      $xfer += $output->writeFieldBegin('notificationSoundMessage', TType::STRING, 16);
      $xfer += $output->writeString($this->notificationSoundMessage);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->notificationSoundGroup !== null) {
      $xfer += $output->writeFieldBegin('notificationSoundGroup', TType::STRING, 17);
      $xfer += $output->writeString($this->notificationSoundGroup);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->notificationDisabledWithSub !== null) {
      $xfer += $output->writeFieldBegin('notificationDisabledWithSub', TType::BOOL, 18);
      $xfer += $output->writeBool($this->notificationDisabledWithSub);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->privacySyncContacts !== null) {
      $xfer += $output->writeFieldBegin('privacySyncContacts', TType::BOOL, 20);
      $xfer += $output->writeBool($this->privacySyncContacts);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->privacySearchByPhoneNumber !== null) {
      $xfer += $output->writeFieldBegin('privacySearchByPhoneNumber', TType::BOOL, 21);
      $xfer += $output->writeBool($this->privacySearchByPhoneNumber);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->privacySearchByUserid !== null) {
      $xfer += $output->writeFieldBegin('privacySearchByUserid', TType::BOOL, 22);
      $xfer += $output->writeBool($this->privacySearchByUserid);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->privacySearchByEmail !== null) {
      $xfer += $output->writeFieldBegin('privacySearchByEmail', TType::BOOL, 23);
      $xfer += $output->writeBool($this->privacySearchByEmail);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->privacyAllowSecondaryDeviceLogin !== null) {
      $xfer += $output->writeFieldBegin('privacyAllowSecondaryDeviceLogin', TType::BOOL, 24);
      $xfer += $output->writeBool($this->privacyAllowSecondaryDeviceLogin);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->privacyProfileImagePostToMyhome !== null) {
      $xfer += $output->writeFieldBegin('privacyProfileImagePostToMyhome', TType::BOOL, 25);
      $xfer += $output->writeBool($this->privacyProfileImagePostToMyhome);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->privacyReceiveMessagesFromNotFriend !== null) {
      $xfer += $output->writeFieldBegin('privacyReceiveMessagesFromNotFriend', TType::BOOL, 26);
      $xfer += $output->writeBool($this->privacyReceiveMessagesFromNotFriend);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->contactMyTicket !== null) {
      $xfer += $output->writeFieldBegin('contactMyTicket', TType::STRING, 30);
      $xfer += $output->writeString($this->contactMyTicket);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->identityProvider !== null) {
      $xfer += $output->writeFieldBegin('identityProvider', TType::I32, 40);
      $xfer += $output->writeI32($this->identityProvider);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->identityIdentifier !== null) {
      $xfer += $output->writeFieldBegin('identityIdentifier', TType::STRING, 41);
      $xfer += $output->writeString($this->identityIdentifier);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->snsAccounts !== null) {
      if (!is_array($this->snsAccounts)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('snsAccounts', TType::MAP, 42);
      {
        $output->writeMapBegin(TType::I32, TType::STRING, count($this->snsAccounts));
        {
          foreach ($this->snsAccounts as $kiter276 => $viter277)
          {
            $xfer += $output->writeI32($kiter276);
            $xfer += $output->writeString($viter277);
          }
        }
        $output->writeMapEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->phoneRegistration !== null) {
      $xfer += $output->writeFieldBegin('phoneRegistration', TType::BOOL, 43);
      $xfer += $output->writeBool($this->phoneRegistration);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->emailConfirmationStatus !== null) {
      $xfer += $output->writeFieldBegin('emailConfirmationStatus', TType::I32, 44);
      $xfer += $output->writeI32($this->emailConfirmationStatus);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->preferenceLocale !== null) {
      $xfer += $output->writeFieldBegin('preferenceLocale', TType::STRING, 50);
      $xfer += $output->writeString($this->preferenceLocale);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->customModes !== null) {
      if (!is_array($this->customModes)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('customModes', TType::MAP, 60);
      {
        $output->writeMapBegin(TType::I32, TType::STRING, count($this->customModes));
        {
          foreach ($this->customModes as $kiter278 => $viter279)
          {
            $xfer += $output->writeI32($kiter278);
            $xfer += $output->writeString($viter279);
          }
        }
        $output->writeMapEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class SimpleChannelClient {
  static $_TSPEC;

  /**
   * @var string
   */
  public $applicationType = null;
  /**
   * @var string
   */
  public $applicationVersion = null;
  /**
   * @var string
   */
  public $locale = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'applicationType',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'applicationVersion',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'locale',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['applicationType'])) {
        $this->applicationType = $vals['applicationType'];
      }
      if (isset($vals['applicationVersion'])) {
        $this->applicationVersion = $vals['applicationVersion'];
      }
      if (isset($vals['locale'])) {
        $this->locale = $vals['locale'];
      }
    }
  }

  public function getName() {
    return 'SimpleChannelClient';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->applicationType);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->applicationVersion);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->locale);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('SimpleChannelClient');
    if ($this->applicationType !== null) {
      $xfer += $output->writeFieldBegin('applicationType', TType::STRING, 1);
      $xfer += $output->writeString($this->applicationType);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->applicationVersion !== null) {
      $xfer += $output->writeFieldBegin('applicationVersion', TType::STRING, 2);
      $xfer += $output->writeString($this->applicationVersion);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->locale !== null) {
      $xfer += $output->writeFieldBegin('locale', TType::STRING, 3);
      $xfer += $output->writeString($this->locale);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class SimpleChannelContact {
  static $_TSPEC;

  /**
   * @var string
   */
  public $mid = null;
  /**
   * @var string
   */
  public $displayName = null;
  /**
   * @var string
   */
  public $pictureStatus = null;
  /**
   * @var string
   */
  public $picturePath = null;
  /**
   * @var string
   */
  public $statusMessage = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'mid',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'displayName',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'pictureStatus',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'picturePath',
          'type' => TType::STRING,
          ),
        5 => array(
          'var' => 'statusMessage',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['mid'])) {
        $this->mid = $vals['mid'];
      }
      if (isset($vals['displayName'])) {
        $this->displayName = $vals['displayName'];
      }
      if (isset($vals['pictureStatus'])) {
        $this->pictureStatus = $vals['pictureStatus'];
      }
      if (isset($vals['picturePath'])) {
        $this->picturePath = $vals['picturePath'];
      }
      if (isset($vals['statusMessage'])) {
        $this->statusMessage = $vals['statusMessage'];
      }
    }
  }

  public function getName() {
    return 'SimpleChannelContact';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->mid);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->displayName);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->pictureStatus);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->picturePath);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->statusMessage);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('SimpleChannelContact');
    if ($this->mid !== null) {
      $xfer += $output->writeFieldBegin('mid', TType::STRING, 1);
      $xfer += $output->writeString($this->mid);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->displayName !== null) {
      $xfer += $output->writeFieldBegin('displayName', TType::STRING, 2);
      $xfer += $output->writeString($this->displayName);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->pictureStatus !== null) {
      $xfer += $output->writeFieldBegin('pictureStatus', TType::STRING, 3);
      $xfer += $output->writeString($this->pictureStatus);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->picturePath !== null) {
      $xfer += $output->writeFieldBegin('picturePath', TType::STRING, 4);
      $xfer += $output->writeString($this->picturePath);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->statusMessage !== null) {
      $xfer += $output->writeFieldBegin('statusMessage', TType::STRING, 5);
      $xfer += $output->writeString($this->statusMessage);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class SnsFriend {
  static $_TSPEC;

  /**
   * @var string
   */
  public $snsUserId = null;
  /**
   * @var string
   */
  public $snsUserName = null;
  /**
   * @var int
   */
  public $snsIdType = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'snsUserId',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'snsUserName',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'snsIdType',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['snsUserId'])) {
        $this->snsUserId = $vals['snsUserId'];
      }
      if (isset($vals['snsUserName'])) {
        $this->snsUserName = $vals['snsUserName'];
      }
      if (isset($vals['snsIdType'])) {
        $this->snsIdType = $vals['snsIdType'];
      }
    }
  }

  public function getName() {
    return 'SnsFriend';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->snsUserId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->snsUserName);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->snsIdType);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('SnsFriend');
    if ($this->snsUserId !== null) {
      $xfer += $output->writeFieldBegin('snsUserId', TType::STRING, 1);
      $xfer += $output->writeString($this->snsUserId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->snsUserName !== null) {
      $xfer += $output->writeFieldBegin('snsUserName', TType::STRING, 2);
      $xfer += $output->writeString($this->snsUserName);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->snsIdType !== null) {
      $xfer += $output->writeFieldBegin('snsIdType', TType::I32, 3);
      $xfer += $output->writeI32($this->snsIdType);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class SnsFriendContactRegistration {
  static $_TSPEC;

  /**
   * @var \Contact
   */
  public $contact = null;
  /**
   * @var int
   */
  public $snsIdType = null;
  /**
   * @var string
   */
  public $snsUserId = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'contact',
          'type' => TType::STRUCT,
          'class' => '\Contact',
          ),
        2 => array(
          'var' => 'snsIdType',
          'type' => TType::I32,
          ),
        3 => array(
          'var' => 'snsUserId',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['contact'])) {
        $this->contact = $vals['contact'];
      }
      if (isset($vals['snsIdType'])) {
        $this->snsIdType = $vals['snsIdType'];
      }
      if (isset($vals['snsUserId'])) {
        $this->snsUserId = $vals['snsUserId'];
      }
    }
  }

  public function getName() {
    return 'SnsFriendContactRegistration';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->contact = new \Contact();
            $xfer += $this->contact->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->snsIdType);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->snsUserId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('SnsFriendContactRegistration');
    if ($this->contact !== null) {
      if (!is_object($this->contact)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('contact', TType::STRUCT, 1);
      $xfer += $this->contact->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->snsIdType !== null) {
      $xfer += $output->writeFieldBegin('snsIdType', TType::I32, 2);
      $xfer += $output->writeI32($this->snsIdType);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->snsUserId !== null) {
      $xfer += $output->writeFieldBegin('snsUserId', TType::STRING, 3);
      $xfer += $output->writeString($this->snsUserId);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class SnsFriendModification {
  static $_TSPEC;

  /**
   * @var int
   */
  public $type = null;
  /**
   * @var \SnsFriend
   */
  public $snsFriend = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'type',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'snsFriend',
          'type' => TType::STRUCT,
          'class' => '\SnsFriend',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['type'])) {
        $this->type = $vals['type'];
      }
      if (isset($vals['snsFriend'])) {
        $this->snsFriend = $vals['snsFriend'];
      }
    }
  }

  public function getName() {
    return 'SnsFriendModification';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->type);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->snsFriend = new \SnsFriend();
            $xfer += $this->snsFriend->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('SnsFriendModification');
    if ($this->type !== null) {
      $xfer += $output->writeFieldBegin('type', TType::I32, 1);
      $xfer += $output->writeI32($this->type);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->snsFriend !== null) {
      if (!is_object($this->snsFriend)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('snsFriend', TType::STRUCT, 2);
      $xfer += $this->snsFriend->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class SnsFriends {
  static $_TSPEC;

  /**
   * @var \SnsFriend[]
   */
  public $snsFriends = null;
  /**
   * @var bool
   */
  public $hasMore = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'snsFriends',
          'type' => TType::LST,
          'etype' => TType::STRUCT,
          'elem' => array(
            'type' => TType::STRUCT,
            'class' => '\SnsFriend',
            ),
          ),
        2 => array(
          'var' => 'hasMore',
          'type' => TType::BOOL,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['snsFriends'])) {
        $this->snsFriends = $vals['snsFriends'];
      }
      if (isset($vals['hasMore'])) {
        $this->hasMore = $vals['hasMore'];
      }
    }
  }

  public function getName() {
    return 'SnsFriends';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::LST) {
            $this->snsFriends = array();
            $_size280 = 0;
            $_etype283 = 0;
            $xfer += $input->readListBegin($_etype283, $_size280);
            for ($_i284 = 0; $_i284 < $_size280; ++$_i284)
            {
              $elem285 = null;
              $elem285 = new \SnsFriend();
              $xfer += $elem285->read($input);
              $this->snsFriends []= $elem285;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->hasMore);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('SnsFriends');
    if ($this->snsFriends !== null) {
      if (!is_array($this->snsFriends)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('snsFriends', TType::LST, 1);
      {
        $output->writeListBegin(TType::STRUCT, count($this->snsFriends));
        {
          foreach ($this->snsFriends as $iter286)
          {
            $xfer += $iter286->write($output);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->hasMore !== null) {
      $xfer += $output->writeFieldBegin('hasMore', TType::BOOL, 2);
      $xfer += $output->writeBool($this->hasMore);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class SnsIdUserStatus {
  static $_TSPEC;

  /**
   * @var bool
   */
  public $userExisting = null;
  /**
   * @var bool
   */
  public $phoneNumberRegistered = null;
  /**
   * @var bool
   */
  public $sameDevice = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'userExisting',
          'type' => TType::BOOL,
          ),
        2 => array(
          'var' => 'phoneNumberRegistered',
          'type' => TType::BOOL,
          ),
        3 => array(
          'var' => 'sameDevice',
          'type' => TType::BOOL,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['userExisting'])) {
        $this->userExisting = $vals['userExisting'];
      }
      if (isset($vals['phoneNumberRegistered'])) {
        $this->phoneNumberRegistered = $vals['phoneNumberRegistered'];
      }
      if (isset($vals['sameDevice'])) {
        $this->sameDevice = $vals['sameDevice'];
      }
    }
  }

  public function getName() {
    return 'SnsIdUserStatus';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->userExisting);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->phoneNumberRegistered);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->sameDevice);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('SnsIdUserStatus');
    if ($this->userExisting !== null) {
      $xfer += $output->writeFieldBegin('userExisting', TType::BOOL, 1);
      $xfer += $output->writeBool($this->userExisting);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->phoneNumberRegistered !== null) {
      $xfer += $output->writeFieldBegin('phoneNumberRegistered', TType::BOOL, 2);
      $xfer += $output->writeBool($this->phoneNumberRegistered);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->sameDevice !== null) {
      $xfer += $output->writeFieldBegin('sameDevice', TType::BOOL, 3);
      $xfer += $output->writeBool($this->sameDevice);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class SnsProfile {
  static $_TSPEC;

  /**
   * @var string
   */
  public $snsUserId = null;
  /**
   * @var string
   */
  public $snsUserName = null;
  /**
   * @var string
   */
  public $email = null;
  /**
   * @var string
   */
  public $thumbnailUrl = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'snsUserId',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'snsUserName',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'email',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'thumbnailUrl',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['snsUserId'])) {
        $this->snsUserId = $vals['snsUserId'];
      }
      if (isset($vals['snsUserName'])) {
        $this->snsUserName = $vals['snsUserName'];
      }
      if (isset($vals['email'])) {
        $this->email = $vals['email'];
      }
      if (isset($vals['thumbnailUrl'])) {
        $this->thumbnailUrl = $vals['thumbnailUrl'];
      }
    }
  }

  public function getName() {
    return 'SnsProfile';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->snsUserId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->snsUserName);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->email);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->thumbnailUrl);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('SnsProfile');
    if ($this->snsUserId !== null) {
      $xfer += $output->writeFieldBegin('snsUserId', TType::STRING, 1);
      $xfer += $output->writeString($this->snsUserId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->snsUserName !== null) {
      $xfer += $output->writeFieldBegin('snsUserName', TType::STRING, 2);
      $xfer += $output->writeString($this->snsUserName);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->email !== null) {
      $xfer += $output->writeFieldBegin('email', TType::STRING, 3);
      $xfer += $output->writeString($this->email);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->thumbnailUrl !== null) {
      $xfer += $output->writeFieldBegin('thumbnailUrl', TType::STRING, 4);
      $xfer += $output->writeString($this->thumbnailUrl);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class SystemConfiguration {
  static $_TSPEC;

  /**
   * @var string
   */
  public $endpoint = null;
  /**
   * @var string
   */
  public $endpointSsl = null;
  /**
   * @var string
   */
  public $updateUrl = null;
  /**
   * @var string
   */
  public $c2dmAccount = null;
  /**
   * @var string
   */
  public $nniServer = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'endpoint',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'endpointSsl',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'updateUrl',
          'type' => TType::STRING,
          ),
        11 => array(
          'var' => 'c2dmAccount',
          'type' => TType::STRING,
          ),
        12 => array(
          'var' => 'nniServer',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['endpoint'])) {
        $this->endpoint = $vals['endpoint'];
      }
      if (isset($vals['endpointSsl'])) {
        $this->endpointSsl = $vals['endpointSsl'];
      }
      if (isset($vals['updateUrl'])) {
        $this->updateUrl = $vals['updateUrl'];
      }
      if (isset($vals['c2dmAccount'])) {
        $this->c2dmAccount = $vals['c2dmAccount'];
      }
      if (isset($vals['nniServer'])) {
        $this->nniServer = $vals['nniServer'];
      }
    }
  }

  public function getName() {
    return 'SystemConfiguration';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->endpoint);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->endpointSsl);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->updateUrl);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 11:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->c2dmAccount);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 12:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->nniServer);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('SystemConfiguration');
    if ($this->endpoint !== null) {
      $xfer += $output->writeFieldBegin('endpoint', TType::STRING, 1);
      $xfer += $output->writeString($this->endpoint);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->endpointSsl !== null) {
      $xfer += $output->writeFieldBegin('endpointSsl', TType::STRING, 2);
      $xfer += $output->writeString($this->endpointSsl);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->updateUrl !== null) {
      $xfer += $output->writeFieldBegin('updateUrl', TType::STRING, 3);
      $xfer += $output->writeString($this->updateUrl);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->c2dmAccount !== null) {
      $xfer += $output->writeFieldBegin('c2dmAccount', TType::STRING, 11);
      $xfer += $output->writeString($this->c2dmAccount);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->nniServer !== null) {
      $xfer += $output->writeFieldBegin('nniServer', TType::STRING, 12);
      $xfer += $output->writeString($this->nniServer);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class TalkException extends TException {
  static $_TSPEC;

  /**
   * @var int
   */
  public $code = null;
  /**
   * @var string
   */
  public $reason = null;
  /**
   * @var array
   */
  public $parameterMap = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'code',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'reason',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'parameterMap',
          'type' => TType::MAP,
          'ktype' => TType::STRING,
          'vtype' => TType::STRING,
          'key' => array(
            'type' => TType::STRING,
          ),
          'val' => array(
            'type' => TType::STRING,
            ),
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['code'])) {
        $this->code = $vals['code'];
      }
      if (isset($vals['reason'])) {
        $this->reason = $vals['reason'];
      }
      if (isset($vals['parameterMap'])) {
        $this->parameterMap = $vals['parameterMap'];
      }
    }
  }

  public function getName() {
    return 'TalkException';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->code);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->reason);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::MAP) {
            $this->parameterMap = array();
            $_size287 = 0;
            $_ktype288 = 0;
            $_vtype289 = 0;
            $xfer += $input->readMapBegin($_ktype288, $_vtype289, $_size287);
            for ($_i291 = 0; $_i291 < $_size287; ++$_i291)
            {
              $key292 = '';
              $val293 = '';
              $xfer += $input->readString($key292);
              $xfer += $input->readString($val293);
              $this->parameterMap[$key292] = $val293;
            }
            $xfer += $input->readMapEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('TalkException');
    if ($this->code !== null) {
      $xfer += $output->writeFieldBegin('code', TType::I32, 1);
      $xfer += $output->writeI32($this->code);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->reason !== null) {
      $xfer += $output->writeFieldBegin('reason', TType::STRING, 2);
      $xfer += $output->writeString($this->reason);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parameterMap !== null) {
      if (!is_array($this->parameterMap)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('parameterMap', TType::MAP, 3);
      {
        $output->writeMapBegin(TType::STRING, TType::STRING, count($this->parameterMap));
        {
          foreach ($this->parameterMap as $kiter294 => $viter295)
          {
            $xfer += $output->writeString($kiter294);
            $xfer += $output->writeString($viter295);
          }
        }
        $output->writeMapEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class Ticket {
  static $_TSPEC;

  /**
   * @var string
   */
  public $id = null;
  /**
   * @var int
   */
  public $expirationTime = null;
  /**
   * @var int
   */
  public $maxUseCount = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'id',
          'type' => TType::STRING,
          ),
        10 => array(
          'var' => 'expirationTime',
          'type' => TType::I64,
          ),
        21 => array(
          'var' => 'maxUseCount',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['id'])) {
        $this->id = $vals['id'];
      }
      if (isset($vals['expirationTime'])) {
        $this->expirationTime = $vals['expirationTime'];
      }
      if (isset($vals['maxUseCount'])) {
        $this->maxUseCount = $vals['maxUseCount'];
      }
    }
  }

  public function getName() {
    return 'Ticket';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->id);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 10:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->expirationTime);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 21:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->maxUseCount);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('Ticket');
    if ($this->id !== null) {
      $xfer += $output->writeFieldBegin('id', TType::STRING, 1);
      $xfer += $output->writeString($this->id);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->expirationTime !== null) {
      $xfer += $output->writeFieldBegin('expirationTime', TType::I64, 10);
      $xfer += $output->writeI64($this->expirationTime);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->maxUseCount !== null) {
      $xfer += $output->writeFieldBegin('maxUseCount', TType::I32, 21);
      $xfer += $output->writeI32($this->maxUseCount);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class TMessageBox {
  static $_TSPEC;

  /**
   * @var string
   */
  public $id = null;
  /**
   * @var string
   */
  public $channelId = null;
  /**
   * @var int
   */
  public $lastSeq = null;
  /**
   * @var int
   */
  public $unreadCount = null;
  /**
   * @var int
   */
  public $lastModifiedTime = null;
  /**
   * @var int
   */
  public $status = null;
  /**
   * @var int
   */
  public $midType = null;
  /**
   * @var \Message[]
   */
  public $lastMessages = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'id',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'channelId',
          'type' => TType::STRING,
          ),
        5 => array(
          'var' => 'lastSeq',
          'type' => TType::I64,
          ),
        6 => array(
          'var' => 'unreadCount',
          'type' => TType::I64,
          ),
        7 => array(
          'var' => 'lastModifiedTime',
          'type' => TType::I64,
          ),
        8 => array(
          'var' => 'status',
          'type' => TType::I32,
          ),
        9 => array(
          'var' => 'midType',
          'type' => TType::I32,
          ),
        10 => array(
          'var' => 'lastMessages',
          'type' => TType::LST,
          'etype' => TType::STRUCT,
          'elem' => array(
            'type' => TType::STRUCT,
            'class' => '\Message',
            ),
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['id'])) {
        $this->id = $vals['id'];
      }
      if (isset($vals['channelId'])) {
        $this->channelId = $vals['channelId'];
      }
      if (isset($vals['lastSeq'])) {
        $this->lastSeq = $vals['lastSeq'];
      }
      if (isset($vals['unreadCount'])) {
        $this->unreadCount = $vals['unreadCount'];
      }
      if (isset($vals['lastModifiedTime'])) {
        $this->lastModifiedTime = $vals['lastModifiedTime'];
      }
      if (isset($vals['status'])) {
        $this->status = $vals['status'];
      }
      if (isset($vals['midType'])) {
        $this->midType = $vals['midType'];
      }
      if (isset($vals['lastMessages'])) {
        $this->lastMessages = $vals['lastMessages'];
      }
    }
  }

  public function getName() {
    return 'TMessageBox';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->id);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->channelId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->lastSeq);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->unreadCount);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->lastModifiedTime);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 8:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->status);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 9:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->midType);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 10:
          if ($ftype == TType::LST) {
            $this->lastMessages = array();
            $_size296 = 0;
            $_etype299 = 0;
            $xfer += $input->readListBegin($_etype299, $_size296);
            for ($_i300 = 0; $_i300 < $_size296; ++$_i300)
            {
              $elem301 = null;
              $elem301 = new \Message();
              $xfer += $elem301->read($input);
              $this->lastMessages []= $elem301;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('TMessageBox');
    if ($this->id !== null) {
      $xfer += $output->writeFieldBegin('id', TType::STRING, 1);
      $xfer += $output->writeString($this->id);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->channelId !== null) {
      $xfer += $output->writeFieldBegin('channelId', TType::STRING, 2);
      $xfer += $output->writeString($this->channelId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->lastSeq !== null) {
      $xfer += $output->writeFieldBegin('lastSeq', TType::I64, 5);
      $xfer += $output->writeI64($this->lastSeq);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->unreadCount !== null) {
      $xfer += $output->writeFieldBegin('unreadCount', TType::I64, 6);
      $xfer += $output->writeI64($this->unreadCount);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->lastModifiedTime !== null) {
      $xfer += $output->writeFieldBegin('lastModifiedTime', TType::I64, 7);
      $xfer += $output->writeI64($this->lastModifiedTime);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->status !== null) {
      $xfer += $output->writeFieldBegin('status', TType::I32, 8);
      $xfer += $output->writeI32($this->status);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->midType !== null) {
      $xfer += $output->writeFieldBegin('midType', TType::I32, 9);
      $xfer += $output->writeI32($this->midType);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->lastMessages !== null) {
      if (!is_array($this->lastMessages)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('lastMessages', TType::LST, 10);
      {
        $output->writeListBegin(TType::STRUCT, count($this->lastMessages));
        {
          foreach ($this->lastMessages as $iter302)
          {
            $xfer += $iter302->write($output);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class TMessageBoxWrapUp {
  static $_TSPEC;

  /**
   * @var \TMessageBox
   */
  public $messageBox = null;
  /**
   * @var string
   */
  public $name = null;
  /**
   * @var \Contact[]
   */
  public $contacts = null;
  /**
   * @var string
   */
  public $pictureRevision = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'messageBox',
          'type' => TType::STRUCT,
          'class' => '\TMessageBox',
          ),
        2 => array(
          'var' => 'name',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'contacts',
          'type' => TType::LST,
          'etype' => TType::STRUCT,
          'elem' => array(
            'type' => TType::STRUCT,
            'class' => '\Contact',
            ),
          ),
        4 => array(
          'var' => 'pictureRevision',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['messageBox'])) {
        $this->messageBox = $vals['messageBox'];
      }
      if (isset($vals['name'])) {
        $this->name = $vals['name'];
      }
      if (isset($vals['contacts'])) {
        $this->contacts = $vals['contacts'];
      }
      if (isset($vals['pictureRevision'])) {
        $this->pictureRevision = $vals['pictureRevision'];
      }
    }
  }

  public function getName() {
    return 'TMessageBoxWrapUp';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->messageBox = new \TMessageBox();
            $xfer += $this->messageBox->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->name);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::LST) {
            $this->contacts = array();
            $_size303 = 0;
            $_etype306 = 0;
            $xfer += $input->readListBegin($_etype306, $_size303);
            for ($_i307 = 0; $_i307 < $_size303; ++$_i307)
            {
              $elem308 = null;
              $elem308 = new \Contact();
              $xfer += $elem308->read($input);
              $this->contacts []= $elem308;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->pictureRevision);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('TMessageBoxWrapUp');
    if ($this->messageBox !== null) {
      if (!is_object($this->messageBox)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('messageBox', TType::STRUCT, 1);
      $xfer += $this->messageBox->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->name !== null) {
      $xfer += $output->writeFieldBegin('name', TType::STRING, 2);
      $xfer += $output->writeString($this->name);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->contacts !== null) {
      if (!is_array($this->contacts)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('contacts', TType::LST, 3);
      {
        $output->writeListBegin(TType::STRUCT, count($this->contacts));
        {
          foreach ($this->contacts as $iter309)
          {
            $xfer += $iter309->write($output);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->pictureRevision !== null) {
      $xfer += $output->writeFieldBegin('pictureRevision', TType::STRING, 4);
      $xfer += $output->writeString($this->pictureRevision);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class TMessageBoxWrapUpResponse {
  static $_TSPEC;

  /**
   * @var \TMessageBoxWrapUp[]
   */
  public $messageBoxWrapUpList = null;
  /**
   * @var int
   */
  public $totalSize = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'messageBoxWrapUpList',
          'type' => TType::LST,
          'etype' => TType::STRUCT,
          'elem' => array(
            'type' => TType::STRUCT,
            'class' => '\TMessageBoxWrapUp',
            ),
          ),
        2 => array(
          'var' => 'totalSize',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['messageBoxWrapUpList'])) {
        $this->messageBoxWrapUpList = $vals['messageBoxWrapUpList'];
      }
      if (isset($vals['totalSize'])) {
        $this->totalSize = $vals['totalSize'];
      }
    }
  }

  public function getName() {
    return 'TMessageBoxWrapUpResponse';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::LST) {
            $this->messageBoxWrapUpList = array();
            $_size310 = 0;
            $_etype313 = 0;
            $xfer += $input->readListBegin($_etype313, $_size310);
            for ($_i314 = 0; $_i314 < $_size310; ++$_i314)
            {
              $elem315 = null;
              $elem315 = new \TMessageBoxWrapUp();
              $xfer += $elem315->read($input);
              $this->messageBoxWrapUpList []= $elem315;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->totalSize);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('TMessageBoxWrapUpResponse');
    if ($this->messageBoxWrapUpList !== null) {
      if (!is_array($this->messageBoxWrapUpList)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('messageBoxWrapUpList', TType::LST, 1);
      {
        $output->writeListBegin(TType::STRUCT, count($this->messageBoxWrapUpList));
        {
          foreach ($this->messageBoxWrapUpList as $iter316)
          {
            $xfer += $iter316->write($output);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->totalSize !== null) {
      $xfer += $output->writeFieldBegin('totalSize', TType::I32, 2);
      $xfer += $output->writeI32($this->totalSize);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ErrorExtraInfo {
  static $_TSPEC;

  /**
   * @var int
   */
  public $preconditionFailedExtraInfo = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'preconditionFailedExtraInfo',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['preconditionFailedExtraInfo'])) {
        $this->preconditionFailedExtraInfo = $vals['preconditionFailedExtraInfo'];
      }
    }
  }

  public function getName() {
    return 'ErrorExtraInfo';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->preconditionFailedExtraInfo);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ErrorExtraInfo');
    if ($this->preconditionFailedExtraInfo !== null) {
      $xfer += $output->writeFieldBegin('preconditionFailedExtraInfo', TType::I32, 1);
      $xfer += $output->writeI32($this->preconditionFailedExtraInfo);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class SquarePreference {
  static $_TSPEC;

  /**
   * @var int
   */
  public $favoriteTimestamp = null;
  /**
   * @var bool
   */
  public $notiForNewJoinRequest = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'favoriteTimestamp',
          'type' => TType::I64,
          ),
        2 => array(
          'var' => 'notiForNewJoinRequest',
          'type' => TType::BOOL,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['favoriteTimestamp'])) {
        $this->favoriteTimestamp = $vals['favoriteTimestamp'];
      }
      if (isset($vals['notiForNewJoinRequest'])) {
        $this->notiForNewJoinRequest = $vals['notiForNewJoinRequest'];
      }
    }
  }

  public function getName() {
    return 'SquarePreference';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->favoriteTimestamp);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->notiForNewJoinRequest);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('SquarePreference');
    if ($this->favoriteTimestamp !== null) {
      $xfer += $output->writeFieldBegin('favoriteTimestamp', TType::I64, 1);
      $xfer += $output->writeI64($this->favoriteTimestamp);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->notiForNewJoinRequest !== null) {
      $xfer += $output->writeFieldBegin('notiForNewJoinRequest', TType::BOOL, 2);
      $xfer += $output->writeBool($this->notiForNewJoinRequest);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class SquareStatus {
  static $_TSPEC;

  /**
   * @var int
   */
  public $memberCount = null;
  /**
   * @var int
   */
  public $joinRequestCount = null;
  /**
   * @var int
   */
  public $lastJoinRequestAt = null;
  /**
   * @var int
   */
  public $openChatCount = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'memberCount',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'joinRequestCount',
          'type' => TType::I32,
          ),
        3 => array(
          'var' => 'lastJoinRequestAt',
          'type' => TType::I64,
          ),
        4 => array(
          'var' => 'openChatCount',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['memberCount'])) {
        $this->memberCount = $vals['memberCount'];
      }
      if (isset($vals['joinRequestCount'])) {
        $this->joinRequestCount = $vals['joinRequestCount'];
      }
      if (isset($vals['lastJoinRequestAt'])) {
        $this->lastJoinRequestAt = $vals['lastJoinRequestAt'];
      }
      if (isset($vals['openChatCount'])) {
        $this->openChatCount = $vals['openChatCount'];
      }
    }
  }

  public function getName() {
    return 'SquareStatus';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->memberCount);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->joinRequestCount);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->lastJoinRequestAt);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->openChatCount);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('SquareStatus');
    if ($this->memberCount !== null) {
      $xfer += $output->writeFieldBegin('memberCount', TType::I32, 1);
      $xfer += $output->writeI32($this->memberCount);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->joinRequestCount !== null) {
      $xfer += $output->writeFieldBegin('joinRequestCount', TType::I32, 2);
      $xfer += $output->writeI32($this->joinRequestCount);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->lastJoinRequestAt !== null) {
      $xfer += $output->writeFieldBegin('lastJoinRequestAt', TType::I64, 3);
      $xfer += $output->writeI64($this->lastJoinRequestAt);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->openChatCount !== null) {
      $xfer += $output->writeFieldBegin('openChatCount', TType::I32, 4);
      $xfer += $output->writeI32($this->openChatCount);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class SquareChat {
  static $_TSPEC;

  /**
   * @var string
   */
  public $squareChatMid = null;
  /**
   * @var string
   */
  public $squareMid = null;
  /**
   * @var int
   */
  public $type = null;
  /**
   * @var string
   */
  public $name = null;
  /**
   * @var string
   */
  public $chatImageObsHash = null;
  /**
   * @var int
   */
  public $squareChatRevision = null;
  /**
   * @var int
   */
  public $maxMemberCount = null;
  /**
   * @var int
   */
  public $state = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'squareChatMid',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'squareMid',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'type',
          'type' => TType::I32,
          ),
        4 => array(
          'var' => 'name',
          'type' => TType::STRING,
          ),
        5 => array(
          'var' => 'chatImageObsHash',
          'type' => TType::STRING,
          ),
        6 => array(
          'var' => 'squareChatRevision',
          'type' => TType::I64,
          ),
        7 => array(
          'var' => 'maxMemberCount',
          'type' => TType::I32,
          ),
        8 => array(
          'var' => 'state',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['squareChatMid'])) {
        $this->squareChatMid = $vals['squareChatMid'];
      }
      if (isset($vals['squareMid'])) {
        $this->squareMid = $vals['squareMid'];
      }
      if (isset($vals['type'])) {
        $this->type = $vals['type'];
      }
      if (isset($vals['name'])) {
        $this->name = $vals['name'];
      }
      if (isset($vals['chatImageObsHash'])) {
        $this->chatImageObsHash = $vals['chatImageObsHash'];
      }
      if (isset($vals['squareChatRevision'])) {
        $this->squareChatRevision = $vals['squareChatRevision'];
      }
      if (isset($vals['maxMemberCount'])) {
        $this->maxMemberCount = $vals['maxMemberCount'];
      }
      if (isset($vals['state'])) {
        $this->state = $vals['state'];
      }
    }
  }

  public function getName() {
    return 'SquareChat';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->squareChatMid);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->squareMid);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->type);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->name);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->chatImageObsHash);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->squareChatRevision);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->maxMemberCount);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 8:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->state);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('SquareChat');
    if ($this->squareChatMid !== null) {
      $xfer += $output->writeFieldBegin('squareChatMid', TType::STRING, 1);
      $xfer += $output->writeString($this->squareChatMid);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->squareMid !== null) {
      $xfer += $output->writeFieldBegin('squareMid', TType::STRING, 2);
      $xfer += $output->writeString($this->squareMid);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->type !== null) {
      $xfer += $output->writeFieldBegin('type', TType::I32, 3);
      $xfer += $output->writeI32($this->type);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->name !== null) {
      $xfer += $output->writeFieldBegin('name', TType::STRING, 4);
      $xfer += $output->writeString($this->name);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->chatImageObsHash !== null) {
      $xfer += $output->writeFieldBegin('chatImageObsHash', TType::STRING, 5);
      $xfer += $output->writeString($this->chatImageObsHash);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->squareChatRevision !== null) {
      $xfer += $output->writeFieldBegin('squareChatRevision', TType::I64, 6);
      $xfer += $output->writeI64($this->squareChatRevision);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->maxMemberCount !== null) {
      $xfer += $output->writeFieldBegin('maxMemberCount', TType::I32, 7);
      $xfer += $output->writeI32($this->maxMemberCount);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->state !== null) {
      $xfer += $output->writeFieldBegin('state', TType::I32, 8);
      $xfer += $output->writeI32($this->state);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class SquareMessage {
  static $_TSPEC;

  /**
   * @var \Message
   */
  public $message = null;
  /**
   * @var int
   */
  public $fromType = null;
  /**
   * @var int
   */
  public $squareMessageRevision = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'message',
          'type' => TType::STRUCT,
          'class' => '\Message',
          ),
        3 => array(
          'var' => 'fromType',
          'type' => TType::I32,
          ),
        4 => array(
          'var' => 'squareMessageRevision',
          'type' => TType::I64,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['message'])) {
        $this->message = $vals['message'];
      }
      if (isset($vals['fromType'])) {
        $this->fromType = $vals['fromType'];
      }
      if (isset($vals['squareMessageRevision'])) {
        $this->squareMessageRevision = $vals['squareMessageRevision'];
      }
    }
  }

  public function getName() {
    return 'SquareMessage';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->message = new \Message();
            $xfer += $this->message->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->fromType);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->squareMessageRevision);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('SquareMessage');
    if ($this->message !== null) {
      if (!is_object($this->message)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('message', TType::STRUCT, 1);
      $xfer += $this->message->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->fromType !== null) {
      $xfer += $output->writeFieldBegin('fromType', TType::I32, 3);
      $xfer += $output->writeI32($this->fromType);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->squareMessageRevision !== null) {
      $xfer += $output->writeFieldBegin('squareMessageRevision', TType::I64, 4);
      $xfer += $output->writeI64($this->squareMessageRevision);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class SquareChatStatusWithoutMessage {
  static $_TSPEC;

  /**
   * @var int
   */
  public $memberCount = null;
  /**
   * @var int
   */
  public $unreadMessageCount = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'memberCount',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'unreadMessageCount',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['memberCount'])) {
        $this->memberCount = $vals['memberCount'];
      }
      if (isset($vals['unreadMessageCount'])) {
        $this->unreadMessageCount = $vals['unreadMessageCount'];
      }
    }
  }

  public function getName() {
    return 'SquareChatStatusWithoutMessage';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->memberCount);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->unreadMessageCount);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('SquareChatStatusWithoutMessage');
    if ($this->memberCount !== null) {
      $xfer += $output->writeFieldBegin('memberCount', TType::I32, 1);
      $xfer += $output->writeI32($this->memberCount);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->unreadMessageCount !== null) {
      $xfer += $output->writeFieldBegin('unreadMessageCount', TType::I32, 2);
      $xfer += $output->writeI32($this->unreadMessageCount);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class SquareChatStatus {
  static $_TSPEC;

  /**
   * @var \SquareMessage
   */
  public $lastMessage = null;
  /**
   * @var string
   */
  public $senderDisplayName = null;
  /**
   * @var \SquareChatStatusWithoutMessage
   */
  public $otherStatus = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        3 => array(
          'var' => 'lastMessage',
          'type' => TType::STRUCT,
          'class' => '\SquareMessage',
          ),
        4 => array(
          'var' => 'senderDisplayName',
          'type' => TType::STRING,
          ),
        5 => array(
          'var' => 'otherStatus',
          'type' => TType::STRUCT,
          'class' => '\SquareChatStatusWithoutMessage',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['lastMessage'])) {
        $this->lastMessage = $vals['lastMessage'];
      }
      if (isset($vals['senderDisplayName'])) {
        $this->senderDisplayName = $vals['senderDisplayName'];
      }
      if (isset($vals['otherStatus'])) {
        $this->otherStatus = $vals['otherStatus'];
      }
    }
  }

  public function getName() {
    return 'SquareChatStatus';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 3:
          if ($ftype == TType::STRUCT) {
            $this->lastMessage = new \SquareMessage();
            $xfer += $this->lastMessage->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->senderDisplayName);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRUCT) {
            $this->otherStatus = new \SquareChatStatusWithoutMessage();
            $xfer += $this->otherStatus->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('SquareChatStatus');
    if ($this->lastMessage !== null) {
      if (!is_object($this->lastMessage)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('lastMessage', TType::STRUCT, 3);
      $xfer += $this->lastMessage->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->senderDisplayName !== null) {
      $xfer += $output->writeFieldBegin('senderDisplayName', TType::STRING, 4);
      $xfer += $output->writeString($this->senderDisplayName);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->otherStatus !== null) {
      if (!is_object($this->otherStatus)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('otherStatus', TType::STRUCT, 5);
      $xfer += $this->otherStatus->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class SquareChatMember {
  static $_TSPEC;

  /**
   * @var string
   */
  public $squareMemberMid = null;
  /**
   * @var string
   */
  public $squareChatMid = null;
  /**
   * @var int
   */
  public $revision = null;
  /**
   * @var int
   */
  public $membershipState = null;
  /**
   * @var bool
   */
  public $notificationForMessage = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'squareMemberMid',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'squareChatMid',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'revision',
          'type' => TType::I64,
          ),
        4 => array(
          'var' => 'membershipState',
          'type' => TType::I32,
          ),
        5 => array(
          'var' => 'notificationForMessage',
          'type' => TType::BOOL,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['squareMemberMid'])) {
        $this->squareMemberMid = $vals['squareMemberMid'];
      }
      if (isset($vals['squareChatMid'])) {
        $this->squareChatMid = $vals['squareChatMid'];
      }
      if (isset($vals['revision'])) {
        $this->revision = $vals['revision'];
      }
      if (isset($vals['membershipState'])) {
        $this->membershipState = $vals['membershipState'];
      }
      if (isset($vals['notificationForMessage'])) {
        $this->notificationForMessage = $vals['notificationForMessage'];
      }
    }
  }

  public function getName() {
    return 'SquareChatMember';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->squareMemberMid);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->squareChatMid);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->revision);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->membershipState);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->notificationForMessage);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('SquareChatMember');
    if ($this->squareMemberMid !== null) {
      $xfer += $output->writeFieldBegin('squareMemberMid', TType::STRING, 1);
      $xfer += $output->writeString($this->squareMemberMid);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->squareChatMid !== null) {
      $xfer += $output->writeFieldBegin('squareChatMid', TType::STRING, 2);
      $xfer += $output->writeString($this->squareChatMid);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->revision !== null) {
      $xfer += $output->writeFieldBegin('revision', TType::I64, 3);
      $xfer += $output->writeI64($this->revision);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->membershipState !== null) {
      $xfer += $output->writeFieldBegin('membershipState', TType::I32, 4);
      $xfer += $output->writeI32($this->membershipState);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->notificationForMessage !== null) {
      $xfer += $output->writeFieldBegin('notificationForMessage', TType::BOOL, 5);
      $xfer += $output->writeBool($this->notificationForMessage);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class Square {
  static $_TSPEC;

  /**
   * @var string
   */
  public $mid = null;
  /**
   * @var string
   */
  public $name = null;
  /**
   * @var string
   */
  public $welcomeMessage = null;
  /**
   * @var string
   */
  public $profileImageObsHash = null;
  /**
   * @var string
   */
  public $desc = null;
  /**
   * @var bool
   */
  public $searchable = null;
  /**
   * @var int
   */
  public $type = null;
  /**
   * @var int
   */
  public $categoryID = null;
  /**
   * @var string
   */
  public $invitationURL = null;
  /**
   * @var int
   */
  public $revision = null;
  /**
   * @var bool
   */
  public $ableToUseInvitationTicket = null;
  /**
   * @var int
   */
  public $state = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'mid',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'name',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'welcomeMessage',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'profileImageObsHash',
          'type' => TType::STRING,
          ),
        5 => array(
          'var' => 'desc',
          'type' => TType::STRING,
          ),
        6 => array(
          'var' => 'searchable',
          'type' => TType::BOOL,
          ),
        7 => array(
          'var' => 'type',
          'type' => TType::I32,
          ),
        8 => array(
          'var' => 'categoryID',
          'type' => TType::I32,
          ),
        9 => array(
          'var' => 'invitationURL',
          'type' => TType::STRING,
          ),
        10 => array(
          'var' => 'revision',
          'type' => TType::I64,
          ),
        11 => array(
          'var' => 'ableToUseInvitationTicket',
          'type' => TType::BOOL,
          ),
        12 => array(
          'var' => 'state',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['mid'])) {
        $this->mid = $vals['mid'];
      }
      if (isset($vals['name'])) {
        $this->name = $vals['name'];
      }
      if (isset($vals['welcomeMessage'])) {
        $this->welcomeMessage = $vals['welcomeMessage'];
      }
      if (isset($vals['profileImageObsHash'])) {
        $this->profileImageObsHash = $vals['profileImageObsHash'];
      }
      if (isset($vals['desc'])) {
        $this->desc = $vals['desc'];
      }
      if (isset($vals['searchable'])) {
        $this->searchable = $vals['searchable'];
      }
      if (isset($vals['type'])) {
        $this->type = $vals['type'];
      }
      if (isset($vals['categoryID'])) {
        $this->categoryID = $vals['categoryID'];
      }
      if (isset($vals['invitationURL'])) {
        $this->invitationURL = $vals['invitationURL'];
      }
      if (isset($vals['revision'])) {
        $this->revision = $vals['revision'];
      }
      if (isset($vals['ableToUseInvitationTicket'])) {
        $this->ableToUseInvitationTicket = $vals['ableToUseInvitationTicket'];
      }
      if (isset($vals['state'])) {
        $this->state = $vals['state'];
      }
    }
  }

  public function getName() {
    return 'Square';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->mid);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->name);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->welcomeMessage);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->profileImageObsHash);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->desc);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->searchable);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->type);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 8:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->categoryID);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 9:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->invitationURL);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 10:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->revision);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 11:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->ableToUseInvitationTicket);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 12:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->state);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('Square');
    if ($this->mid !== null) {
      $xfer += $output->writeFieldBegin('mid', TType::STRING, 1);
      $xfer += $output->writeString($this->mid);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->name !== null) {
      $xfer += $output->writeFieldBegin('name', TType::STRING, 2);
      $xfer += $output->writeString($this->name);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->welcomeMessage !== null) {
      $xfer += $output->writeFieldBegin('welcomeMessage', TType::STRING, 3);
      $xfer += $output->writeString($this->welcomeMessage);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->profileImageObsHash !== null) {
      $xfer += $output->writeFieldBegin('profileImageObsHash', TType::STRING, 4);
      $xfer += $output->writeString($this->profileImageObsHash);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->desc !== null) {
      $xfer += $output->writeFieldBegin('desc', TType::STRING, 5);
      $xfer += $output->writeString($this->desc);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->searchable !== null) {
      $xfer += $output->writeFieldBegin('searchable', TType::BOOL, 6);
      $xfer += $output->writeBool($this->searchable);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->type !== null) {
      $xfer += $output->writeFieldBegin('type', TType::I32, 7);
      $xfer += $output->writeI32($this->type);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->categoryID !== null) {
      $xfer += $output->writeFieldBegin('categoryID', TType::I32, 8);
      $xfer += $output->writeI32($this->categoryID);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->invitationURL !== null) {
      $xfer += $output->writeFieldBegin('invitationURL', TType::STRING, 9);
      $xfer += $output->writeString($this->invitationURL);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->revision !== null) {
      $xfer += $output->writeFieldBegin('revision', TType::I64, 10);
      $xfer += $output->writeI64($this->revision);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ableToUseInvitationTicket !== null) {
      $xfer += $output->writeFieldBegin('ableToUseInvitationTicket', TType::BOOL, 11);
      $xfer += $output->writeBool($this->ableToUseInvitationTicket);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->state !== null) {
      $xfer += $output->writeFieldBegin('state', TType::I32, 12);
      $xfer += $output->writeI32($this->state);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class SquareMember {
  static $_TSPEC;

  /**
   * @var string
   */
  public $squareMemberMid = null;
  /**
   * @var string
   */
  public $squareMid = null;
  /**
   * @var string
   */
  public $displayName = null;
  /**
   * @var string
   */
  public $profileImageObsHash = null;
  /**
   * @var bool
   */
  public $ableToReceiveMessage = null;
  /**
   * @var int
   */
  public $membershipState = null;
  /**
   * @var int
   */
  public $role = null;
  /**
   * @var int
   */
  public $revision = null;
  /**
   * @var \SquarePreference
   */
  public $preference = null;
  /**
   * @var string
   */
  public $joinMessage = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'squareMemberMid',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'squareMid',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'displayName',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'profileImageObsHash',
          'type' => TType::STRING,
          ),
        5 => array(
          'var' => 'ableToReceiveMessage',
          'type' => TType::BOOL,
          ),
        7 => array(
          'var' => 'membershipState',
          'type' => TType::I32,
          ),
        8 => array(
          'var' => 'role',
          'type' => TType::I32,
          ),
        9 => array(
          'var' => 'revision',
          'type' => TType::I64,
          ),
        10 => array(
          'var' => 'preference',
          'type' => TType::STRUCT,
          'class' => '\SquarePreference',
          ),
        11 => array(
          'var' => 'joinMessage',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['squareMemberMid'])) {
        $this->squareMemberMid = $vals['squareMemberMid'];
      }
      if (isset($vals['squareMid'])) {
        $this->squareMid = $vals['squareMid'];
      }
      if (isset($vals['displayName'])) {
        $this->displayName = $vals['displayName'];
      }
      if (isset($vals['profileImageObsHash'])) {
        $this->profileImageObsHash = $vals['profileImageObsHash'];
      }
      if (isset($vals['ableToReceiveMessage'])) {
        $this->ableToReceiveMessage = $vals['ableToReceiveMessage'];
      }
      if (isset($vals['membershipState'])) {
        $this->membershipState = $vals['membershipState'];
      }
      if (isset($vals['role'])) {
        $this->role = $vals['role'];
      }
      if (isset($vals['revision'])) {
        $this->revision = $vals['revision'];
      }
      if (isset($vals['preference'])) {
        $this->preference = $vals['preference'];
      }
      if (isset($vals['joinMessage'])) {
        $this->joinMessage = $vals['joinMessage'];
      }
    }
  }

  public function getName() {
    return 'SquareMember';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->squareMemberMid);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->squareMid);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->displayName);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->profileImageObsHash);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->ableToReceiveMessage);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->membershipState);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 8:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->role);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 9:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->revision);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 10:
          if ($ftype == TType::STRUCT) {
            $this->preference = new \SquarePreference();
            $xfer += $this->preference->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 11:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->joinMessage);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('SquareMember');
    if ($this->squareMemberMid !== null) {
      $xfer += $output->writeFieldBegin('squareMemberMid', TType::STRING, 1);
      $xfer += $output->writeString($this->squareMemberMid);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->squareMid !== null) {
      $xfer += $output->writeFieldBegin('squareMid', TType::STRING, 2);
      $xfer += $output->writeString($this->squareMid);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->displayName !== null) {
      $xfer += $output->writeFieldBegin('displayName', TType::STRING, 3);
      $xfer += $output->writeString($this->displayName);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->profileImageObsHash !== null) {
      $xfer += $output->writeFieldBegin('profileImageObsHash', TType::STRING, 4);
      $xfer += $output->writeString($this->profileImageObsHash);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ableToReceiveMessage !== null) {
      $xfer += $output->writeFieldBegin('ableToReceiveMessage', TType::BOOL, 5);
      $xfer += $output->writeBool($this->ableToReceiveMessage);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->membershipState !== null) {
      $xfer += $output->writeFieldBegin('membershipState', TType::I32, 7);
      $xfer += $output->writeI32($this->membershipState);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->role !== null) {
      $xfer += $output->writeFieldBegin('role', TType::I32, 8);
      $xfer += $output->writeI32($this->role);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->revision !== null) {
      $xfer += $output->writeFieldBegin('revision', TType::I64, 9);
      $xfer += $output->writeI64($this->revision);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->preference !== null) {
      if (!is_object($this->preference)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('preference', TType::STRUCT, 10);
      $xfer += $this->preference->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->joinMessage !== null) {
      $xfer += $output->writeFieldBegin('joinMessage', TType::STRING, 11);
      $xfer += $output->writeString($this->joinMessage);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class SquareMemberRelation {
  static $_TSPEC;

  /**
   * @var int
   */
  public $state = null;
  /**
   * @var int
   */
  public $revision = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'state',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'revision',
          'type' => TType::I64,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['state'])) {
        $this->state = $vals['state'];
      }
      if (isset($vals['revision'])) {
        $this->revision = $vals['revision'];
      }
    }
  }

  public function getName() {
    return 'SquareMemberRelation';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->state);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->revision);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('SquareMemberRelation');
    if ($this->state !== null) {
      $xfer += $output->writeFieldBegin('state', TType::I32, 1);
      $xfer += $output->writeI32($this->state);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->revision !== null) {
      $xfer += $output->writeFieldBegin('revision', TType::I64, 2);
      $xfer += $output->writeI64($this->revision);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class SquareAuthority {
  static $_TSPEC;

  /**
   * @var string
   */
  public $squareMid = null;
  /**
   * @var int
   */
  public $updateSquareProfile = null;
  /**
   * @var int
   */
  public $inviteNewMember = null;
  /**
   * @var int
   */
  public $approveJoinRequest = null;
  /**
   * @var int
   */
  public $createPost = null;
  /**
   * @var int
   */
  public $createOpenSquareChat = null;
  /**
   * @var int
   */
  public $deleteSquareChatOrPost = null;
  /**
   * @var int
   */
  public $removeSquareMember = null;
  /**
   * @var int
   */
  public $grantRole = null;
  /**
   * @var int
   */
  public $enableInvitationTicket = null;
  /**
   * @var int
   */
  public $revision = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'squareMid',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'updateSquareProfile',
          'type' => TType::I32,
          ),
        3 => array(
          'var' => 'inviteNewMember',
          'type' => TType::I32,
          ),
        4 => array(
          'var' => 'approveJoinRequest',
          'type' => TType::I32,
          ),
        5 => array(
          'var' => 'createPost',
          'type' => TType::I32,
          ),
        6 => array(
          'var' => 'createOpenSquareChat',
          'type' => TType::I32,
          ),
        7 => array(
          'var' => 'deleteSquareChatOrPost',
          'type' => TType::I32,
          ),
        8 => array(
          'var' => 'removeSquareMember',
          'type' => TType::I32,
          ),
        9 => array(
          'var' => 'grantRole',
          'type' => TType::I32,
          ),
        10 => array(
          'var' => 'enableInvitationTicket',
          'type' => TType::I32,
          ),
        11 => array(
          'var' => 'revision',
          'type' => TType::I64,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['squareMid'])) {
        $this->squareMid = $vals['squareMid'];
      }
      if (isset($vals['updateSquareProfile'])) {
        $this->updateSquareProfile = $vals['updateSquareProfile'];
      }
      if (isset($vals['inviteNewMember'])) {
        $this->inviteNewMember = $vals['inviteNewMember'];
      }
      if (isset($vals['approveJoinRequest'])) {
        $this->approveJoinRequest = $vals['approveJoinRequest'];
      }
      if (isset($vals['createPost'])) {
        $this->createPost = $vals['createPost'];
      }
      if (isset($vals['createOpenSquareChat'])) {
        $this->createOpenSquareChat = $vals['createOpenSquareChat'];
      }
      if (isset($vals['deleteSquareChatOrPost'])) {
        $this->deleteSquareChatOrPost = $vals['deleteSquareChatOrPost'];
      }
      if (isset($vals['removeSquareMember'])) {
        $this->removeSquareMember = $vals['removeSquareMember'];
      }
      if (isset($vals['grantRole'])) {
        $this->grantRole = $vals['grantRole'];
      }
      if (isset($vals['enableInvitationTicket'])) {
        $this->enableInvitationTicket = $vals['enableInvitationTicket'];
      }
      if (isset($vals['revision'])) {
        $this->revision = $vals['revision'];
      }
    }
  }

  public function getName() {
    return 'SquareAuthority';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->squareMid);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->updateSquareProfile);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->inviteNewMember);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->approveJoinRequest);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->createPost);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->createOpenSquareChat);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->deleteSquareChatOrPost);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 8:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->removeSquareMember);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 9:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->grantRole);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 10:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->enableInvitationTicket);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 11:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->revision);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('SquareAuthority');
    if ($this->squareMid !== null) {
      $xfer += $output->writeFieldBegin('squareMid', TType::STRING, 1);
      $xfer += $output->writeString($this->squareMid);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->updateSquareProfile !== null) {
      $xfer += $output->writeFieldBegin('updateSquareProfile', TType::I32, 2);
      $xfer += $output->writeI32($this->updateSquareProfile);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->inviteNewMember !== null) {
      $xfer += $output->writeFieldBegin('inviteNewMember', TType::I32, 3);
      $xfer += $output->writeI32($this->inviteNewMember);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->approveJoinRequest !== null) {
      $xfer += $output->writeFieldBegin('approveJoinRequest', TType::I32, 4);
      $xfer += $output->writeI32($this->approveJoinRequest);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->createPost !== null) {
      $xfer += $output->writeFieldBegin('createPost', TType::I32, 5);
      $xfer += $output->writeI32($this->createPost);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->createOpenSquareChat !== null) {
      $xfer += $output->writeFieldBegin('createOpenSquareChat', TType::I32, 6);
      $xfer += $output->writeI32($this->createOpenSquareChat);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->deleteSquareChatOrPost !== null) {
      $xfer += $output->writeFieldBegin('deleteSquareChatOrPost', TType::I32, 7);
      $xfer += $output->writeI32($this->deleteSquareChatOrPost);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->removeSquareMember !== null) {
      $xfer += $output->writeFieldBegin('removeSquareMember', TType::I32, 8);
      $xfer += $output->writeI32($this->removeSquareMember);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->grantRole !== null) {
      $xfer += $output->writeFieldBegin('grantRole', TType::I32, 9);
      $xfer += $output->writeI32($this->grantRole);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->enableInvitationTicket !== null) {
      $xfer += $output->writeFieldBegin('enableInvitationTicket', TType::I32, 10);
      $xfer += $output->writeI32($this->enableInvitationTicket);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->revision !== null) {
      $xfer += $output->writeFieldBegin('revision', TType::I64, 11);
      $xfer += $output->writeI64($this->revision);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class SquareFeature {
  static $_TSPEC;

  /**
   * @var int
   */
  public $controlState = null;
  /**
   * @var int
   */
  public $booleanValue = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'controlState',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'booleanValue',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['controlState'])) {
        $this->controlState = $vals['controlState'];
      }
      if (isset($vals['booleanValue'])) {
        $this->booleanValue = $vals['booleanValue'];
      }
    }
  }

  public function getName() {
    return 'SquareFeature';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->controlState);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->booleanValue);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('SquareFeature');
    if ($this->controlState !== null) {
      $xfer += $output->writeFieldBegin('controlState', TType::I32, 1);
      $xfer += $output->writeI32($this->controlState);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->booleanValue !== null) {
      $xfer += $output->writeFieldBegin('booleanValue', TType::I32, 2);
      $xfer += $output->writeI32($this->booleanValue);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class SquareFeatureSet {
  static $_TSPEC;

  /**
   * @var string
   */
  public $squareMid = null;
  /**
   * @var int
   */
  public $revision = null;
  /**
   * @var \SquareFeature
   */
  public $creatingSecretSquareChat = null;
  /**
   * @var \SquareFeature
   */
  public $invitingIntoOpenSquareChat = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'squareMid',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'revision',
          'type' => TType::I64,
          ),
        11 => array(
          'var' => 'creatingSecretSquareChat',
          'type' => TType::STRUCT,
          'class' => '\SquareFeature',
          ),
        12 => array(
          'var' => 'invitingIntoOpenSquareChat',
          'type' => TType::STRUCT,
          'class' => '\SquareFeature',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['squareMid'])) {
        $this->squareMid = $vals['squareMid'];
      }
      if (isset($vals['revision'])) {
        $this->revision = $vals['revision'];
      }
      if (isset($vals['creatingSecretSquareChat'])) {
        $this->creatingSecretSquareChat = $vals['creatingSecretSquareChat'];
      }
      if (isset($vals['invitingIntoOpenSquareChat'])) {
        $this->invitingIntoOpenSquareChat = $vals['invitingIntoOpenSquareChat'];
      }
    }
  }

  public function getName() {
    return 'SquareFeatureSet';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->squareMid);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->revision);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 11:
          if ($ftype == TType::STRUCT) {
            $this->creatingSecretSquareChat = new \SquareFeature();
            $xfer += $this->creatingSecretSquareChat->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 12:
          if ($ftype == TType::STRUCT) {
            $this->invitingIntoOpenSquareChat = new \SquareFeature();
            $xfer += $this->invitingIntoOpenSquareChat->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('SquareFeatureSet');
    if ($this->squareMid !== null) {
      $xfer += $output->writeFieldBegin('squareMid', TType::STRING, 1);
      $xfer += $output->writeString($this->squareMid);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->revision !== null) {
      $xfer += $output->writeFieldBegin('revision', TType::I64, 2);
      $xfer += $output->writeI64($this->revision);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->creatingSecretSquareChat !== null) {
      if (!is_object($this->creatingSecretSquareChat)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('creatingSecretSquareChat', TType::STRUCT, 11);
      $xfer += $this->creatingSecretSquareChat->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->invitingIntoOpenSquareChat !== null) {
      if (!is_object($this->invitingIntoOpenSquareChat)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('invitingIntoOpenSquareChat', TType::STRUCT, 12);
      $xfer += $this->invitingIntoOpenSquareChat->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class SubscriptionState {
  static $_TSPEC;

  /**
   * @var int
   */
  public $subscriptionId = null;
  /**
   * @var int
   */
  public $ttlMillis = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'subscriptionId',
          'type' => TType::I64,
          ),
        2 => array(
          'var' => 'ttlMillis',
          'type' => TType::I64,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['subscriptionId'])) {
        $this->subscriptionId = $vals['subscriptionId'];
      }
      if (isset($vals['ttlMillis'])) {
        $this->ttlMillis = $vals['ttlMillis'];
      }
    }
  }

  public function getName() {
    return 'SubscriptionState';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->subscriptionId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->ttlMillis);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('SubscriptionState');
    if ($this->subscriptionId !== null) {
      $xfer += $output->writeFieldBegin('subscriptionId', TType::I64, 1);
      $xfer += $output->writeI64($this->subscriptionId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ttlMillis !== null) {
      $xfer += $output->writeFieldBegin('ttlMillis', TType::I64, 2);
      $xfer += $output->writeI64($this->ttlMillis);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ApproveSquareMembersResponse {
  static $_TSPEC;

  /**
   * @var \SquareMember[]
   */
  public $approvedMembers = null;
  /**
   * @var \SquareStatus
   */
  public $status = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'approvedMembers',
          'type' => TType::LST,
          'etype' => TType::STRUCT,
          'elem' => array(
            'type' => TType::STRUCT,
            'class' => '\SquareMember',
            ),
          ),
        2 => array(
          'var' => 'status',
          'type' => TType::STRUCT,
          'class' => '\SquareStatus',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['approvedMembers'])) {
        $this->approvedMembers = $vals['approvedMembers'];
      }
      if (isset($vals['status'])) {
        $this->status = $vals['status'];
      }
    }
  }

  public function getName() {
    return 'ApproveSquareMembersResponse';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::LST) {
            $this->approvedMembers = array();
            $_size317 = 0;
            $_etype320 = 0;
            $xfer += $input->readListBegin($_etype320, $_size317);
            for ($_i321 = 0; $_i321 < $_size317; ++$_i321)
            {
              $elem322 = null;
              $elem322 = new \SquareMember();
              $xfer += $elem322->read($input);
              $this->approvedMembers []= $elem322;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->status = new \SquareStatus();
            $xfer += $this->status->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ApproveSquareMembersResponse');
    if ($this->approvedMembers !== null) {
      if (!is_array($this->approvedMembers)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('approvedMembers', TType::LST, 1);
      {
        $output->writeListBegin(TType::STRUCT, count($this->approvedMembers));
        {
          foreach ($this->approvedMembers as $iter323)
          {
            $xfer += $iter323->write($output);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->status !== null) {
      if (!is_object($this->status)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('status', TType::STRUCT, 2);
      $xfer += $this->status->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ApproveSquareMembersRequest {
  static $_TSPEC;

  /**
   * @var string
   */
  public $squareMid = null;
  /**
   * @var string[]
   */
  public $requestedMemberMids = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        2 => array(
          'var' => 'squareMid',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'requestedMemberMids',
          'type' => TType::LST,
          'etype' => TType::STRING,
          'elem' => array(
            'type' => TType::STRING,
            ),
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['squareMid'])) {
        $this->squareMid = $vals['squareMid'];
      }
      if (isset($vals['requestedMemberMids'])) {
        $this->requestedMemberMids = $vals['requestedMemberMids'];
      }
    }
  }

  public function getName() {
    return 'ApproveSquareMembersRequest';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->squareMid);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::LST) {
            $this->requestedMemberMids = array();
            $_size324 = 0;
            $_etype327 = 0;
            $xfer += $input->readListBegin($_etype327, $_size324);
            for ($_i328 = 0; $_i328 < $_size324; ++$_i328)
            {
              $elem329 = null;
              $xfer += $input->readString($elem329);
              $this->requestedMemberMids []= $elem329;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ApproveSquareMembersRequest');
    if ($this->squareMid !== null) {
      $xfer += $output->writeFieldBegin('squareMid', TType::STRING, 2);
      $xfer += $output->writeString($this->squareMid);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->requestedMemberMids !== null) {
      if (!is_array($this->requestedMemberMids)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('requestedMemberMids', TType::LST, 3);
      {
        $output->writeListBegin(TType::STRING, count($this->requestedMemberMids));
        {
          foreach ($this->requestedMemberMids as $iter330)
          {
            $xfer += $output->writeString($iter330);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class CreateSquareChatResponse {
  static $_TSPEC;

  /**
   * @var \SquareChat
   */
  public $squareChat = null;
  /**
   * @var \SquareChatStatus
   */
  public $squareChatStatus = null;
  /**
   * @var \SquareChatMember
   */
  public $squareChatMember = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'squareChat',
          'type' => TType::STRUCT,
          'class' => '\SquareChat',
          ),
        2 => array(
          'var' => 'squareChatStatus',
          'type' => TType::STRUCT,
          'class' => '\SquareChatStatus',
          ),
        3 => array(
          'var' => 'squareChatMember',
          'type' => TType::STRUCT,
          'class' => '\SquareChatMember',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['squareChat'])) {
        $this->squareChat = $vals['squareChat'];
      }
      if (isset($vals['squareChatStatus'])) {
        $this->squareChatStatus = $vals['squareChatStatus'];
      }
      if (isset($vals['squareChatMember'])) {
        $this->squareChatMember = $vals['squareChatMember'];
      }
    }
  }

  public function getName() {
    return 'CreateSquareChatResponse';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->squareChat = new \SquareChat();
            $xfer += $this->squareChat->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->squareChatStatus = new \SquareChatStatus();
            $xfer += $this->squareChatStatus->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRUCT) {
            $this->squareChatMember = new \SquareChatMember();
            $xfer += $this->squareChatMember->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('CreateSquareChatResponse');
    if ($this->squareChat !== null) {
      if (!is_object($this->squareChat)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('squareChat', TType::STRUCT, 1);
      $xfer += $this->squareChat->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->squareChatStatus !== null) {
      if (!is_object($this->squareChatStatus)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('squareChatStatus', TType::STRUCT, 2);
      $xfer += $this->squareChatStatus->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->squareChatMember !== null) {
      if (!is_object($this->squareChatMember)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('squareChatMember', TType::STRUCT, 3);
      $xfer += $this->squareChatMember->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class CreateSquareChatRequest {
  static $_TSPEC;

  /**
   * @var int
   */
  public $reqSeq = null;
  /**
   * @var \SquareChat
   */
  public $squareChat = null;
  /**
   * @var string[]
   */
  public $squareMemberMids = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'reqSeq',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'squareChat',
          'type' => TType::STRUCT,
          'class' => '\SquareChat',
          ),
        3 => array(
          'var' => 'squareMemberMids',
          'type' => TType::LST,
          'etype' => TType::STRING,
          'elem' => array(
            'type' => TType::STRING,
            ),
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['reqSeq'])) {
        $this->reqSeq = $vals['reqSeq'];
      }
      if (isset($vals['squareChat'])) {
        $this->squareChat = $vals['squareChat'];
      }
      if (isset($vals['squareMemberMids'])) {
        $this->squareMemberMids = $vals['squareMemberMids'];
      }
    }
  }

  public function getName() {
    return 'CreateSquareChatRequest';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->reqSeq);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->squareChat = new \SquareChat();
            $xfer += $this->squareChat->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::LST) {
            $this->squareMemberMids = array();
            $_size331 = 0;
            $_etype334 = 0;
            $xfer += $input->readListBegin($_etype334, $_size331);
            for ($_i335 = 0; $_i335 < $_size331; ++$_i335)
            {
              $elem336 = null;
              $xfer += $input->readString($elem336);
              $this->squareMemberMids []= $elem336;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('CreateSquareChatRequest');
    if ($this->reqSeq !== null) {
      $xfer += $output->writeFieldBegin('reqSeq', TType::I32, 1);
      $xfer += $output->writeI32($this->reqSeq);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->squareChat !== null) {
      if (!is_object($this->squareChat)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('squareChat', TType::STRUCT, 2);
      $xfer += $this->squareChat->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->squareMemberMids !== null) {
      if (!is_array($this->squareMemberMids)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('squareMemberMids', TType::LST, 3);
      {
        $output->writeListBegin(TType::STRING, count($this->squareMemberMids));
        {
          foreach ($this->squareMemberMids as $iter337)
          {
            $xfer += $output->writeString($iter337);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class CreateSquareResponse {
  static $_TSPEC;

  /**
   * @var \Square
   */
  public $square = null;
  /**
   * @var \SquareMember
   */
  public $creator = null;
  /**
   * @var \SquareAuthority
   */
  public $authority = null;
  /**
   * @var \SquareStatus
   */
  public $status = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'square',
          'type' => TType::STRUCT,
          'class' => '\Square',
          ),
        2 => array(
          'var' => 'creator',
          'type' => TType::STRUCT,
          'class' => '\SquareMember',
          ),
        3 => array(
          'var' => 'authority',
          'type' => TType::STRUCT,
          'class' => '\SquareAuthority',
          ),
        4 => array(
          'var' => 'status',
          'type' => TType::STRUCT,
          'class' => '\SquareStatus',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['square'])) {
        $this->square = $vals['square'];
      }
      if (isset($vals['creator'])) {
        $this->creator = $vals['creator'];
      }
      if (isset($vals['authority'])) {
        $this->authority = $vals['authority'];
      }
      if (isset($vals['status'])) {
        $this->status = $vals['status'];
      }
    }
  }

  public function getName() {
    return 'CreateSquareResponse';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->square = new \Square();
            $xfer += $this->square->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->creator = new \SquareMember();
            $xfer += $this->creator->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRUCT) {
            $this->authority = new \SquareAuthority();
            $xfer += $this->authority->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRUCT) {
            $this->status = new \SquareStatus();
            $xfer += $this->status->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('CreateSquareResponse');
    if ($this->square !== null) {
      if (!is_object($this->square)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('square', TType::STRUCT, 1);
      $xfer += $this->square->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->creator !== null) {
      if (!is_object($this->creator)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('creator', TType::STRUCT, 2);
      $xfer += $this->creator->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->authority !== null) {
      if (!is_object($this->authority)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('authority', TType::STRUCT, 3);
      $xfer += $this->authority->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->status !== null) {
      if (!is_object($this->status)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('status', TType::STRUCT, 4);
      $xfer += $this->status->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class CreateSquareRequest {
  static $_TSPEC;

  /**
   * @var int
   */
  public $reqSeq = null;
  /**
   * @var \Square
   */
  public $square = null;
  /**
   * @var \SquareMember
   */
  public $creator = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'reqSeq',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'square',
          'type' => TType::STRUCT,
          'class' => '\Square',
          ),
        3 => array(
          'var' => 'creator',
          'type' => TType::STRUCT,
          'class' => '\SquareMember',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['reqSeq'])) {
        $this->reqSeq = $vals['reqSeq'];
      }
      if (isset($vals['square'])) {
        $this->square = $vals['square'];
      }
      if (isset($vals['creator'])) {
        $this->creator = $vals['creator'];
      }
    }
  }

  public function getName() {
    return 'CreateSquareRequest';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->reqSeq);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->square = new \Square();
            $xfer += $this->square->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRUCT) {
            $this->creator = new \SquareMember();
            $xfer += $this->creator->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('CreateSquareRequest');
    if ($this->reqSeq !== null) {
      $xfer += $output->writeFieldBegin('reqSeq', TType::I32, 1);
      $xfer += $output->writeI32($this->reqSeq);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->square !== null) {
      if (!is_object($this->square)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('square', TType::STRUCT, 2);
      $xfer += $this->square->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->creator !== null) {
      if (!is_object($this->creator)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('creator', TType::STRUCT, 3);
      $xfer += $this->creator->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class DeleteSquareChatResponse {
  static $_TSPEC;


  public function __construct() {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        );
    }
  }

  public function getName() {
    return 'DeleteSquareChatResponse';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('DeleteSquareChatResponse');
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class DeleteSquareChatRequest {
  static $_TSPEC;

  /**
   * @var string
   */
  public $squareChatMid = null;
  /**
   * @var int
   */
  public $revision = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'squareChatMid',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'revision',
          'type' => TType::I64,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['squareChatMid'])) {
        $this->squareChatMid = $vals['squareChatMid'];
      }
      if (isset($vals['revision'])) {
        $this->revision = $vals['revision'];
      }
    }
  }

  public function getName() {
    return 'DeleteSquareChatRequest';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->squareChatMid);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->revision);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('DeleteSquareChatRequest');
    if ($this->squareChatMid !== null) {
      $xfer += $output->writeFieldBegin('squareChatMid', TType::STRING, 1);
      $xfer += $output->writeString($this->squareChatMid);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->revision !== null) {
      $xfer += $output->writeFieldBegin('revision', TType::I64, 2);
      $xfer += $output->writeI64($this->revision);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class DeleteSquareResponse {
  static $_TSPEC;


  public function __construct() {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        );
    }
  }

  public function getName() {
    return 'DeleteSquareResponse';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('DeleteSquareResponse');
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class DeleteSquareRequest {
  static $_TSPEC;

  /**
   * @var string
   */
  public $mid = null;
  /**
   * @var int
   */
  public $revision = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        2 => array(
          'var' => 'mid',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'revision',
          'type' => TType::I64,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['mid'])) {
        $this->mid = $vals['mid'];
      }
      if (isset($vals['revision'])) {
        $this->revision = $vals['revision'];
      }
    }
  }

  public function getName() {
    return 'DeleteSquareRequest';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->mid);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->revision);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('DeleteSquareRequest');
    if ($this->mid !== null) {
      $xfer += $output->writeFieldBegin('mid', TType::STRING, 2);
      $xfer += $output->writeString($this->mid);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->revision !== null) {
      $xfer += $output->writeFieldBegin('revision', TType::I64, 3);
      $xfer += $output->writeI64($this->revision);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class DestroyMessageResponse {
  static $_TSPEC;


  public function __construct() {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        );
    }
  }

  public function getName() {
    return 'DestroyMessageResponse';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('DestroyMessageResponse');
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class DestroyMessageRequest {
  static $_TSPEC;

  /**
   * @var string
   */
  public $squareChatMid = null;
  /**
   * @var string
   */
  public $messageId = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        2 => array(
          'var' => 'squareChatMid',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'messageId',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['squareChatMid'])) {
        $this->squareChatMid = $vals['squareChatMid'];
      }
      if (isset($vals['messageId'])) {
        $this->messageId = $vals['messageId'];
      }
    }
  }

  public function getName() {
    return 'DestroyMessageRequest';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->squareChatMid);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->messageId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('DestroyMessageRequest');
    if ($this->squareChatMid !== null) {
      $xfer += $output->writeFieldBegin('squareChatMid', TType::STRING, 2);
      $xfer += $output->writeString($this->squareChatMid);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->messageId !== null) {
      $xfer += $output->writeFieldBegin('messageId', TType::STRING, 4);
      $xfer += $output->writeString($this->messageId);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class FindSquareByInvitationTicketResponse {
  static $_TSPEC;

  /**
   * @var \Square
   */
  public $square = null;
  /**
   * @var \SquareMember
   */
  public $myMembership = null;
  /**
   * @var \SquareAuthority
   */
  public $squareAuthority = null;
  /**
   * @var \SquareStatus
   */
  public $squareStatus = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'square',
          'type' => TType::STRUCT,
          'class' => '\Square',
          ),
        2 => array(
          'var' => 'myMembership',
          'type' => TType::STRUCT,
          'class' => '\SquareMember',
          ),
        3 => array(
          'var' => 'squareAuthority',
          'type' => TType::STRUCT,
          'class' => '\SquareAuthority',
          ),
        4 => array(
          'var' => 'squareStatus',
          'type' => TType::STRUCT,
          'class' => '\SquareStatus',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['square'])) {
        $this->square = $vals['square'];
      }
      if (isset($vals['myMembership'])) {
        $this->myMembership = $vals['myMembership'];
      }
      if (isset($vals['squareAuthority'])) {
        $this->squareAuthority = $vals['squareAuthority'];
      }
      if (isset($vals['squareStatus'])) {
        $this->squareStatus = $vals['squareStatus'];
      }
    }
  }

  public function getName() {
    return 'FindSquareByInvitationTicketResponse';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->square = new \Square();
            $xfer += $this->square->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->myMembership = new \SquareMember();
            $xfer += $this->myMembership->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRUCT) {
            $this->squareAuthority = new \SquareAuthority();
            $xfer += $this->squareAuthority->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRUCT) {
            $this->squareStatus = new \SquareStatus();
            $xfer += $this->squareStatus->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('FindSquareByInvitationTicketResponse');
    if ($this->square !== null) {
      if (!is_object($this->square)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('square', TType::STRUCT, 1);
      $xfer += $this->square->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->myMembership !== null) {
      if (!is_object($this->myMembership)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('myMembership', TType::STRUCT, 2);
      $xfer += $this->myMembership->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->squareAuthority !== null) {
      if (!is_object($this->squareAuthority)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('squareAuthority', TType::STRUCT, 3);
      $xfer += $this->squareAuthority->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->squareStatus !== null) {
      if (!is_object($this->squareStatus)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('squareStatus', TType::STRUCT, 4);
      $xfer += $this->squareStatus->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class FindSquareByInvitationTicketRequest {
  static $_TSPEC;

  /**
   * @var string
   */
  public $invitationTicket = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        2 => array(
          'var' => 'invitationTicket',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['invitationTicket'])) {
        $this->invitationTicket = $vals['invitationTicket'];
      }
    }
  }

  public function getName() {
    return 'FindSquareByInvitationTicketRequest';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->invitationTicket);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('FindSquareByInvitationTicketRequest');
    if ($this->invitationTicket !== null) {
      $xfer += $output->writeFieldBegin('invitationTicket', TType::STRING, 2);
      $xfer += $output->writeString($this->invitationTicket);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class SquareEventReceiveMessage {
  static $_TSPEC;

  /**
   * @var string
   */
  public $squareChatMid = null;
  /**
   * @var \SquareMessage
   */
  public $squareMessage = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'squareChatMid',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'squareMessage',
          'type' => TType::STRUCT,
          'class' => '\SquareMessage',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['squareChatMid'])) {
        $this->squareChatMid = $vals['squareChatMid'];
      }
      if (isset($vals['squareMessage'])) {
        $this->squareMessage = $vals['squareMessage'];
      }
    }
  }

  public function getName() {
    return 'SquareEventReceiveMessage';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->squareChatMid);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->squareMessage = new \SquareMessage();
            $xfer += $this->squareMessage->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('SquareEventReceiveMessage');
    if ($this->squareChatMid !== null) {
      $xfer += $output->writeFieldBegin('squareChatMid', TType::STRING, 1);
      $xfer += $output->writeString($this->squareChatMid);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->squareMessage !== null) {
      if (!is_object($this->squareMessage)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('squareMessage', TType::STRUCT, 2);
      $xfer += $this->squareMessage->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class SquareEventSendMessage {
  static $_TSPEC;

  /**
   * @var string
   */
  public $squareChatMid = null;
  /**
   * @var \SquareMessage
   */
  public $squareMessage = null;
  /**
   * @var int
   */
  public $reqSeq = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'squareChatMid',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'squareMessage',
          'type' => TType::STRUCT,
          'class' => '\SquareMessage',
          ),
        3 => array(
          'var' => 'reqSeq',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['squareChatMid'])) {
        $this->squareChatMid = $vals['squareChatMid'];
      }
      if (isset($vals['squareMessage'])) {
        $this->squareMessage = $vals['squareMessage'];
      }
      if (isset($vals['reqSeq'])) {
        $this->reqSeq = $vals['reqSeq'];
      }
    }
  }

  public function getName() {
    return 'SquareEventSendMessage';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->squareChatMid);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->squareMessage = new \SquareMessage();
            $xfer += $this->squareMessage->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->reqSeq);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('SquareEventSendMessage');
    if ($this->squareChatMid !== null) {
      $xfer += $output->writeFieldBegin('squareChatMid', TType::STRING, 1);
      $xfer += $output->writeString($this->squareChatMid);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->squareMessage !== null) {
      if (!is_object($this->squareMessage)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('squareMessage', TType::STRUCT, 2);
      $xfer += $this->squareMessage->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->reqSeq !== null) {
      $xfer += $output->writeFieldBegin('reqSeq', TType::I32, 3);
      $xfer += $output->writeI32($this->reqSeq);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class SquareEventNotifiedJoinSquareChat {
  static $_TSPEC;

  /**
   * @var string
   */
  public $squareChatMid = null;
  /**
   * @var \SquareMember
   */
  public $joinedMember = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'squareChatMid',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'joinedMember',
          'type' => TType::STRUCT,
          'class' => '\SquareMember',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['squareChatMid'])) {
        $this->squareChatMid = $vals['squareChatMid'];
      }
      if (isset($vals['joinedMember'])) {
        $this->joinedMember = $vals['joinedMember'];
      }
    }
  }

  public function getName() {
    return 'SquareEventNotifiedJoinSquareChat';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->squareChatMid);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->joinedMember = new \SquareMember();
            $xfer += $this->joinedMember->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('SquareEventNotifiedJoinSquareChat');
    if ($this->squareChatMid !== null) {
      $xfer += $output->writeFieldBegin('squareChatMid', TType::STRING, 1);
      $xfer += $output->writeString($this->squareChatMid);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->joinedMember !== null) {
      if (!is_object($this->joinedMember)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('joinedMember', TType::STRUCT, 2);
      $xfer += $this->joinedMember->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class SquareEventNotifiedInviteIntoSquareChat {
  static $_TSPEC;

  /**
   * @var string
   */
  public $squareChatMid = null;
  /**
   * @var \SquareMember[]
   */
  public $invitees = null;
  /**
   * @var \SquareMember
   */
  public $invitor = null;
  /**
   * @var \SquareMemberRelation
   */
  public $invitorRelation = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'squareChatMid',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'invitees',
          'type' => TType::LST,
          'etype' => TType::STRUCT,
          'elem' => array(
            'type' => TType::STRUCT,
            'class' => '\SquareMember',
            ),
          ),
        3 => array(
          'var' => 'invitor',
          'type' => TType::STRUCT,
          'class' => '\SquareMember',
          ),
        4 => array(
          'var' => 'invitorRelation',
          'type' => TType::STRUCT,
          'class' => '\SquareMemberRelation',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['squareChatMid'])) {
        $this->squareChatMid = $vals['squareChatMid'];
      }
      if (isset($vals['invitees'])) {
        $this->invitees = $vals['invitees'];
      }
      if (isset($vals['invitor'])) {
        $this->invitor = $vals['invitor'];
      }
      if (isset($vals['invitorRelation'])) {
        $this->invitorRelation = $vals['invitorRelation'];
      }
    }
  }

  public function getName() {
    return 'SquareEventNotifiedInviteIntoSquareChat';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->squareChatMid);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::LST) {
            $this->invitees = array();
            $_size338 = 0;
            $_etype341 = 0;
            $xfer += $input->readListBegin($_etype341, $_size338);
            for ($_i342 = 0; $_i342 < $_size338; ++$_i342)
            {
              $elem343 = null;
              $elem343 = new \SquareMember();
              $xfer += $elem343->read($input);
              $this->invitees []= $elem343;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRUCT) {
            $this->invitor = new \SquareMember();
            $xfer += $this->invitor->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRUCT) {
            $this->invitorRelation = new \SquareMemberRelation();
            $xfer += $this->invitorRelation->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('SquareEventNotifiedInviteIntoSquareChat');
    if ($this->squareChatMid !== null) {
      $xfer += $output->writeFieldBegin('squareChatMid', TType::STRING, 1);
      $xfer += $output->writeString($this->squareChatMid);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->invitees !== null) {
      if (!is_array($this->invitees)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('invitees', TType::LST, 2);
      {
        $output->writeListBegin(TType::STRUCT, count($this->invitees));
        {
          foreach ($this->invitees as $iter344)
          {
            $xfer += $iter344->write($output);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->invitor !== null) {
      if (!is_object($this->invitor)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('invitor', TType::STRUCT, 3);
      $xfer += $this->invitor->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->invitorRelation !== null) {
      if (!is_object($this->invitorRelation)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('invitorRelation', TType::STRUCT, 4);
      $xfer += $this->invitorRelation->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class SquareEventNotifiedLeaveSquareChat {
  static $_TSPEC;

  /**
   * @var string
   */
  public $squareChatMid = null;
  /**
   * @var string
   */
  public $squareMemberMid = null;
  /**
   * @var bool
   */
  public $sayGoodbye = null;
  /**
   * @var \SquareMember
   */
  public $squareMember = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'squareChatMid',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'squareMemberMid',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'sayGoodbye',
          'type' => TType::BOOL,
          ),
        4 => array(
          'var' => 'squareMember',
          'type' => TType::STRUCT,
          'class' => '\SquareMember',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['squareChatMid'])) {
        $this->squareChatMid = $vals['squareChatMid'];
      }
      if (isset($vals['squareMemberMid'])) {
        $this->squareMemberMid = $vals['squareMemberMid'];
      }
      if (isset($vals['sayGoodbye'])) {
        $this->sayGoodbye = $vals['sayGoodbye'];
      }
      if (isset($vals['squareMember'])) {
        $this->squareMember = $vals['squareMember'];
      }
    }
  }

  public function getName() {
    return 'SquareEventNotifiedLeaveSquareChat';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->squareChatMid);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->squareMemberMid);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->sayGoodbye);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRUCT) {
            $this->squareMember = new \SquareMember();
            $xfer += $this->squareMember->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('SquareEventNotifiedLeaveSquareChat');
    if ($this->squareChatMid !== null) {
      $xfer += $output->writeFieldBegin('squareChatMid', TType::STRING, 1);
      $xfer += $output->writeString($this->squareChatMid);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->squareMemberMid !== null) {
      $xfer += $output->writeFieldBegin('squareMemberMid', TType::STRING, 2);
      $xfer += $output->writeString($this->squareMemberMid);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->sayGoodbye !== null) {
      $xfer += $output->writeFieldBegin('sayGoodbye', TType::BOOL, 3);
      $xfer += $output->writeBool($this->sayGoodbye);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->squareMember !== null) {
      if (!is_object($this->squareMember)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('squareMember', TType::STRUCT, 4);
      $xfer += $this->squareMember->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class SquareEventNotifiedDestroyMessage {
  static $_TSPEC;

  /**
   * @var string
   */
  public $squareChatMid = null;
  /**
   * @var string
   */
  public $messageId = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'squareChatMid',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'messageId',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['squareChatMid'])) {
        $this->squareChatMid = $vals['squareChatMid'];
      }
      if (isset($vals['messageId'])) {
        $this->messageId = $vals['messageId'];
      }
    }
  }

  public function getName() {
    return 'SquareEventNotifiedDestroyMessage';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->squareChatMid);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->messageId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('SquareEventNotifiedDestroyMessage');
    if ($this->squareChatMid !== null) {
      $xfer += $output->writeFieldBegin('squareChatMid', TType::STRING, 1);
      $xfer += $output->writeString($this->squareChatMid);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->messageId !== null) {
      $xfer += $output->writeFieldBegin('messageId', TType::STRING, 3);
      $xfer += $output->writeString($this->messageId);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class SquareEventNotifiedMarkAsRead {
  static $_TSPEC;

  /**
   * @var string
   */
  public $squareChatMid = null;
  /**
   * @var string
   */
  public $sMemberMid = null;
  /**
   * @var string
   */
  public $messageId = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'squareChatMid',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'sMemberMid',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'messageId',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['squareChatMid'])) {
        $this->squareChatMid = $vals['squareChatMid'];
      }
      if (isset($vals['sMemberMid'])) {
        $this->sMemberMid = $vals['sMemberMid'];
      }
      if (isset($vals['messageId'])) {
        $this->messageId = $vals['messageId'];
      }
    }
  }

  public function getName() {
    return 'SquareEventNotifiedMarkAsRead';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->squareChatMid);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->sMemberMid);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->messageId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('SquareEventNotifiedMarkAsRead');
    if ($this->squareChatMid !== null) {
      $xfer += $output->writeFieldBegin('squareChatMid', TType::STRING, 1);
      $xfer += $output->writeString($this->squareChatMid);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->sMemberMid !== null) {
      $xfer += $output->writeFieldBegin('sMemberMid', TType::STRING, 2);
      $xfer += $output->writeString($this->sMemberMid);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->messageId !== null) {
      $xfer += $output->writeFieldBegin('messageId', TType::STRING, 4);
      $xfer += $output->writeString($this->messageId);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class SquareEventNotifiedUpdateSquareMemberProfile {
  static $_TSPEC;

  /**
   * @var string
   */
  public $squareChatMid = null;
  /**
   * @var \SquareMember
   */
  public $squareMember = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'squareChatMid',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'squareMember',
          'type' => TType::STRUCT,
          'class' => '\SquareMember',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['squareChatMid'])) {
        $this->squareChatMid = $vals['squareChatMid'];
      }
      if (isset($vals['squareMember'])) {
        $this->squareMember = $vals['squareMember'];
      }
    }
  }

  public function getName() {
    return 'SquareEventNotifiedUpdateSquareMemberProfile';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->squareChatMid);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->squareMember = new \SquareMember();
            $xfer += $this->squareMember->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('SquareEventNotifiedUpdateSquareMemberProfile');
    if ($this->squareChatMid !== null) {
      $xfer += $output->writeFieldBegin('squareChatMid', TType::STRING, 1);
      $xfer += $output->writeString($this->squareChatMid);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->squareMember !== null) {
      if (!is_object($this->squareMember)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('squareMember', TType::STRUCT, 2);
      $xfer += $this->squareMember->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class SquareEventNotifiedKickoutFromSquare {
  static $_TSPEC;

  /**
   * @var string
   */
  public $squareChatMid = null;
  /**
   * @var \SquareMember[]
   */
  public $kickees = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'squareChatMid',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'kickees',
          'type' => TType::LST,
          'etype' => TType::STRUCT,
          'elem' => array(
            'type' => TType::STRUCT,
            'class' => '\SquareMember',
            ),
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['squareChatMid'])) {
        $this->squareChatMid = $vals['squareChatMid'];
      }
      if (isset($vals['kickees'])) {
        $this->kickees = $vals['kickees'];
      }
    }
  }

  public function getName() {
    return 'SquareEventNotifiedKickoutFromSquare';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->squareChatMid);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::LST) {
            $this->kickees = array();
            $_size345 = 0;
            $_etype348 = 0;
            $xfer += $input->readListBegin($_etype348, $_size345);
            for ($_i349 = 0; $_i349 < $_size345; ++$_i349)
            {
              $elem350 = null;
              $elem350 = new \SquareMember();
              $xfer += $elem350->read($input);
              $this->kickees []= $elem350;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('SquareEventNotifiedKickoutFromSquare');
    if ($this->squareChatMid !== null) {
      $xfer += $output->writeFieldBegin('squareChatMid', TType::STRING, 1);
      $xfer += $output->writeString($this->squareChatMid);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->kickees !== null) {
      if (!is_array($this->kickees)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('kickees', TType::LST, 2);
      {
        $output->writeListBegin(TType::STRUCT, count($this->kickees));
        {
          foreach ($this->kickees as $iter351)
          {
            $xfer += $iter351->write($output);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class SquareEventNotifiedShutdownSquare {
  static $_TSPEC;

  /**
   * @var string
   */
  public $squareChatMid = null;
  /**
   * @var \Square
   */
  public $square = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'squareChatMid',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'square',
          'type' => TType::STRUCT,
          'class' => '\Square',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['squareChatMid'])) {
        $this->squareChatMid = $vals['squareChatMid'];
      }
      if (isset($vals['square'])) {
        $this->square = $vals['square'];
      }
    }
  }

  public function getName() {
    return 'SquareEventNotifiedShutdownSquare';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->squareChatMid);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->square = new \Square();
            $xfer += $this->square->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('SquareEventNotifiedShutdownSquare');
    if ($this->squareChatMid !== null) {
      $xfer += $output->writeFieldBegin('squareChatMid', TType::STRING, 1);
      $xfer += $output->writeString($this->squareChatMid);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->square !== null) {
      if (!is_object($this->square)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('square', TType::STRUCT, 2);
      $xfer += $this->square->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class SquareEventNotifiedDeleteSquareChat {
  static $_TSPEC;

  /**
   * @var \SquareChat
   */
  public $squareChat = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'squareChat',
          'type' => TType::STRUCT,
          'class' => '\SquareChat',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['squareChat'])) {
        $this->squareChat = $vals['squareChat'];
      }
    }
  }

  public function getName() {
    return 'SquareEventNotifiedDeleteSquareChat';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->squareChat = new \SquareChat();
            $xfer += $this->squareChat->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('SquareEventNotifiedDeleteSquareChat');
    if ($this->squareChat !== null) {
      if (!is_object($this->squareChat)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('squareChat', TType::STRUCT, 1);
      $xfer += $this->squareChat->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class SquareEventNotifiedUpdateSquareChatProfileName {
  static $_TSPEC;

  /**
   * @var string
   */
  public $squareChatMid = null;
  /**
   * @var \SquareMember
   */
  public $editor = null;
  /**
   * @var string
   */
  public $updatedChatName = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'squareChatMid',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'editor',
          'type' => TType::STRUCT,
          'class' => '\SquareMember',
          ),
        3 => array(
          'var' => 'updatedChatName',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['squareChatMid'])) {
        $this->squareChatMid = $vals['squareChatMid'];
      }
      if (isset($vals['editor'])) {
        $this->editor = $vals['editor'];
      }
      if (isset($vals['updatedChatName'])) {
        $this->updatedChatName = $vals['updatedChatName'];
      }
    }
  }

  public function getName() {
    return 'SquareEventNotifiedUpdateSquareChatProfileName';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->squareChatMid);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->editor = new \SquareMember();
            $xfer += $this->editor->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->updatedChatName);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('SquareEventNotifiedUpdateSquareChatProfileName');
    if ($this->squareChatMid !== null) {
      $xfer += $output->writeFieldBegin('squareChatMid', TType::STRING, 1);
      $xfer += $output->writeString($this->squareChatMid);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->editor !== null) {
      if (!is_object($this->editor)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('editor', TType::STRUCT, 2);
      $xfer += $this->editor->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->updatedChatName !== null) {
      $xfer += $output->writeFieldBegin('updatedChatName', TType::STRING, 3);
      $xfer += $output->writeString($this->updatedChatName);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class SquareEventNotifiedUpdateSquareChatProfileImage {
  static $_TSPEC;

  /**
   * @var string
   */
  public $squareChatMid = null;
  /**
   * @var \SquareMember
   */
  public $editor = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'squareChatMid',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'editor',
          'type' => TType::STRUCT,
          'class' => '\SquareMember',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['squareChatMid'])) {
        $this->squareChatMid = $vals['squareChatMid'];
      }
      if (isset($vals['editor'])) {
        $this->editor = $vals['editor'];
      }
    }
  }

  public function getName() {
    return 'SquareEventNotifiedUpdateSquareChatProfileImage';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->squareChatMid);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->editor = new \SquareMember();
            $xfer += $this->editor->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('SquareEventNotifiedUpdateSquareChatProfileImage');
    if ($this->squareChatMid !== null) {
      $xfer += $output->writeFieldBegin('squareChatMid', TType::STRING, 1);
      $xfer += $output->writeString($this->squareChatMid);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->editor !== null) {
      if (!is_object($this->editor)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('editor', TType::STRUCT, 2);
      $xfer += $this->editor->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class SquareEventNotifiedUpdateSquareChatStatus {
  static $_TSPEC;

  /**
   * @var string
   */
  public $squareChatMid = null;
  /**
   * @var \SquareChatStatusWithoutMessage
   */
  public $statusWithoutMessage = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'squareChatMid',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'statusWithoutMessage',
          'type' => TType::STRUCT,
          'class' => '\SquareChatStatusWithoutMessage',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['squareChatMid'])) {
        $this->squareChatMid = $vals['squareChatMid'];
      }
      if (isset($vals['statusWithoutMessage'])) {
        $this->statusWithoutMessage = $vals['statusWithoutMessage'];
      }
    }
  }

  public function getName() {
    return 'SquareEventNotifiedUpdateSquareChatStatus';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->squareChatMid);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->statusWithoutMessage = new \SquareChatStatusWithoutMessage();
            $xfer += $this->statusWithoutMessage->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('SquareEventNotifiedUpdateSquareChatStatus');
    if ($this->squareChatMid !== null) {
      $xfer += $output->writeFieldBegin('squareChatMid', TType::STRING, 1);
      $xfer += $output->writeString($this->squareChatMid);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->statusWithoutMessage !== null) {
      if (!is_object($this->statusWithoutMessage)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('statusWithoutMessage', TType::STRUCT, 2);
      $xfer += $this->statusWithoutMessage->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class SquareEventNotifiedUpdateSquareStatus {
  static $_TSPEC;

  /**
   * @var string
   */
  public $squareMid = null;
  /**
   * @var \SquareStatus
   */
  public $squareStatus = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'squareMid',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'squareStatus',
          'type' => TType::STRUCT,
          'class' => '\SquareStatus',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['squareMid'])) {
        $this->squareMid = $vals['squareMid'];
      }
      if (isset($vals['squareStatus'])) {
        $this->squareStatus = $vals['squareStatus'];
      }
    }
  }

  public function getName() {
    return 'SquareEventNotifiedUpdateSquareStatus';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->squareMid);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->squareStatus = new \SquareStatus();
            $xfer += $this->squareStatus->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('SquareEventNotifiedUpdateSquareStatus');
    if ($this->squareMid !== null) {
      $xfer += $output->writeFieldBegin('squareMid', TType::STRING, 1);
      $xfer += $output->writeString($this->squareMid);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->squareStatus !== null) {
      if (!is_object($this->squareStatus)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('squareStatus', TType::STRUCT, 2);
      $xfer += $this->squareStatus->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class SquareEventNotifiedCreateSquareMember {
  static $_TSPEC;

  /**
   * @var \Square
   */
  public $square = null;
  /**
   * @var \SquareAuthority
   */
  public $squareAuthority = null;
  /**
   * @var \SquareStatus
   */
  public $squareStatus = null;
  /**
   * @var \SquareMember
   */
  public $squareMember = null;
  /**
   * @var \SquareFeatureSet
   */
  public $squareFeatureSet = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'square',
          'type' => TType::STRUCT,
          'class' => '\Square',
          ),
        2 => array(
          'var' => 'squareAuthority',
          'type' => TType::STRUCT,
          'class' => '\SquareAuthority',
          ),
        3 => array(
          'var' => 'squareStatus',
          'type' => TType::STRUCT,
          'class' => '\SquareStatus',
          ),
        4 => array(
          'var' => 'squareMember',
          'type' => TType::STRUCT,
          'class' => '\SquareMember',
          ),
        5 => array(
          'var' => 'squareFeatureSet',
          'type' => TType::STRUCT,
          'class' => '\SquareFeatureSet',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['square'])) {
        $this->square = $vals['square'];
      }
      if (isset($vals['squareAuthority'])) {
        $this->squareAuthority = $vals['squareAuthority'];
      }
      if (isset($vals['squareStatus'])) {
        $this->squareStatus = $vals['squareStatus'];
      }
      if (isset($vals['squareMember'])) {
        $this->squareMember = $vals['squareMember'];
      }
      if (isset($vals['squareFeatureSet'])) {
        $this->squareFeatureSet = $vals['squareFeatureSet'];
      }
    }
  }

  public function getName() {
    return 'SquareEventNotifiedCreateSquareMember';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->square = new \Square();
            $xfer += $this->square->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->squareAuthority = new \SquareAuthority();
            $xfer += $this->squareAuthority->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRUCT) {
            $this->squareStatus = new \SquareStatus();
            $xfer += $this->squareStatus->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRUCT) {
            $this->squareMember = new \SquareMember();
            $xfer += $this->squareMember->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRUCT) {
            $this->squareFeatureSet = new \SquareFeatureSet();
            $xfer += $this->squareFeatureSet->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('SquareEventNotifiedCreateSquareMember');
    if ($this->square !== null) {
      if (!is_object($this->square)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('square', TType::STRUCT, 1);
      $xfer += $this->square->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->squareAuthority !== null) {
      if (!is_object($this->squareAuthority)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('squareAuthority', TType::STRUCT, 2);
      $xfer += $this->squareAuthority->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->squareStatus !== null) {
      if (!is_object($this->squareStatus)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('squareStatus', TType::STRUCT, 3);
      $xfer += $this->squareStatus->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->squareMember !== null) {
      if (!is_object($this->squareMember)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('squareMember', TType::STRUCT, 4);
      $xfer += $this->squareMember->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->squareFeatureSet !== null) {
      if (!is_object($this->squareFeatureSet)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('squareFeatureSet', TType::STRUCT, 5);
      $xfer += $this->squareFeatureSet->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class SquareEventNotifiedCreateSquareChatMember {
  static $_TSPEC;

  /**
   * @var string
   */
  public $squareChatMid = null;
  /**
   * @var string
   */
  public $squareMemberMid = null;
  /**
   * @var \SquareChatMember
   */
  public $squareChatMember = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'squareChatMid',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'squareMemberMid',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'squareChatMember',
          'type' => TType::STRUCT,
          'class' => '\SquareChatMember',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['squareChatMid'])) {
        $this->squareChatMid = $vals['squareChatMid'];
      }
      if (isset($vals['squareMemberMid'])) {
        $this->squareMemberMid = $vals['squareMemberMid'];
      }
      if (isset($vals['squareChatMember'])) {
        $this->squareChatMember = $vals['squareChatMember'];
      }
    }
  }

  public function getName() {
    return 'SquareEventNotifiedCreateSquareChatMember';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->squareChatMid);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->squareMemberMid);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRUCT) {
            $this->squareChatMember = new \SquareChatMember();
            $xfer += $this->squareChatMember->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('SquareEventNotifiedCreateSquareChatMember');
    if ($this->squareChatMid !== null) {
      $xfer += $output->writeFieldBegin('squareChatMid', TType::STRING, 1);
      $xfer += $output->writeString($this->squareChatMid);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->squareMemberMid !== null) {
      $xfer += $output->writeFieldBegin('squareMemberMid', TType::STRING, 2);
      $xfer += $output->writeString($this->squareMemberMid);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->squareChatMember !== null) {
      if (!is_object($this->squareChatMember)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('squareChatMember', TType::STRUCT, 3);
      $xfer += $this->squareChatMember->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class SquareEventNotifiedUpdateSquareMemberRelation {
  static $_TSPEC;

  /**
   * @var string
   */
  public $squareMid = null;
  /**
   * @var string
   */
  public $myMemberMid = null;
  /**
   * @var string
   */
  public $targetSquareMemberMid = null;
  /**
   * @var \SquareMemberRelation
   */
  public $squareMemberRelation = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'squareMid',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'myMemberMid',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'targetSquareMemberMid',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'squareMemberRelation',
          'type' => TType::STRUCT,
          'class' => '\SquareMemberRelation',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['squareMid'])) {
        $this->squareMid = $vals['squareMid'];
      }
      if (isset($vals['myMemberMid'])) {
        $this->myMemberMid = $vals['myMemberMid'];
      }
      if (isset($vals['targetSquareMemberMid'])) {
        $this->targetSquareMemberMid = $vals['targetSquareMemberMid'];
      }
      if (isset($vals['squareMemberRelation'])) {
        $this->squareMemberRelation = $vals['squareMemberRelation'];
      }
    }
  }

  public function getName() {
    return 'SquareEventNotifiedUpdateSquareMemberRelation';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->squareMid);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->myMemberMid);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->targetSquareMemberMid);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRUCT) {
            $this->squareMemberRelation = new \SquareMemberRelation();
            $xfer += $this->squareMemberRelation->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('SquareEventNotifiedUpdateSquareMemberRelation');
    if ($this->squareMid !== null) {
      $xfer += $output->writeFieldBegin('squareMid', TType::STRING, 1);
      $xfer += $output->writeString($this->squareMid);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->myMemberMid !== null) {
      $xfer += $output->writeFieldBegin('myMemberMid', TType::STRING, 2);
      $xfer += $output->writeString($this->myMemberMid);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->targetSquareMemberMid !== null) {
      $xfer += $output->writeFieldBegin('targetSquareMemberMid', TType::STRING, 3);
      $xfer += $output->writeString($this->targetSquareMemberMid);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->squareMemberRelation !== null) {
      if (!is_object($this->squareMemberRelation)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('squareMemberRelation', TType::STRUCT, 4);
      $xfer += $this->squareMemberRelation->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class SquareEventNotifiedUpdateSquare {
  static $_TSPEC;

  /**
   * @var string
   */
  public $squareMid = null;
  /**
   * @var \Square
   */
  public $square = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'squareMid',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'square',
          'type' => TType::STRUCT,
          'class' => '\Square',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['squareMid'])) {
        $this->squareMid = $vals['squareMid'];
      }
      if (isset($vals['square'])) {
        $this->square = $vals['square'];
      }
    }
  }

  public function getName() {
    return 'SquareEventNotifiedUpdateSquare';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->squareMid);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->square = new \Square();
            $xfer += $this->square->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('SquareEventNotifiedUpdateSquare');
    if ($this->squareMid !== null) {
      $xfer += $output->writeFieldBegin('squareMid', TType::STRING, 1);
      $xfer += $output->writeString($this->squareMid);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->square !== null) {
      if (!is_object($this->square)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('square', TType::STRUCT, 2);
      $xfer += $this->square->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class SquareEventNotifiedUpdateSquareMember {
  static $_TSPEC;

  /**
   * @var string
   */
  public $squareMid = null;
  /**
   * @var string
   */
  public $squareMemberMid = null;
  /**
   * @var \SquareMember
   */
  public $squareMember = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'squareMid',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'squareMemberMid',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'squareMember',
          'type' => TType::STRUCT,
          'class' => '\SquareMember',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['squareMid'])) {
        $this->squareMid = $vals['squareMid'];
      }
      if (isset($vals['squareMemberMid'])) {
        $this->squareMemberMid = $vals['squareMemberMid'];
      }
      if (isset($vals['squareMember'])) {
        $this->squareMember = $vals['squareMember'];
      }
    }
  }

  public function getName() {
    return 'SquareEventNotifiedUpdateSquareMember';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->squareMid);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->squareMemberMid);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRUCT) {
            $this->squareMember = new \SquareMember();
            $xfer += $this->squareMember->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('SquareEventNotifiedUpdateSquareMember');
    if ($this->squareMid !== null) {
      $xfer += $output->writeFieldBegin('squareMid', TType::STRING, 1);
      $xfer += $output->writeString($this->squareMid);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->squareMemberMid !== null) {
      $xfer += $output->writeFieldBegin('squareMemberMid', TType::STRING, 2);
      $xfer += $output->writeString($this->squareMemberMid);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->squareMember !== null) {
      if (!is_object($this->squareMember)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('squareMember', TType::STRUCT, 3);
      $xfer += $this->squareMember->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class SquareEventNotifiedUpdateSquareChat {
  static $_TSPEC;

  /**
   * @var string
   */
  public $squareMid = null;
  /**
   * @var string
   */
  public $squareChatMid = null;
  /**
   * @var \SquareChat
   */
  public $squareChat = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'squareMid',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'squareChatMid',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'squareChat',
          'type' => TType::STRUCT,
          'class' => '\SquareChat',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['squareMid'])) {
        $this->squareMid = $vals['squareMid'];
      }
      if (isset($vals['squareChatMid'])) {
        $this->squareChatMid = $vals['squareChatMid'];
      }
      if (isset($vals['squareChat'])) {
        $this->squareChat = $vals['squareChat'];
      }
    }
  }

  public function getName() {
    return 'SquareEventNotifiedUpdateSquareChat';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->squareMid);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->squareChatMid);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRUCT) {
            $this->squareChat = new \SquareChat();
            $xfer += $this->squareChat->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('SquareEventNotifiedUpdateSquareChat');
    if ($this->squareMid !== null) {
      $xfer += $output->writeFieldBegin('squareMid', TType::STRING, 1);
      $xfer += $output->writeString($this->squareMid);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->squareChatMid !== null) {
      $xfer += $output->writeFieldBegin('squareChatMid', TType::STRING, 2);
      $xfer += $output->writeString($this->squareChatMid);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->squareChat !== null) {
      if (!is_object($this->squareChat)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('squareChat', TType::STRUCT, 3);
      $xfer += $this->squareChat->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class SquareEventNotificationJoinRequest {
  static $_TSPEC;

  /**
   * @var string
   */
  public $squareMid = null;
  /**
   * @var string
   */
  public $squareName = null;
  /**
   * @var string
   */
  public $requestMemberName = null;
  /**
   * @var string
   */
  public $profileImageObsHash = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'squareMid',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'squareName',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'requestMemberName',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'profileImageObsHash',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['squareMid'])) {
        $this->squareMid = $vals['squareMid'];
      }
      if (isset($vals['squareName'])) {
        $this->squareName = $vals['squareName'];
      }
      if (isset($vals['requestMemberName'])) {
        $this->requestMemberName = $vals['requestMemberName'];
      }
      if (isset($vals['profileImageObsHash'])) {
        $this->profileImageObsHash = $vals['profileImageObsHash'];
      }
    }
  }

  public function getName() {
    return 'SquareEventNotificationJoinRequest';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->squareMid);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->squareName);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->requestMemberName);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->profileImageObsHash);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('SquareEventNotificationJoinRequest');
    if ($this->squareMid !== null) {
      $xfer += $output->writeFieldBegin('squareMid', TType::STRING, 1);
      $xfer += $output->writeString($this->squareMid);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->squareName !== null) {
      $xfer += $output->writeFieldBegin('squareName', TType::STRING, 2);
      $xfer += $output->writeString($this->squareName);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->requestMemberName !== null) {
      $xfer += $output->writeFieldBegin('requestMemberName', TType::STRING, 3);
      $xfer += $output->writeString($this->requestMemberName);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->profileImageObsHash !== null) {
      $xfer += $output->writeFieldBegin('profileImageObsHash', TType::STRING, 4);
      $xfer += $output->writeString($this->profileImageObsHash);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class SquareEventNotificationMemberUpdate {
  static $_TSPEC;

  /**
   * @var string
   */
  public $squareMid = null;
  /**
   * @var string
   */
  public $squareName = null;
  /**
   * @var string
   */
  public $profileImageObsHash = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'squareMid',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'squareName',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'profileImageObsHash',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['squareMid'])) {
        $this->squareMid = $vals['squareMid'];
      }
      if (isset($vals['squareName'])) {
        $this->squareName = $vals['squareName'];
      }
      if (isset($vals['profileImageObsHash'])) {
        $this->profileImageObsHash = $vals['profileImageObsHash'];
      }
    }
  }

  public function getName() {
    return 'SquareEventNotificationMemberUpdate';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->squareMid);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->squareName);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->profileImageObsHash);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('SquareEventNotificationMemberUpdate');
    if ($this->squareMid !== null) {
      $xfer += $output->writeFieldBegin('squareMid', TType::STRING, 1);
      $xfer += $output->writeString($this->squareMid);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->squareName !== null) {
      $xfer += $output->writeFieldBegin('squareName', TType::STRING, 2);
      $xfer += $output->writeString($this->squareName);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->profileImageObsHash !== null) {
      $xfer += $output->writeFieldBegin('profileImageObsHash', TType::STRING, 3);
      $xfer += $output->writeString($this->profileImageObsHash);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class SquareEventNotificationSquareDelete {
  static $_TSPEC;

  /**
   * @var string
   */
  public $squareMid = null;
  /**
   * @var string
   */
  public $squareName = null;
  /**
   * @var string
   */
  public $profileImageObsHash = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'squareMid',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'squareName',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'profileImageObsHash',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['squareMid'])) {
        $this->squareMid = $vals['squareMid'];
      }
      if (isset($vals['squareName'])) {
        $this->squareName = $vals['squareName'];
      }
      if (isset($vals['profileImageObsHash'])) {
        $this->profileImageObsHash = $vals['profileImageObsHash'];
      }
    }
  }

  public function getName() {
    return 'SquareEventNotificationSquareDelete';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->squareMid);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->squareName);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->profileImageObsHash);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('SquareEventNotificationSquareDelete');
    if ($this->squareMid !== null) {
      $xfer += $output->writeFieldBegin('squareMid', TType::STRING, 1);
      $xfer += $output->writeString($this->squareMid);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->squareName !== null) {
      $xfer += $output->writeFieldBegin('squareName', TType::STRING, 2);
      $xfer += $output->writeString($this->squareName);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->profileImageObsHash !== null) {
      $xfer += $output->writeFieldBegin('profileImageObsHash', TType::STRING, 3);
      $xfer += $output->writeString($this->profileImageObsHash);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class SquareEventNotificationSquareChatDelete {
  static $_TSPEC;

  /**
   * @var string
   */
  public $squareChatMid = null;
  /**
   * @var string
   */
  public $squareChatName = null;
  /**
   * @var string
   */
  public $profileImageObsHash = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'squareChatMid',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'squareChatName',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'profileImageObsHash',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['squareChatMid'])) {
        $this->squareChatMid = $vals['squareChatMid'];
      }
      if (isset($vals['squareChatName'])) {
        $this->squareChatName = $vals['squareChatName'];
      }
      if (isset($vals['profileImageObsHash'])) {
        $this->profileImageObsHash = $vals['profileImageObsHash'];
      }
    }
  }

  public function getName() {
    return 'SquareEventNotificationSquareChatDelete';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->squareChatMid);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->squareChatName);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->profileImageObsHash);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('SquareEventNotificationSquareChatDelete');
    if ($this->squareChatMid !== null) {
      $xfer += $output->writeFieldBegin('squareChatMid', TType::STRING, 1);
      $xfer += $output->writeString($this->squareChatMid);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->squareChatName !== null) {
      $xfer += $output->writeFieldBegin('squareChatName', TType::STRING, 2);
      $xfer += $output->writeString($this->squareChatName);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->profileImageObsHash !== null) {
      $xfer += $output->writeFieldBegin('profileImageObsHash', TType::STRING, 3);
      $xfer += $output->writeString($this->profileImageObsHash);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class SquareEventNotificationMessage {
  static $_TSPEC;

  /**
   * @var string
   */
  public $squareChatMid = null;
  /**
   * @var \SquareMessage
   */
  public $squareMessage = null;
  /**
   * @var string
   */
  public $senderDisplayName = null;
  /**
   * @var int
   */
  public $unreadCount = null;
  /**
   * @var bool
   */
  public $requiredToFetchChatEvents = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'squareChatMid',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'squareMessage',
          'type' => TType::STRUCT,
          'class' => '\SquareMessage',
          ),
        3 => array(
          'var' => 'senderDisplayName',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'unreadCount',
          'type' => TType::I32,
          ),
        5 => array(
          'var' => 'requiredToFetchChatEvents',
          'type' => TType::BOOL,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['squareChatMid'])) {
        $this->squareChatMid = $vals['squareChatMid'];
      }
      if (isset($vals['squareMessage'])) {
        $this->squareMessage = $vals['squareMessage'];
      }
      if (isset($vals['senderDisplayName'])) {
        $this->senderDisplayName = $vals['senderDisplayName'];
      }
      if (isset($vals['unreadCount'])) {
        $this->unreadCount = $vals['unreadCount'];
      }
      if (isset($vals['requiredToFetchChatEvents'])) {
        $this->requiredToFetchChatEvents = $vals['requiredToFetchChatEvents'];
      }
    }
  }

  public function getName() {
    return 'SquareEventNotificationMessage';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->squareChatMid);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->squareMessage = new \SquareMessage();
            $xfer += $this->squareMessage->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->senderDisplayName);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->unreadCount);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->requiredToFetchChatEvents);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('SquareEventNotificationMessage');
    if ($this->squareChatMid !== null) {
      $xfer += $output->writeFieldBegin('squareChatMid', TType::STRING, 1);
      $xfer += $output->writeString($this->squareChatMid);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->squareMessage !== null) {
      if (!is_object($this->squareMessage)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('squareMessage', TType::STRUCT, 2);
      $xfer += $this->squareMessage->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->senderDisplayName !== null) {
      $xfer += $output->writeFieldBegin('senderDisplayName', TType::STRING, 3);
      $xfer += $output->writeString($this->senderDisplayName);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->unreadCount !== null) {
      $xfer += $output->writeFieldBegin('unreadCount', TType::I32, 4);
      $xfer += $output->writeI32($this->unreadCount);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->requiredToFetchChatEvents !== null) {
      $xfer += $output->writeFieldBegin('requiredToFetchChatEvents', TType::BOOL, 5);
      $xfer += $output->writeBool($this->requiredToFetchChatEvents);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class SquareEventNotifiedUpdateSquareChatMember {
  static $_TSPEC;

  /**
   * @var string
   */
  public $squareChatMid = null;
  /**
   * @var string
   */
  public $squareMemberMid = null;
  /**
   * @var \SquareChatMember
   */
  public $squareChatMember = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'squareChatMid',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'squareMemberMid',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'squareChatMember',
          'type' => TType::STRUCT,
          'class' => '\SquareChatMember',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['squareChatMid'])) {
        $this->squareChatMid = $vals['squareChatMid'];
      }
      if (isset($vals['squareMemberMid'])) {
        $this->squareMemberMid = $vals['squareMemberMid'];
      }
      if (isset($vals['squareChatMember'])) {
        $this->squareChatMember = $vals['squareChatMember'];
      }
    }
  }

  public function getName() {
    return 'SquareEventNotifiedUpdateSquareChatMember';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->squareChatMid);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->squareMemberMid);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRUCT) {
            $this->squareChatMember = new \SquareChatMember();
            $xfer += $this->squareChatMember->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('SquareEventNotifiedUpdateSquareChatMember');
    if ($this->squareChatMid !== null) {
      $xfer += $output->writeFieldBegin('squareChatMid', TType::STRING, 1);
      $xfer += $output->writeString($this->squareChatMid);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->squareMemberMid !== null) {
      $xfer += $output->writeFieldBegin('squareMemberMid', TType::STRING, 2);
      $xfer += $output->writeString($this->squareMemberMid);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->squareChatMember !== null) {
      if (!is_object($this->squareChatMember)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('squareChatMember', TType::STRUCT, 3);
      $xfer += $this->squareChatMember->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class SquareEventNotifiedUpdateSquareAuthority {
  static $_TSPEC;

  /**
   * @var string
   */
  public $squareMid = null;
  /**
   * @var \SquareAuthority
   */
  public $squareAuthority = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'squareMid',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'squareAuthority',
          'type' => TType::STRUCT,
          'class' => '\SquareAuthority',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['squareMid'])) {
        $this->squareMid = $vals['squareMid'];
      }
      if (isset($vals['squareAuthority'])) {
        $this->squareAuthority = $vals['squareAuthority'];
      }
    }
  }

  public function getName() {
    return 'SquareEventNotifiedUpdateSquareAuthority';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->squareMid);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->squareAuthority = new \SquareAuthority();
            $xfer += $this->squareAuthority->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('SquareEventNotifiedUpdateSquareAuthority');
    if ($this->squareMid !== null) {
      $xfer += $output->writeFieldBegin('squareMid', TType::STRING, 1);
      $xfer += $output->writeString($this->squareMid);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->squareAuthority !== null) {
      if (!is_object($this->squareAuthority)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('squareAuthority', TType::STRUCT, 2);
      $xfer += $this->squareAuthority->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class SquareEventNotifiedUpdateSquareFeatureSet {
  static $_TSPEC;

  /**
   * @var \SquareFeatureSet
   */
  public $squareFeatureSet = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'squareFeatureSet',
          'type' => TType::STRUCT,
          'class' => '\SquareFeatureSet',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['squareFeatureSet'])) {
        $this->squareFeatureSet = $vals['squareFeatureSet'];
      }
    }
  }

  public function getName() {
    return 'SquareEventNotifiedUpdateSquareFeatureSet';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->squareFeatureSet = new \SquareFeatureSet();
            $xfer += $this->squareFeatureSet->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('SquareEventNotifiedUpdateSquareFeatureSet');
    if ($this->squareFeatureSet !== null) {
      if (!is_object($this->squareFeatureSet)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('squareFeatureSet', TType::STRUCT, 1);
      $xfer += $this->squareFeatureSet->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class SquareEventPayload {
  static $_TSPEC;

  /**
   * @var \SquareEventReceiveMessage
   */
  public $receiveMessage = null;
  /**
   * @var \SquareEventSendMessage
   */
  public $sendMessage = null;
  /**
   * @var \SquareEventNotifiedJoinSquareChat
   */
  public $notifiedJoinSquareChat = null;
  /**
   * @var \SquareEventNotifiedInviteIntoSquareChat
   */
  public $notifiedInviteIntoSquareChat = null;
  /**
   * @var \SquareEventNotifiedLeaveSquareChat
   */
  public $notifiedLeaveSquareChat = null;
  /**
   * @var \SquareEventNotifiedDestroyMessage
   */
  public $notifiedDestroyMessage = null;
  /**
   * @var \SquareEventNotifiedMarkAsRead
   */
  public $notifiedMarkAsRead = null;
  /**
   * @var \SquareEventNotifiedUpdateSquareMemberProfile
   */
  public $notifiedUpdateSquareMemberProfile = null;
  /**
   * @var \SquareEventNotifiedKickoutFromSquare
   */
  public $notifiedKickoutFromSquare = null;
  /**
   * @var \SquareEventNotifiedShutdownSquare
   */
  public $notifiedShutdownSquare = null;
  /**
   * @var \SquareEventNotifiedDeleteSquareChat
   */
  public $notifiedDeleteSquareChat = null;
  /**
   * @var \SquareEventNotifiedUpdateSquareChatProfileName
   */
  public $notifiedUpdateSquareChatProfileName = null;
  /**
   * @var \SquareEventNotifiedUpdateSquareChatProfileImage
   */
  public $notifiedUpdateSquareChatProfileImage = null;
  /**
   * @var \SquareEventNotifiedUpdateSquareStatus
   */
  public $notifiedUpdateSquareStatus = null;
  /**
   * @var \SquareEventNotifiedUpdateSquareChatStatus
   */
  public $notifiedUpdateSquareChatStatus = null;
  /**
   * @var \SquareEventNotifiedCreateSquareMember
   */
  public $notifiedCreateSquareMember = null;
  /**
   * @var \SquareEventNotifiedCreateSquareChatMember
   */
  public $notifiedCreateSquareChatMember = null;
  /**
   * @var \SquareEventNotifiedUpdateSquareMemberRelation
   */
  public $notifiedUpdateSquareMemberRelation = null;
  /**
   * @var \SquareEventNotifiedUpdateSquare
   */
  public $notifiedUpdateSquare = null;
  /**
   * @var \SquareEventNotifiedUpdateSquareMember
   */
  public $notifiedUpdateSquareMember = null;
  /**
   * @var \SquareEventNotifiedUpdateSquareChat
   */
  public $notifiedUpdateSquareChat = null;
  /**
   * @var \SquareEventNotificationJoinRequest
   */
  public $notificationJoinRequest = null;
  /**
   * @var \SquareEventNotificationMemberUpdate
   */
  public $notificationJoined = null;
  /**
   * @var \SquareEventNotificationMemberUpdate
   */
  public $notificationPromoteCoadmin = null;
  /**
   * @var \SquareEventNotificationMemberUpdate
   */
  public $notificationPromoteAdmin = null;
  /**
   * @var \SquareEventNotificationMemberUpdate
   */
  public $notificationDemoteMember = null;
  /**
   * @var \SquareEventNotificationMemberUpdate
   */
  public $notificationKickedOut = null;
  /**
   * @var \SquareEventNotificationSquareDelete
   */
  public $notificationSquareDelete = null;
  /**
   * @var \SquareEventNotificationSquareChatDelete
   */
  public $notificationSquareChatDelete = null;
  /**
   * @var \SquareEventNotificationMessage
   */
  public $notificationMessage = null;
  /**
   * @var \SquareEventNotifiedUpdateSquareChatMember
   */
  public $notifiedUpdateSquareChatMember = null;
  /**
   * @var \SquareEventNotifiedUpdateSquareAuthority
   */
  public $notifiedUpdateSquareAuthority = null;
  /**
   * @var \SquareEventNotifiedUpdateSquareFeatureSet
   */
  public $notifiedUpdateSquareFeatureSet = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'receiveMessage',
          'type' => TType::STRUCT,
          'class' => '\SquareEventReceiveMessage',
          ),
        2 => array(
          'var' => 'sendMessage',
          'type' => TType::STRUCT,
          'class' => '\SquareEventSendMessage',
          ),
        3 => array(
          'var' => 'notifiedJoinSquareChat',
          'type' => TType::STRUCT,
          'class' => '\SquareEventNotifiedJoinSquareChat',
          ),
        4 => array(
          'var' => 'notifiedInviteIntoSquareChat',
          'type' => TType::STRUCT,
          'class' => '\SquareEventNotifiedInviteIntoSquareChat',
          ),
        5 => array(
          'var' => 'notifiedLeaveSquareChat',
          'type' => TType::STRUCT,
          'class' => '\SquareEventNotifiedLeaveSquareChat',
          ),
        6 => array(
          'var' => 'notifiedDestroyMessage',
          'type' => TType::STRUCT,
          'class' => '\SquareEventNotifiedDestroyMessage',
          ),
        7 => array(
          'var' => 'notifiedMarkAsRead',
          'type' => TType::STRUCT,
          'class' => '\SquareEventNotifiedMarkAsRead',
          ),
        8 => array(
          'var' => 'notifiedUpdateSquareMemberProfile',
          'type' => TType::STRUCT,
          'class' => '\SquareEventNotifiedUpdateSquareMemberProfile',
          ),
        20 => array(
          'var' => 'notifiedKickoutFromSquare',
          'type' => TType::STRUCT,
          'class' => '\SquareEventNotifiedKickoutFromSquare',
          ),
        19 => array(
          'var' => 'notifiedShutdownSquare',
          'type' => TType::STRUCT,
          'class' => '\SquareEventNotifiedShutdownSquare',
          ),
        21 => array(
          'var' => 'notifiedDeleteSquareChat',
          'type' => TType::STRUCT,
          'class' => '\SquareEventNotifiedDeleteSquareChat',
          ),
        31 => array(
          'var' => 'notifiedUpdateSquareChatProfileName',
          'type' => TType::STRUCT,
          'class' => '\SquareEventNotifiedUpdateSquareChatProfileName',
          ),
        32 => array(
          'var' => 'notifiedUpdateSquareChatProfileImage',
          'type' => TType::STRUCT,
          'class' => '\SquareEventNotifiedUpdateSquareChatProfileImage',
          ),
        14 => array(
          'var' => 'notifiedUpdateSquareStatus',
          'type' => TType::STRUCT,
          'class' => '\SquareEventNotifiedUpdateSquareStatus',
          ),
        15 => array(
          'var' => 'notifiedUpdateSquareChatStatus',
          'type' => TType::STRUCT,
          'class' => '\SquareEventNotifiedUpdateSquareChatStatus',
          ),
        16 => array(
          'var' => 'notifiedCreateSquareMember',
          'type' => TType::STRUCT,
          'class' => '\SquareEventNotifiedCreateSquareMember',
          ),
        17 => array(
          'var' => 'notifiedCreateSquareChatMember',
          'type' => TType::STRUCT,
          'class' => '\SquareEventNotifiedCreateSquareChatMember',
          ),
        18 => array(
          'var' => 'notifiedUpdateSquareMemberRelation',
          'type' => TType::STRUCT,
          'class' => '\SquareEventNotifiedUpdateSquareMemberRelation',
          ),
        9 => array(
          'var' => 'notifiedUpdateSquare',
          'type' => TType::STRUCT,
          'class' => '\SquareEventNotifiedUpdateSquare',
          ),
        10 => array(
          'var' => 'notifiedUpdateSquareMember',
          'type' => TType::STRUCT,
          'class' => '\SquareEventNotifiedUpdateSquareMember',
          ),
        11 => array(
          'var' => 'notifiedUpdateSquareChat',
          'type' => TType::STRUCT,
          'class' => '\SquareEventNotifiedUpdateSquareChat',
          ),
        22 => array(
          'var' => 'notificationJoinRequest',
          'type' => TType::STRUCT,
          'class' => '\SquareEventNotificationJoinRequest',
          ),
        23 => array(
          'var' => 'notificationJoined',
          'type' => TType::STRUCT,
          'class' => '\SquareEventNotificationMemberUpdate',
          ),
        24 => array(
          'var' => 'notificationPromoteCoadmin',
          'type' => TType::STRUCT,
          'class' => '\SquareEventNotificationMemberUpdate',
          ),
        25 => array(
          'var' => 'notificationPromoteAdmin',
          'type' => TType::STRUCT,
          'class' => '\SquareEventNotificationMemberUpdate',
          ),
        26 => array(
          'var' => 'notificationDemoteMember',
          'type' => TType::STRUCT,
          'class' => '\SquareEventNotificationMemberUpdate',
          ),
        27 => array(
          'var' => 'notificationKickedOut',
          'type' => TType::STRUCT,
          'class' => '\SquareEventNotificationMemberUpdate',
          ),
        28 => array(
          'var' => 'notificationSquareDelete',
          'type' => TType::STRUCT,
          'class' => '\SquareEventNotificationSquareDelete',
          ),
        29 => array(
          'var' => 'notificationSquareChatDelete',
          'type' => TType::STRUCT,
          'class' => '\SquareEventNotificationSquareChatDelete',
          ),
        30 => array(
          'var' => 'notificationMessage',
          'type' => TType::STRUCT,
          'class' => '\SquareEventNotificationMessage',
          ),
        12 => array(
          'var' => 'notifiedUpdateSquareChatMember',
          'type' => TType::STRUCT,
          'class' => '\SquareEventNotifiedUpdateSquareChatMember',
          ),
        13 => array(
          'var' => 'notifiedUpdateSquareAuthority',
          'type' => TType::STRUCT,
          'class' => '\SquareEventNotifiedUpdateSquareAuthority',
          ),
        33 => array(
          'var' => 'notifiedUpdateSquareFeatureSet',
          'type' => TType::STRUCT,
          'class' => '\SquareEventNotifiedUpdateSquareFeatureSet',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['receiveMessage'])) {
        $this->receiveMessage = $vals['receiveMessage'];
      }
      if (isset($vals['sendMessage'])) {
        $this->sendMessage = $vals['sendMessage'];
      }
      if (isset($vals['notifiedJoinSquareChat'])) {
        $this->notifiedJoinSquareChat = $vals['notifiedJoinSquareChat'];
      }
      if (isset($vals['notifiedInviteIntoSquareChat'])) {
        $this->notifiedInviteIntoSquareChat = $vals['notifiedInviteIntoSquareChat'];
      }
      if (isset($vals['notifiedLeaveSquareChat'])) {
        $this->notifiedLeaveSquareChat = $vals['notifiedLeaveSquareChat'];
      }
      if (isset($vals['notifiedDestroyMessage'])) {
        $this->notifiedDestroyMessage = $vals['notifiedDestroyMessage'];
      }
      if (isset($vals['notifiedMarkAsRead'])) {
        $this->notifiedMarkAsRead = $vals['notifiedMarkAsRead'];
      }
      if (isset($vals['notifiedUpdateSquareMemberProfile'])) {
        $this->notifiedUpdateSquareMemberProfile = $vals['notifiedUpdateSquareMemberProfile'];
      }
      if (isset($vals['notifiedKickoutFromSquare'])) {
        $this->notifiedKickoutFromSquare = $vals['notifiedKickoutFromSquare'];
      }
      if (isset($vals['notifiedShutdownSquare'])) {
        $this->notifiedShutdownSquare = $vals['notifiedShutdownSquare'];
      }
      if (isset($vals['notifiedDeleteSquareChat'])) {
        $this->notifiedDeleteSquareChat = $vals['notifiedDeleteSquareChat'];
      }
      if (isset($vals['notifiedUpdateSquareChatProfileName'])) {
        $this->notifiedUpdateSquareChatProfileName = $vals['notifiedUpdateSquareChatProfileName'];
      }
      if (isset($vals['notifiedUpdateSquareChatProfileImage'])) {
        $this->notifiedUpdateSquareChatProfileImage = $vals['notifiedUpdateSquareChatProfileImage'];
      }
      if (isset($vals['notifiedUpdateSquareStatus'])) {
        $this->notifiedUpdateSquareStatus = $vals['notifiedUpdateSquareStatus'];
      }
      if (isset($vals['notifiedUpdateSquareChatStatus'])) {
        $this->notifiedUpdateSquareChatStatus = $vals['notifiedUpdateSquareChatStatus'];
      }
      if (isset($vals['notifiedCreateSquareMember'])) {
        $this->notifiedCreateSquareMember = $vals['notifiedCreateSquareMember'];
      }
      if (isset($vals['notifiedCreateSquareChatMember'])) {
        $this->notifiedCreateSquareChatMember = $vals['notifiedCreateSquareChatMember'];
      }
      if (isset($vals['notifiedUpdateSquareMemberRelation'])) {
        $this->notifiedUpdateSquareMemberRelation = $vals['notifiedUpdateSquareMemberRelation'];
      }
      if (isset($vals['notifiedUpdateSquare'])) {
        $this->notifiedUpdateSquare = $vals['notifiedUpdateSquare'];
      }
      if (isset($vals['notifiedUpdateSquareMember'])) {
        $this->notifiedUpdateSquareMember = $vals['notifiedUpdateSquareMember'];
      }
      if (isset($vals['notifiedUpdateSquareChat'])) {
        $this->notifiedUpdateSquareChat = $vals['notifiedUpdateSquareChat'];
      }
      if (isset($vals['notificationJoinRequest'])) {
        $this->notificationJoinRequest = $vals['notificationJoinRequest'];
      }
      if (isset($vals['notificationJoined'])) {
        $this->notificationJoined = $vals['notificationJoined'];
      }
      if (isset($vals['notificationPromoteCoadmin'])) {
        $this->notificationPromoteCoadmin = $vals['notificationPromoteCoadmin'];
      }
      if (isset($vals['notificationPromoteAdmin'])) {
        $this->notificationPromoteAdmin = $vals['notificationPromoteAdmin'];
      }
      if (isset($vals['notificationDemoteMember'])) {
        $this->notificationDemoteMember = $vals['notificationDemoteMember'];
      }
      if (isset($vals['notificationKickedOut'])) {
        $this->notificationKickedOut = $vals['notificationKickedOut'];
      }
      if (isset($vals['notificationSquareDelete'])) {
        $this->notificationSquareDelete = $vals['notificationSquareDelete'];
      }
      if (isset($vals['notificationSquareChatDelete'])) {
        $this->notificationSquareChatDelete = $vals['notificationSquareChatDelete'];
      }
      if (isset($vals['notificationMessage'])) {
        $this->notificationMessage = $vals['notificationMessage'];
      }
      if (isset($vals['notifiedUpdateSquareChatMember'])) {
        $this->notifiedUpdateSquareChatMember = $vals['notifiedUpdateSquareChatMember'];
      }
      if (isset($vals['notifiedUpdateSquareAuthority'])) {
        $this->notifiedUpdateSquareAuthority = $vals['notifiedUpdateSquareAuthority'];
      }
      if (isset($vals['notifiedUpdateSquareFeatureSet'])) {
        $this->notifiedUpdateSquareFeatureSet = $vals['notifiedUpdateSquareFeatureSet'];
      }
    }
  }

  public function getName() {
    return 'SquareEventPayload';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->receiveMessage = new \SquareEventReceiveMessage();
            $xfer += $this->receiveMessage->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->sendMessage = new \SquareEventSendMessage();
            $xfer += $this->sendMessage->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRUCT) {
            $this->notifiedJoinSquareChat = new \SquareEventNotifiedJoinSquareChat();
            $xfer += $this->notifiedJoinSquareChat->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRUCT) {
            $this->notifiedInviteIntoSquareChat = new \SquareEventNotifiedInviteIntoSquareChat();
            $xfer += $this->notifiedInviteIntoSquareChat->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRUCT) {
            $this->notifiedLeaveSquareChat = new \SquareEventNotifiedLeaveSquareChat();
            $xfer += $this->notifiedLeaveSquareChat->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRUCT) {
            $this->notifiedDestroyMessage = new \SquareEventNotifiedDestroyMessage();
            $xfer += $this->notifiedDestroyMessage->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::STRUCT) {
            $this->notifiedMarkAsRead = new \SquareEventNotifiedMarkAsRead();
            $xfer += $this->notifiedMarkAsRead->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 8:
          if ($ftype == TType::STRUCT) {
            $this->notifiedUpdateSquareMemberProfile = new \SquareEventNotifiedUpdateSquareMemberProfile();
            $xfer += $this->notifiedUpdateSquareMemberProfile->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 20:
          if ($ftype == TType::STRUCT) {
            $this->notifiedKickoutFromSquare = new \SquareEventNotifiedKickoutFromSquare();
            $xfer += $this->notifiedKickoutFromSquare->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 19:
          if ($ftype == TType::STRUCT) {
            $this->notifiedShutdownSquare = new \SquareEventNotifiedShutdownSquare();
            $xfer += $this->notifiedShutdownSquare->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 21:
          if ($ftype == TType::STRUCT) {
            $this->notifiedDeleteSquareChat = new \SquareEventNotifiedDeleteSquareChat();
            $xfer += $this->notifiedDeleteSquareChat->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 31:
          if ($ftype == TType::STRUCT) {
            $this->notifiedUpdateSquareChatProfileName = new \SquareEventNotifiedUpdateSquareChatProfileName();
            $xfer += $this->notifiedUpdateSquareChatProfileName->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 32:
          if ($ftype == TType::STRUCT) {
            $this->notifiedUpdateSquareChatProfileImage = new \SquareEventNotifiedUpdateSquareChatProfileImage();
            $xfer += $this->notifiedUpdateSquareChatProfileImage->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 14:
          if ($ftype == TType::STRUCT) {
            $this->notifiedUpdateSquareStatus = new \SquareEventNotifiedUpdateSquareStatus();
            $xfer += $this->notifiedUpdateSquareStatus->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 15:
          if ($ftype == TType::STRUCT) {
            $this->notifiedUpdateSquareChatStatus = new \SquareEventNotifiedUpdateSquareChatStatus();
            $xfer += $this->notifiedUpdateSquareChatStatus->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 16:
          if ($ftype == TType::STRUCT) {
            $this->notifiedCreateSquareMember = new \SquareEventNotifiedCreateSquareMember();
            $xfer += $this->notifiedCreateSquareMember->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 17:
          if ($ftype == TType::STRUCT) {
            $this->notifiedCreateSquareChatMember = new \SquareEventNotifiedCreateSquareChatMember();
            $xfer += $this->notifiedCreateSquareChatMember->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 18:
          if ($ftype == TType::STRUCT) {
            $this->notifiedUpdateSquareMemberRelation = new \SquareEventNotifiedUpdateSquareMemberRelation();
            $xfer += $this->notifiedUpdateSquareMemberRelation->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 9:
          if ($ftype == TType::STRUCT) {
            $this->notifiedUpdateSquare = new \SquareEventNotifiedUpdateSquare();
            $xfer += $this->notifiedUpdateSquare->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 10:
          if ($ftype == TType::STRUCT) {
            $this->notifiedUpdateSquareMember = new \SquareEventNotifiedUpdateSquareMember();
            $xfer += $this->notifiedUpdateSquareMember->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 11:
          if ($ftype == TType::STRUCT) {
            $this->notifiedUpdateSquareChat = new \SquareEventNotifiedUpdateSquareChat();
            $xfer += $this->notifiedUpdateSquareChat->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 22:
          if ($ftype == TType::STRUCT) {
            $this->notificationJoinRequest = new \SquareEventNotificationJoinRequest();
            $xfer += $this->notificationJoinRequest->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 23:
          if ($ftype == TType::STRUCT) {
            $this->notificationJoined = new \SquareEventNotificationMemberUpdate();
            $xfer += $this->notificationJoined->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 24:
          if ($ftype == TType::STRUCT) {
            $this->notificationPromoteCoadmin = new \SquareEventNotificationMemberUpdate();
            $xfer += $this->notificationPromoteCoadmin->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 25:
          if ($ftype == TType::STRUCT) {
            $this->notificationPromoteAdmin = new \SquareEventNotificationMemberUpdate();
            $xfer += $this->notificationPromoteAdmin->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 26:
          if ($ftype == TType::STRUCT) {
            $this->notificationDemoteMember = new \SquareEventNotificationMemberUpdate();
            $xfer += $this->notificationDemoteMember->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 27:
          if ($ftype == TType::STRUCT) {
            $this->notificationKickedOut = new \SquareEventNotificationMemberUpdate();
            $xfer += $this->notificationKickedOut->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 28:
          if ($ftype == TType::STRUCT) {
            $this->notificationSquareDelete = new \SquareEventNotificationSquareDelete();
            $xfer += $this->notificationSquareDelete->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 29:
          if ($ftype == TType::STRUCT) {
            $this->notificationSquareChatDelete = new \SquareEventNotificationSquareChatDelete();
            $xfer += $this->notificationSquareChatDelete->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 30:
          if ($ftype == TType::STRUCT) {
            $this->notificationMessage = new \SquareEventNotificationMessage();
            $xfer += $this->notificationMessage->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 12:
          if ($ftype == TType::STRUCT) {
            $this->notifiedUpdateSquareChatMember = new \SquareEventNotifiedUpdateSquareChatMember();
            $xfer += $this->notifiedUpdateSquareChatMember->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 13:
          if ($ftype == TType::STRUCT) {
            $this->notifiedUpdateSquareAuthority = new \SquareEventNotifiedUpdateSquareAuthority();
            $xfer += $this->notifiedUpdateSquareAuthority->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 33:
          if ($ftype == TType::STRUCT) {
            $this->notifiedUpdateSquareFeatureSet = new \SquareEventNotifiedUpdateSquareFeatureSet();
            $xfer += $this->notifiedUpdateSquareFeatureSet->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('SquareEventPayload');
    if ($this->receiveMessage !== null) {
      if (!is_object($this->receiveMessage)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('receiveMessage', TType::STRUCT, 1);
      $xfer += $this->receiveMessage->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->sendMessage !== null) {
      if (!is_object($this->sendMessage)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('sendMessage', TType::STRUCT, 2);
      $xfer += $this->sendMessage->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->notifiedJoinSquareChat !== null) {
      if (!is_object($this->notifiedJoinSquareChat)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('notifiedJoinSquareChat', TType::STRUCT, 3);
      $xfer += $this->notifiedJoinSquareChat->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->notifiedInviteIntoSquareChat !== null) {
      if (!is_object($this->notifiedInviteIntoSquareChat)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('notifiedInviteIntoSquareChat', TType::STRUCT, 4);
      $xfer += $this->notifiedInviteIntoSquareChat->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->notifiedLeaveSquareChat !== null) {
      if (!is_object($this->notifiedLeaveSquareChat)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('notifiedLeaveSquareChat', TType::STRUCT, 5);
      $xfer += $this->notifiedLeaveSquareChat->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->notifiedDestroyMessage !== null) {
      if (!is_object($this->notifiedDestroyMessage)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('notifiedDestroyMessage', TType::STRUCT, 6);
      $xfer += $this->notifiedDestroyMessage->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->notifiedMarkAsRead !== null) {
      if (!is_object($this->notifiedMarkAsRead)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('notifiedMarkAsRead', TType::STRUCT, 7);
      $xfer += $this->notifiedMarkAsRead->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->notifiedUpdateSquareMemberProfile !== null) {
      if (!is_object($this->notifiedUpdateSquareMemberProfile)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('notifiedUpdateSquareMemberProfile', TType::STRUCT, 8);
      $xfer += $this->notifiedUpdateSquareMemberProfile->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->notifiedUpdateSquare !== null) {
      if (!is_object($this->notifiedUpdateSquare)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('notifiedUpdateSquare', TType::STRUCT, 9);
      $xfer += $this->notifiedUpdateSquare->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->notifiedUpdateSquareMember !== null) {
      if (!is_object($this->notifiedUpdateSquareMember)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('notifiedUpdateSquareMember', TType::STRUCT, 10);
      $xfer += $this->notifiedUpdateSquareMember->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->notifiedUpdateSquareChat !== null) {
      if (!is_object($this->notifiedUpdateSquareChat)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('notifiedUpdateSquareChat', TType::STRUCT, 11);
      $xfer += $this->notifiedUpdateSquareChat->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->notifiedUpdateSquareChatMember !== null) {
      if (!is_object($this->notifiedUpdateSquareChatMember)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('notifiedUpdateSquareChatMember', TType::STRUCT, 12);
      $xfer += $this->notifiedUpdateSquareChatMember->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->notifiedUpdateSquareAuthority !== null) {
      if (!is_object($this->notifiedUpdateSquareAuthority)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('notifiedUpdateSquareAuthority', TType::STRUCT, 13);
      $xfer += $this->notifiedUpdateSquareAuthority->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->notifiedUpdateSquareStatus !== null) {
      if (!is_object($this->notifiedUpdateSquareStatus)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('notifiedUpdateSquareStatus', TType::STRUCT, 14);
      $xfer += $this->notifiedUpdateSquareStatus->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->notifiedUpdateSquareChatStatus !== null) {
      if (!is_object($this->notifiedUpdateSquareChatStatus)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('notifiedUpdateSquareChatStatus', TType::STRUCT, 15);
      $xfer += $this->notifiedUpdateSquareChatStatus->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->notifiedCreateSquareMember !== null) {
      if (!is_object($this->notifiedCreateSquareMember)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('notifiedCreateSquareMember', TType::STRUCT, 16);
      $xfer += $this->notifiedCreateSquareMember->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->notifiedCreateSquareChatMember !== null) {
      if (!is_object($this->notifiedCreateSquareChatMember)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('notifiedCreateSquareChatMember', TType::STRUCT, 17);
      $xfer += $this->notifiedCreateSquareChatMember->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->notifiedUpdateSquareMemberRelation !== null) {
      if (!is_object($this->notifiedUpdateSquareMemberRelation)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('notifiedUpdateSquareMemberRelation', TType::STRUCT, 18);
      $xfer += $this->notifiedUpdateSquareMemberRelation->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->notifiedShutdownSquare !== null) {
      if (!is_object($this->notifiedShutdownSquare)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('notifiedShutdownSquare', TType::STRUCT, 19);
      $xfer += $this->notifiedShutdownSquare->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->notifiedKickoutFromSquare !== null) {
      if (!is_object($this->notifiedKickoutFromSquare)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('notifiedKickoutFromSquare', TType::STRUCT, 20);
      $xfer += $this->notifiedKickoutFromSquare->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->notifiedDeleteSquareChat !== null) {
      if (!is_object($this->notifiedDeleteSquareChat)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('notifiedDeleteSquareChat', TType::STRUCT, 21);
      $xfer += $this->notifiedDeleteSquareChat->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->notificationJoinRequest !== null) {
      if (!is_object($this->notificationJoinRequest)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('notificationJoinRequest', TType::STRUCT, 22);
      $xfer += $this->notificationJoinRequest->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->notificationJoined !== null) {
      if (!is_object($this->notificationJoined)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('notificationJoined', TType::STRUCT, 23);
      $xfer += $this->notificationJoined->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->notificationPromoteCoadmin !== null) {
      if (!is_object($this->notificationPromoteCoadmin)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('notificationPromoteCoadmin', TType::STRUCT, 24);
      $xfer += $this->notificationPromoteCoadmin->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->notificationPromoteAdmin !== null) {
      if (!is_object($this->notificationPromoteAdmin)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('notificationPromoteAdmin', TType::STRUCT, 25);
      $xfer += $this->notificationPromoteAdmin->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->notificationDemoteMember !== null) {
      if (!is_object($this->notificationDemoteMember)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('notificationDemoteMember', TType::STRUCT, 26);
      $xfer += $this->notificationDemoteMember->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->notificationKickedOut !== null) {
      if (!is_object($this->notificationKickedOut)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('notificationKickedOut', TType::STRUCT, 27);
      $xfer += $this->notificationKickedOut->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->notificationSquareDelete !== null) {
      if (!is_object($this->notificationSquareDelete)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('notificationSquareDelete', TType::STRUCT, 28);
      $xfer += $this->notificationSquareDelete->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->notificationSquareChatDelete !== null) {
      if (!is_object($this->notificationSquareChatDelete)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('notificationSquareChatDelete', TType::STRUCT, 29);
      $xfer += $this->notificationSquareChatDelete->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->notificationMessage !== null) {
      if (!is_object($this->notificationMessage)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('notificationMessage', TType::STRUCT, 30);
      $xfer += $this->notificationMessage->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->notifiedUpdateSquareChatProfileName !== null) {
      if (!is_object($this->notifiedUpdateSquareChatProfileName)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('notifiedUpdateSquareChatProfileName', TType::STRUCT, 31);
      $xfer += $this->notifiedUpdateSquareChatProfileName->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->notifiedUpdateSquareChatProfileImage !== null) {
      if (!is_object($this->notifiedUpdateSquareChatProfileImage)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('notifiedUpdateSquareChatProfileImage', TType::STRUCT, 32);
      $xfer += $this->notifiedUpdateSquareChatProfileImage->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->notifiedUpdateSquareFeatureSet !== null) {
      if (!is_object($this->notifiedUpdateSquareFeatureSet)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('notifiedUpdateSquareFeatureSet', TType::STRUCT, 33);
      $xfer += $this->notifiedUpdateSquareFeatureSet->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class SquareEvent {
  static $_TSPEC;

  /**
   * @var int
   */
  public $createdTime = null;
  /**
   * @var int
   */
  public $type = null;
  /**
   * @var \SquareEventPayload
   */
  public $payload = null;
  /**
   * @var string
   */
  public $syncToken = null;
  /**
   * @var int
   */
  public $eventStatus = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        2 => array(
          'var' => 'createdTime',
          'type' => TType::I64,
          ),
        3 => array(
          'var' => 'type',
          'type' => TType::I32,
          ),
        4 => array(
          'var' => 'payload',
          'type' => TType::STRUCT,
          'class' => '\SquareEventPayload',
          ),
        5 => array(
          'var' => 'syncToken',
          'type' => TType::STRING,
          ),
        6 => array(
          'var' => 'eventStatus',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['createdTime'])) {
        $this->createdTime = $vals['createdTime'];
      }
      if (isset($vals['type'])) {
        $this->type = $vals['type'];
      }
      if (isset($vals['payload'])) {
        $this->payload = $vals['payload'];
      }
      if (isset($vals['syncToken'])) {
        $this->syncToken = $vals['syncToken'];
      }
      if (isset($vals['eventStatus'])) {
        $this->eventStatus = $vals['eventStatus'];
      }
    }
  }

  public function getName() {
    return 'SquareEvent';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 2:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->createdTime);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->type);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRUCT) {
            $this->payload = new \SquareEventPayload();
            $xfer += $this->payload->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->syncToken);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->eventStatus);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('SquareEvent');
    if ($this->createdTime !== null) {
      $xfer += $output->writeFieldBegin('createdTime', TType::I64, 2);
      $xfer += $output->writeI64($this->createdTime);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->type !== null) {
      $xfer += $output->writeFieldBegin('type', TType::I32, 3);
      $xfer += $output->writeI32($this->type);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->payload !== null) {
      if (!is_object($this->payload)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('payload', TType::STRUCT, 4);
      $xfer += $this->payload->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->syncToken !== null) {
      $xfer += $output->writeFieldBegin('syncToken', TType::STRING, 5);
      $xfer += $output->writeString($this->syncToken);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->eventStatus !== null) {
      $xfer += $output->writeFieldBegin('eventStatus', TType::I32, 6);
      $xfer += $output->writeI32($this->eventStatus);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class Category {
  static $_TSPEC;

  /**
   * @var int
   */
  public $id = null;
  /**
   * @var string
   */
  public $name = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'id',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'name',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['id'])) {
        $this->id = $vals['id'];
      }
      if (isset($vals['name'])) {
        $this->name = $vals['name'];
      }
    }
  }

  public function getName() {
    return 'Category';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->id);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->name);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('Category');
    if ($this->id !== null) {
      $xfer += $output->writeFieldBegin('id', TType::I32, 1);
      $xfer += $output->writeI32($this->id);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->name !== null) {
      $xfer += $output->writeFieldBegin('name', TType::STRING, 2);
      $xfer += $output->writeString($this->name);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class SquareException extends TException {
  static $_TSPEC;

  /**
   * @var int
   */
  public $errorCode = null;
  /**
   * @var \ErrorExtraInfo
   */
  public $errorExtraInfo = null;
  /**
   * @var string
   */
  public $reason = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'errorCode',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'errorExtraInfo',
          'type' => TType::STRUCT,
          'class' => '\ErrorExtraInfo',
          ),
        3 => array(
          'var' => 'reason',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['errorCode'])) {
        $this->errorCode = $vals['errorCode'];
      }
      if (isset($vals['errorExtraInfo'])) {
        $this->errorExtraInfo = $vals['errorExtraInfo'];
      }
      if (isset($vals['reason'])) {
        $this->reason = $vals['reason'];
      }
    }
  }

  public function getName() {
    return 'SquareException';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->errorCode);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->errorExtraInfo = new \ErrorExtraInfo();
            $xfer += $this->errorExtraInfo->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->reason);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('SquareException');
    if ($this->errorCode !== null) {
      $xfer += $output->writeFieldBegin('errorCode', TType::I32, 1);
      $xfer += $output->writeI32($this->errorCode);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->errorExtraInfo !== null) {
      if (!is_object($this->errorExtraInfo)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('errorExtraInfo', TType::STRUCT, 2);
      $xfer += $this->errorExtraInfo->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->reason !== null) {
      $xfer += $output->writeFieldBegin('reason', TType::STRING, 3);
      $xfer += $output->writeString($this->reason);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class UniversalNotificationServiceException extends TException {
  static $_TSPEC;

  /**
   * @var int
   */
  public $code = null;
  /**
   * @var string
   */
  public $reason = null;
  /**
   * @var array
   */
  public $parameterMap = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'code',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'reason',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'parameterMap',
          'type' => TType::MAP,
          'ktype' => TType::STRING,
          'vtype' => TType::STRING,
          'key' => array(
            'type' => TType::STRING,
          ),
          'val' => array(
            'type' => TType::STRING,
            ),
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['code'])) {
        $this->code = $vals['code'];
      }
      if (isset($vals['reason'])) {
        $this->reason = $vals['reason'];
      }
      if (isset($vals['parameterMap'])) {
        $this->parameterMap = $vals['parameterMap'];
      }
    }
  }

  public function getName() {
    return 'UniversalNotificationServiceException';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->code);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->reason);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::MAP) {
            $this->parameterMap = array();
            $_size352 = 0;
            $_ktype353 = 0;
            $_vtype354 = 0;
            $xfer += $input->readMapBegin($_ktype353, $_vtype354, $_size352);
            for ($_i356 = 0; $_i356 < $_size352; ++$_i356)
            {
              $key357 = '';
              $val358 = '';
              $xfer += $input->readString($key357);
              $xfer += $input->readString($val358);
              $this->parameterMap[$key357] = $val358;
            }
            $xfer += $input->readMapEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('UniversalNotificationServiceException');
    if ($this->code !== null) {
      $xfer += $output->writeFieldBegin('code', TType::I32, 1);
      $xfer += $output->writeI32($this->code);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->reason !== null) {
      $xfer += $output->writeFieldBegin('reason', TType::STRING, 2);
      $xfer += $output->writeString($this->reason);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parameterMap !== null) {
      if (!is_array($this->parameterMap)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('parameterMap', TType::MAP, 3);
      {
        $output->writeMapBegin(TType::STRING, TType::STRING, count($this->parameterMap));
        {
          foreach ($this->parameterMap as $kiter359 => $viter360)
          {
            $xfer += $output->writeString($kiter359);
            $xfer += $output->writeString($viter360);
          }
        }
        $output->writeMapEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class UpdateBuddyProfileResult {
  static $_TSPEC;

  /**
   * @var string
   */
  public $requestId = null;
  /**
   * @var int
   */
  public $state = null;
  /**
   * @var int
   */
  public $eventNo = null;
  /**
   * @var int
   */
  public $receiverCount = null;
  /**
   * @var int
   */
  public $successCount = null;
  /**
   * @var int
   */
  public $failCount = null;
  /**
   * @var int
   */
  public $cancelCount = null;
  /**
   * @var int
   */
  public $unregisterCount = null;
  /**
   * @var int
   */
  public $timestamp = null;
  /**
   * @var string
   */
  public $message = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'requestId',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'state',
          'type' => TType::I32,
          ),
        3 => array(
          'var' => 'eventNo',
          'type' => TType::I32,
          ),
        11 => array(
          'var' => 'receiverCount',
          'type' => TType::I64,
          ),
        12 => array(
          'var' => 'successCount',
          'type' => TType::I64,
          ),
        13 => array(
          'var' => 'failCount',
          'type' => TType::I64,
          ),
        14 => array(
          'var' => 'cancelCount',
          'type' => TType::I64,
          ),
        15 => array(
          'var' => 'unregisterCount',
          'type' => TType::I64,
          ),
        21 => array(
          'var' => 'timestamp',
          'type' => TType::I64,
          ),
        22 => array(
          'var' => 'message',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['requestId'])) {
        $this->requestId = $vals['requestId'];
      }
      if (isset($vals['state'])) {
        $this->state = $vals['state'];
      }
      if (isset($vals['eventNo'])) {
        $this->eventNo = $vals['eventNo'];
      }
      if (isset($vals['receiverCount'])) {
        $this->receiverCount = $vals['receiverCount'];
      }
      if (isset($vals['successCount'])) {
        $this->successCount = $vals['successCount'];
      }
      if (isset($vals['failCount'])) {
        $this->failCount = $vals['failCount'];
      }
      if (isset($vals['cancelCount'])) {
        $this->cancelCount = $vals['cancelCount'];
      }
      if (isset($vals['unregisterCount'])) {
        $this->unregisterCount = $vals['unregisterCount'];
      }
      if (isset($vals['timestamp'])) {
        $this->timestamp = $vals['timestamp'];
      }
      if (isset($vals['message'])) {
        $this->message = $vals['message'];
      }
    }
  }

  public function getName() {
    return 'UpdateBuddyProfileResult';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->requestId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->state);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->eventNo);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 11:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->receiverCount);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 12:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->successCount);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 13:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->failCount);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 14:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->cancelCount);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 15:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->unregisterCount);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 21:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->timestamp);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 22:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->message);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('UpdateBuddyProfileResult');
    if ($this->requestId !== null) {
      $xfer += $output->writeFieldBegin('requestId', TType::STRING, 1);
      $xfer += $output->writeString($this->requestId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->state !== null) {
      $xfer += $output->writeFieldBegin('state', TType::I32, 2);
      $xfer += $output->writeI32($this->state);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->eventNo !== null) {
      $xfer += $output->writeFieldBegin('eventNo', TType::I32, 3);
      $xfer += $output->writeI32($this->eventNo);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->receiverCount !== null) {
      $xfer += $output->writeFieldBegin('receiverCount', TType::I64, 11);
      $xfer += $output->writeI64($this->receiverCount);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->successCount !== null) {
      $xfer += $output->writeFieldBegin('successCount', TType::I64, 12);
      $xfer += $output->writeI64($this->successCount);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->failCount !== null) {
      $xfer += $output->writeFieldBegin('failCount', TType::I64, 13);
      $xfer += $output->writeI64($this->failCount);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->cancelCount !== null) {
      $xfer += $output->writeFieldBegin('cancelCount', TType::I64, 14);
      $xfer += $output->writeI64($this->cancelCount);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->unregisterCount !== null) {
      $xfer += $output->writeFieldBegin('unregisterCount', TType::I64, 15);
      $xfer += $output->writeI64($this->unregisterCount);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->timestamp !== null) {
      $xfer += $output->writeFieldBegin('timestamp', TType::I64, 21);
      $xfer += $output->writeI64($this->timestamp);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->message !== null) {
      $xfer += $output->writeFieldBegin('message', TType::STRING, 22);
      $xfer += $output->writeString($this->message);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class UserAuthStatus {
  static $_TSPEC;

  /**
   * @var bool
   */
  public $phoneNumberRegistered = null;
  /**
   * @var int[]
   */
  public $registeredSnsIdTypes = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'phoneNumberRegistered',
          'type' => TType::BOOL,
          ),
        2 => array(
          'var' => 'registeredSnsIdTypes',
          'type' => TType::LST,
          'etype' => TType::I32,
          'elem' => array(
            'type' => TType::I32,
            ),
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['phoneNumberRegistered'])) {
        $this->phoneNumberRegistered = $vals['phoneNumberRegistered'];
      }
      if (isset($vals['registeredSnsIdTypes'])) {
        $this->registeredSnsIdTypes = $vals['registeredSnsIdTypes'];
      }
    }
  }

  public function getName() {
    return 'UserAuthStatus';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->phoneNumberRegistered);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::LST) {
            $this->registeredSnsIdTypes = array();
            $_size361 = 0;
            $_etype364 = 0;
            $xfer += $input->readListBegin($_etype364, $_size361);
            for ($_i365 = 0; $_i365 < $_size361; ++$_i365)
            {
              $elem366 = null;
              $xfer += $input->readI32($elem366);
              $this->registeredSnsIdTypes []= $elem366;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('UserAuthStatus');
    if ($this->phoneNumberRegistered !== null) {
      $xfer += $output->writeFieldBegin('phoneNumberRegistered', TType::BOOL, 1);
      $xfer += $output->writeBool($this->phoneNumberRegistered);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->registeredSnsIdTypes !== null) {
      if (!is_array($this->registeredSnsIdTypes)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('registeredSnsIdTypes', TType::LST, 2);
      {
        $output->writeListBegin(TType::I32, count($this->registeredSnsIdTypes));
        {
          foreach ($this->registeredSnsIdTypes as $iter367)
          {
            $xfer += $output->writeI32($iter367);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class VerificationSessionData {
  static $_TSPEC;

  /**
   * @var string
   */
  public $sessionId = null;
  /**
   * @var int
   */
  public $method = null;
  /**
   * @var string
   */
  public $callback = null;
  /**
   * @var string
   */
  public $normalizedPhone = null;
  /**
   * @var string
   */
  public $countryCode = null;
  /**
   * @var string
   */
  public $nationalSignificantNumber = null;
  /**
   * @var int[]
   */
  public $availableVerificationMethods = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'sessionId',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'method',
          'type' => TType::I32,
          ),
        3 => array(
          'var' => 'callback',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'normalizedPhone',
          'type' => TType::STRING,
          ),
        5 => array(
          'var' => 'countryCode',
          'type' => TType::STRING,
          ),
        6 => array(
          'var' => 'nationalSignificantNumber',
          'type' => TType::STRING,
          ),
        7 => array(
          'var' => 'availableVerificationMethods',
          'type' => TType::LST,
          'etype' => TType::I32,
          'elem' => array(
            'type' => TType::I32,
            ),
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['sessionId'])) {
        $this->sessionId = $vals['sessionId'];
      }
      if (isset($vals['method'])) {
        $this->method = $vals['method'];
      }
      if (isset($vals['callback'])) {
        $this->callback = $vals['callback'];
      }
      if (isset($vals['normalizedPhone'])) {
        $this->normalizedPhone = $vals['normalizedPhone'];
      }
      if (isset($vals['countryCode'])) {
        $this->countryCode = $vals['countryCode'];
      }
      if (isset($vals['nationalSignificantNumber'])) {
        $this->nationalSignificantNumber = $vals['nationalSignificantNumber'];
      }
      if (isset($vals['availableVerificationMethods'])) {
        $this->availableVerificationMethods = $vals['availableVerificationMethods'];
      }
    }
  }

  public function getName() {
    return 'VerificationSessionData';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->sessionId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->method);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->callback);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->normalizedPhone);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->countryCode);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->nationalSignificantNumber);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::LST) {
            $this->availableVerificationMethods = array();
            $_size368 = 0;
            $_etype371 = 0;
            $xfer += $input->readListBegin($_etype371, $_size368);
            for ($_i372 = 0; $_i372 < $_size368; ++$_i372)
            {
              $elem373 = null;
              $xfer += $input->readI32($elem373);
              $this->availableVerificationMethods []= $elem373;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('VerificationSessionData');
    if ($this->sessionId !== null) {
      $xfer += $output->writeFieldBegin('sessionId', TType::STRING, 1);
      $xfer += $output->writeString($this->sessionId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->method !== null) {
      $xfer += $output->writeFieldBegin('method', TType::I32, 2);
      $xfer += $output->writeI32($this->method);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->callback !== null) {
      $xfer += $output->writeFieldBegin('callback', TType::STRING, 3);
      $xfer += $output->writeString($this->callback);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->normalizedPhone !== null) {
      $xfer += $output->writeFieldBegin('normalizedPhone', TType::STRING, 4);
      $xfer += $output->writeString($this->normalizedPhone);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->countryCode !== null) {
      $xfer += $output->writeFieldBegin('countryCode', TType::STRING, 5);
      $xfer += $output->writeString($this->countryCode);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->nationalSignificantNumber !== null) {
      $xfer += $output->writeFieldBegin('nationalSignificantNumber', TType::STRING, 6);
      $xfer += $output->writeString($this->nationalSignificantNumber);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->availableVerificationMethods !== null) {
      if (!is_array($this->availableVerificationMethods)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('availableVerificationMethods', TType::LST, 7);
      {
        $output->writeListBegin(TType::I32, count($this->availableVerificationMethods));
        {
          foreach ($this->availableVerificationMethods as $iter374)
          {
            $xfer += $output->writeI32($iter374);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class WapInvitation {
  static $_TSPEC;

  /**
   * @var int
   */
  public $type = null;
  /**
   * @var string
   */
  public $inviteeEmail = null;
  /**
   * @var string
   */
  public $inviterMid = null;
  /**
   * @var string
   */
  public $roomMid = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'type',
          'type' => TType::I32,
          ),
        10 => array(
          'var' => 'inviteeEmail',
          'type' => TType::STRING,
          ),
        11 => array(
          'var' => 'inviterMid',
          'type' => TType::STRING,
          ),
        12 => array(
          'var' => 'roomMid',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['type'])) {
        $this->type = $vals['type'];
      }
      if (isset($vals['inviteeEmail'])) {
        $this->inviteeEmail = $vals['inviteeEmail'];
      }
      if (isset($vals['inviterMid'])) {
        $this->inviterMid = $vals['inviterMid'];
      }
      if (isset($vals['roomMid'])) {
        $this->roomMid = $vals['roomMid'];
      }
    }
  }

  public function getName() {
    return 'WapInvitation';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->type);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 10:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->inviteeEmail);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 11:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->inviterMid);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 12:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->roomMid);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('WapInvitation');
    if ($this->type !== null) {
      $xfer += $output->writeFieldBegin('type', TType::I32, 1);
      $xfer += $output->writeI32($this->type);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->inviteeEmail !== null) {
      $xfer += $output->writeFieldBegin('inviteeEmail', TType::STRING, 10);
      $xfer += $output->writeString($this->inviteeEmail);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->inviterMid !== null) {
      $xfer += $output->writeFieldBegin('inviterMid', TType::STRING, 11);
      $xfer += $output->writeString($this->inviterMid);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->roomMid !== null) {
      $xfer += $output->writeFieldBegin('roomMid', TType::STRING, 12);
      $xfer += $output->writeString($this->roomMid);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class CallHost {
  static $_TSPEC;

  /**
   * @var string
   */
  public $host = null;
  /**
   * @var int
   */
  public $port = null;
  /**
   * @var string
   */
  public $zone = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'host',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'port',
          'type' => TType::I32,
          ),
        3 => array(
          'var' => 'zone',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['host'])) {
        $this->host = $vals['host'];
      }
      if (isset($vals['port'])) {
        $this->port = $vals['port'];
      }
      if (isset($vals['zone'])) {
        $this->zone = $vals['zone'];
      }
    }
  }

  public function getName() {
    return 'CallHost';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->host);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->port);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->zone);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('CallHost');
    if ($this->host !== null) {
      $xfer += $output->writeFieldBegin('host', TType::STRING, 1);
      $xfer += $output->writeString($this->host);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->port !== null) {
      $xfer += $output->writeFieldBegin('port', TType::I32, 2);
      $xfer += $output->writeI32($this->port);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->zone !== null) {
      $xfer += $output->writeFieldBegin('zone', TType::STRING, 3);
      $xfer += $output->writeString($this->zone);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class GroupCall {
  static $_TSPEC;

  /**
   * @var bool
   */
  public $online = null;
  /**
   * @var string
   */
  public $chatMid = null;
  /**
   * @var string
   */
  public $hostMids = null;
  /**
   * @var string[]
   */
  public $memberMids = null;
  /**
   * @var int
   */
  public $started = null;
  /**
   * @var int
   */
  public $mediaType = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'online',
          'type' => TType::BOOL,
          ),
        2 => array(
          'var' => 'chatMid',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'hostMids',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'memberMids',
          'type' => TType::LST,
          'etype' => TType::STRING,
          'elem' => array(
            'type' => TType::STRING,
            ),
          ),
        5 => array(
          'var' => 'started',
          'type' => TType::I64,
          ),
        6 => array(
          'var' => 'mediaType',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['online'])) {
        $this->online = $vals['online'];
      }
      if (isset($vals['chatMid'])) {
        $this->chatMid = $vals['chatMid'];
      }
      if (isset($vals['hostMids'])) {
        $this->hostMids = $vals['hostMids'];
      }
      if (isset($vals['memberMids'])) {
        $this->memberMids = $vals['memberMids'];
      }
      if (isset($vals['started'])) {
        $this->started = $vals['started'];
      }
      if (isset($vals['mediaType'])) {
        $this->mediaType = $vals['mediaType'];
      }
    }
  }

  public function getName() {
    return 'GroupCall';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->online);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->chatMid);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->hostMids);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::LST) {
            $this->memberMids = array();
            $_size375 = 0;
            $_etype378 = 0;
            $xfer += $input->readListBegin($_etype378, $_size375);
            for ($_i379 = 0; $_i379 < $_size375; ++$_i379)
            {
              $elem380 = null;
              $xfer += $input->readString($elem380);
              $this->memberMids []= $elem380;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->started);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->mediaType);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('GroupCall');
    if ($this->online !== null) {
      $xfer += $output->writeFieldBegin('online', TType::BOOL, 1);
      $xfer += $output->writeBool($this->online);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->chatMid !== null) {
      $xfer += $output->writeFieldBegin('chatMid', TType::STRING, 2);
      $xfer += $output->writeString($this->chatMid);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->hostMids !== null) {
      $xfer += $output->writeFieldBegin('hostMids', TType::STRING, 3);
      $xfer += $output->writeString($this->hostMids);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->memberMids !== null) {
      if (!is_array($this->memberMids)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('memberMids', TType::LST, 4);
      {
        $output->writeListBegin(TType::STRING, count($this->memberMids));
        {
          foreach ($this->memberMids as $iter381)
          {
            $xfer += $output->writeString($iter381);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->started !== null) {
      $xfer += $output->writeFieldBegin('started', TType::I64, 5);
      $xfer += $output->writeI64($this->started);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->mediaType !== null) {
      $xfer += $output->writeFieldBegin('mediaType', TType::I32, 6);
      $xfer += $output->writeI32($this->mediaType);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class GroupCallRoute {
  static $_TSPEC;

  /**
   * @var string
   */
  public $token = null;
  /**
   * @var \CallHost
   */
  public $cscf = null;
  /**
   * @var \CallHost
   */
  public $mix = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'token',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'cscf',
          'type' => TType::STRUCT,
          'class' => '\CallHost',
          ),
        3 => array(
          'var' => 'mix',
          'type' => TType::STRUCT,
          'class' => '\CallHost',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['token'])) {
        $this->token = $vals['token'];
      }
      if (isset($vals['cscf'])) {
        $this->cscf = $vals['cscf'];
      }
      if (isset($vals['mix'])) {
        $this->mix = $vals['mix'];
      }
    }
  }

  public function getName() {
    return 'GroupCallRoute';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->token);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->cscf = new \CallHost();
            $xfer += $this->cscf->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRUCT) {
            $this->mix = new \CallHost();
            $xfer += $this->mix->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('GroupCallRoute');
    if ($this->token !== null) {
      $xfer += $output->writeFieldBegin('token', TType::STRING, 1);
      $xfer += $output->writeString($this->token);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->cscf !== null) {
      if (!is_object($this->cscf)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('cscf', TType::STRUCT, 2);
      $xfer += $this->cscf->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->mix !== null) {
      if (!is_object($this->mix)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('mix', TType::STRUCT, 3);
      $xfer += $this->mix->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}


